
Guess_Number_LCD_Btn.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000021aa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000004a  00800060  000021aa  0000223e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  008000aa  008000aa  00002288  2**0
                  ALLOC
  3 .stab         00001e0c  00000000  00000000  00002288  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001281  00000000  00000000  00004094  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  00005315  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  00005475  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  00005604  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  00007649  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  0000874a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  000096cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  0000984c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  00009b0e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000a39c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea ea       	ldi	r30, 0xAA	; 170
      68:	f1 e2       	ldi	r31, 0x21	; 33
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 3a       	cpi	r26, 0xAA	; 170
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	aa ea       	ldi	r26, 0xAA	; 170
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a0 3b       	cpi	r26, 0xB0	; 176
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 fc 0e 	call	0x1df8	; 0x1df8 <main>
      8a:	0c 94 d3 10 	jmp	0x21a6	; 0x21a6 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 df 0f 	jmp	0x1fbe	; 0x1fbe <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a5 e8       	ldi	r26, 0x85	; 133
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 fb 0f 	jmp	0x1ff6	; 0x1ff6 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 eb 0f 	jmp	0x1fd6	; 0x1fd6 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 07 10 	jmp	0x200e	; 0x200e <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 eb 0f 	jmp	0x1fd6	; 0x1fd6 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 07 10 	jmp	0x200e	; 0x200e <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 df 0f 	jmp	0x1fbe	; 0x1fbe <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	85 e8       	ldi	r24, 0x85	; 133
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 fb 0f 	jmp	0x1ff6	; 0x1ff6 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 e7 0f 	jmp	0x1fce	; 0x1fce <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	65 e8       	ldi	r22, 0x85	; 133
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 03 10 	jmp	0x2006	; 0x2006 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 eb 0f 	jmp	0x1fd6	; 0x1fd6 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 07 10 	jmp	0x200e	; 0x200e <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 eb 0f 	jmp	0x1fd6	; 0x1fd6 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 07 10 	jmp	0x200e	; 0x200e <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 eb 0f 	jmp	0x1fd6	; 0x1fd6 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 07 10 	jmp	0x200e	; 0x200e <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 ef 0f 	jmp	0x1fde	; 0x1fde <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 0b 10 	jmp	0x2016	; 0x2016 <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <DIO_voidInit>:
/*     Description : It initializes the DIO Drive                                       */
/*     Input       : Nothing                                                            */
/*     Output      : Status of the that API                                             */
/****************************************************************************************/

u8 DIO_voidInit(void) {
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	0f 92       	push	r0
     ca4:	cd b7       	in	r28, 0x3d	; 61
     ca6:	de b7       	in	r29, 0x3e	; 62

	u8 Init_Status = EXIT_FAILED;
     ca8:	19 82       	std	Y+1, r1	; 0x01
	/* Initialize all DDrx registers to be Input as  default initialization */
	*(DIO_dirs[DIO_PORTA]) = DEFAULT_PORT_DIRECTION;
     caa:	e0 91 91 00 	lds	r30, 0x0091
     cae:	f0 91 92 00 	lds	r31, 0x0092
     cb2:	10 82       	st	Z, r1
	*(DIO_dirs[DIO_PORTB]) = DEFAULT_PORT_DIRECTION;
     cb4:	e0 91 93 00 	lds	r30, 0x0093
     cb8:	f0 91 94 00 	lds	r31, 0x0094
     cbc:	10 82       	st	Z, r1
	*(DIO_dirs[DIO_PORTC]) = DEFAULT_PORT_DIRECTION;
     cbe:	e0 91 95 00 	lds	r30, 0x0095
     cc2:	f0 91 96 00 	lds	r31, 0x0096
     cc6:	10 82       	st	Z, r1
	*(DIO_dirs[DIO_PORTD]) = DEFAULT_PORT_DIRECTION;
     cc8:	e0 91 97 00 	lds	r30, 0x0097
     ccc:	f0 91 98 00 	lds	r31, 0x0098
     cd0:	10 82       	st	Z, r1

	return Init_Status;
     cd2:	89 81       	ldd	r24, Y+1	; 0x01
}
     cd4:	0f 90       	pop	r0
     cd6:	cf 91       	pop	r28
     cd8:	df 91       	pop	r29
     cda:	08 95       	ret

00000cdc <DIO_u8SetPortDirection>:
/*     Description :                                                                                    */
/*     Input       :                                                                                    */
/*     Output      :                                                                                    */
/********************************************************************************************************/

u8 DIO_u8SetPortDirection(u8 Copy_portNumber, u8 Copy_portDirectionMode) {
     cdc:	df 93       	push	r29
     cde:	cf 93       	push	r28
     ce0:	00 d0       	rcall	.+0      	; 0xce2 <DIO_u8SetPortDirection+0x6>
     ce2:	0f 92       	push	r0
     ce4:	cd b7       	in	r28, 0x3d	; 61
     ce6:	de b7       	in	r29, 0x3e	; 62
     ce8:	8a 83       	std	Y+2, r24	; 0x02
     cea:	6b 83       	std	Y+3, r22	; 0x03
	u8 API_Status = EXIT_FAILED;
     cec:	19 82       	std	Y+1, r1	; 0x01
	if (Copy_portNumber >= DIO_PORTA && Copy_portNumber <= DIO_PORTD) {
     cee:	8a 81       	ldd	r24, Y+2	; 0x02
     cf0:	84 30       	cpi	r24, 0x04	; 4
     cf2:	70 f4       	brcc	.+28     	; 0xd10 <DIO_u8SetPortDirection+0x34>
		*(DIO_dirs[Copy_portNumber]) = Copy_portDirectionMode ;
     cf4:	8a 81       	ldd	r24, Y+2	; 0x02
     cf6:	88 2f       	mov	r24, r24
     cf8:	90 e0       	ldi	r25, 0x00	; 0
     cfa:	88 0f       	add	r24, r24
     cfc:	99 1f       	adc	r25, r25
     cfe:	fc 01       	movw	r30, r24
     d00:	ef 56       	subi	r30, 0x6F	; 111
     d02:	ff 4f       	sbci	r31, 0xFF	; 255
     d04:	01 90       	ld	r0, Z+
     d06:	f0 81       	ld	r31, Z
     d08:	e0 2d       	mov	r30, r0
     d0a:	8b 81       	ldd	r24, Y+3	; 0x03
     d0c:	80 83       	st	Z, r24
     d0e:	01 c0       	rjmp	.+2      	; 0xd12 <DIO_u8SetPortDirection+0x36>
	} else {
		API_Status = EXIT_FAILED;
     d10:	19 82       	std	Y+1, r1	; 0x01
	}
	return API_Status;
     d12:	89 81       	ldd	r24, Y+1	; 0x01
}
     d14:	0f 90       	pop	r0
     d16:	0f 90       	pop	r0
     d18:	0f 90       	pop	r0
     d1a:	cf 91       	pop	r28
     d1c:	df 91       	pop	r29
     d1e:	08 95       	ret

00000d20 <DIO_u8SetPortValue>:
/*     Function    :                                                                    */
/*     Description :                                                                    */
/*     Input       :                                                                    */
/*     Output      :                                                                    */
/*****************************************************************************************/
u8 DIO_u8SetPortValue(u8 Copy_portNumber, u8 Copy_portValue) {
     d20:	df 93       	push	r29
     d22:	cf 93       	push	r28
     d24:	00 d0       	rcall	.+0      	; 0xd26 <DIO_u8SetPortValue+0x6>
     d26:	0f 92       	push	r0
     d28:	cd b7       	in	r28, 0x3d	; 61
     d2a:	de b7       	in	r29, 0x3e	; 62
     d2c:	8a 83       	std	Y+2, r24	; 0x02
     d2e:	6b 83       	std	Y+3, r22	; 0x03
	u8 API_Status = EXIT_FAILED;
     d30:	19 82       	std	Y+1, r1	; 0x01
	if (Copy_portNumber >= DIO_PORTA && Copy_portNumber <= DIO_PORTD) {
     d32:	8a 81       	ldd	r24, Y+2	; 0x02
     d34:	84 30       	cpi	r24, 0x04	; 4
     d36:	80 f4       	brcc	.+32     	; 0xd58 <DIO_u8SetPortValue+0x38>
		*(DIO_ports[Copy_portNumber]) = Copy_portValue;
     d38:	8a 81       	ldd	r24, Y+2	; 0x02
     d3a:	88 2f       	mov	r24, r24
     d3c:	90 e0       	ldi	r25, 0x00	; 0
     d3e:	88 0f       	add	r24, r24
     d40:	99 1f       	adc	r25, r25
     d42:	fc 01       	movw	r30, r24
     d44:	ef 55       	subi	r30, 0x5F	; 95
     d46:	ff 4f       	sbci	r31, 0xFF	; 255
     d48:	01 90       	ld	r0, Z+
     d4a:	f0 81       	ld	r31, Z
     d4c:	e0 2d       	mov	r30, r0
     d4e:	8b 81       	ldd	r24, Y+3	; 0x03
     d50:	80 83       	st	Z, r24
		API_Status = EXIT_SUCCEED;
     d52:	81 e0       	ldi	r24, 0x01	; 1
     d54:	89 83       	std	Y+1, r24	; 0x01
     d56:	01 c0       	rjmp	.+2      	; 0xd5a <DIO_u8SetPortValue+0x3a>
	} else {
		API_Status = EXIT_FAILED;
     d58:	19 82       	std	Y+1, r1	; 0x01
	}

	return API_Status;
     d5a:	89 81       	ldd	r24, Y+1	; 0x01
}
     d5c:	0f 90       	pop	r0
     d5e:	0f 90       	pop	r0
     d60:	0f 90       	pop	r0
     d62:	cf 91       	pop	r28
     d64:	df 91       	pop	r29
     d66:	08 95       	ret

00000d68 <DIO_u8GetPortValue>:
/*     Function    :                                                                    */
/*     Description :                                                                    */
/*     Input       :                                                                    */
/*     Output      :                                                                    */
/****************************************************************************************/
u8 DIO_u8GetPortValue(u8 Copy_portNumber, u8 *Copy_PortValue) {
     d68:	df 93       	push	r29
     d6a:	cf 93       	push	r28
     d6c:	00 d0       	rcall	.+0      	; 0xd6e <DIO_u8GetPortValue+0x6>
     d6e:	00 d0       	rcall	.+0      	; 0xd70 <DIO_u8GetPortValue+0x8>
     d70:	cd b7       	in	r28, 0x3d	; 61
     d72:	de b7       	in	r29, 0x3e	; 62
     d74:	8a 83       	std	Y+2, r24	; 0x02
     d76:	7c 83       	std	Y+4, r23	; 0x04
     d78:	6b 83       	std	Y+3, r22	; 0x03
	u8 API_Status = EXIT_FAILED;
     d7a:	19 82       	std	Y+1, r1	; 0x01
	if (Copy_portNumber >= DIO_PORTA && Copy_portNumber <= DIO_PORTD) {
     d7c:	8a 81       	ldd	r24, Y+2	; 0x02
     d7e:	84 30       	cpi	r24, 0x04	; 4
     d80:	90 f4       	brcc	.+36     	; 0xda6 <DIO_u8GetPortValue+0x3e>

		*Copy_PortValue = *(DIO_pins[Copy_portNumber]);
     d82:	8a 81       	ldd	r24, Y+2	; 0x02
     d84:	88 2f       	mov	r24, r24
     d86:	90 e0       	ldi	r25, 0x00	; 0
     d88:	88 0f       	add	r24, r24
     d8a:	99 1f       	adc	r25, r25
     d8c:	fc 01       	movw	r30, r24
     d8e:	e7 56       	subi	r30, 0x67	; 103
     d90:	ff 4f       	sbci	r31, 0xFF	; 255
     d92:	01 90       	ld	r0, Z+
     d94:	f0 81       	ld	r31, Z
     d96:	e0 2d       	mov	r30, r0
     d98:	80 81       	ld	r24, Z
     d9a:	eb 81       	ldd	r30, Y+3	; 0x03
     d9c:	fc 81       	ldd	r31, Y+4	; 0x04
     d9e:	80 83       	st	Z, r24
		API_Status = EXIT_SUCCEED;
     da0:	81 e0       	ldi	r24, 0x01	; 1
     da2:	89 83       	std	Y+1, r24	; 0x01
     da4:	01 c0       	rjmp	.+2      	; 0xda8 <DIO_u8GetPortValue+0x40>
	} else {
		API_Status = EXIT_FAILED;
     da6:	19 82       	std	Y+1, r1	; 0x01
	}
	return API_Status;
     da8:	89 81       	ldd	r24, Y+1	; 0x01
}
     daa:	0f 90       	pop	r0
     dac:	0f 90       	pop	r0
     dae:	0f 90       	pop	r0
     db0:	0f 90       	pop	r0
     db2:	cf 91       	pop	r28
     db4:	df 91       	pop	r29
     db6:	08 95       	ret

00000db8 <DIO_u8GetPortDirection>:
/*     Description :                                                                    */
/*     Input       :                                                                    */
/*     Output      :                                                                    */
/*****************************************************************************************/

u8 DIO_u8GetPortDirection(u8 Copy_portNumber, u8 *Copy_portDirectionValue) {
     db8:	df 93       	push	r29
     dba:	cf 93       	push	r28
     dbc:	00 d0       	rcall	.+0      	; 0xdbe <DIO_u8GetPortDirection+0x6>
     dbe:	00 d0       	rcall	.+0      	; 0xdc0 <DIO_u8GetPortDirection+0x8>
     dc0:	cd b7       	in	r28, 0x3d	; 61
     dc2:	de b7       	in	r29, 0x3e	; 62
     dc4:	8a 83       	std	Y+2, r24	; 0x02
     dc6:	7c 83       	std	Y+4, r23	; 0x04
     dc8:	6b 83       	std	Y+3, r22	; 0x03
	u8 API_Status = EXIT_FAILED;
     dca:	19 82       	std	Y+1, r1	; 0x01
	if (Copy_portNumber >= DIO_PORTA && Copy_portNumber <= DIO_PORTD) {
     dcc:	8a 81       	ldd	r24, Y+2	; 0x02
     dce:	84 30       	cpi	r24, 0x04	; 4
     dd0:	90 f4       	brcc	.+36     	; 0xdf6 <DIO_u8GetPortDirection+0x3e>
		*Copy_portDirectionValue = *(DIO_dirs[Copy_portNumber]);
     dd2:	8a 81       	ldd	r24, Y+2	; 0x02
     dd4:	88 2f       	mov	r24, r24
     dd6:	90 e0       	ldi	r25, 0x00	; 0
     dd8:	88 0f       	add	r24, r24
     dda:	99 1f       	adc	r25, r25
     ddc:	fc 01       	movw	r30, r24
     dde:	ef 56       	subi	r30, 0x6F	; 111
     de0:	ff 4f       	sbci	r31, 0xFF	; 255
     de2:	01 90       	ld	r0, Z+
     de4:	f0 81       	ld	r31, Z
     de6:	e0 2d       	mov	r30, r0
     de8:	80 81       	ld	r24, Z
     dea:	eb 81       	ldd	r30, Y+3	; 0x03
     dec:	fc 81       	ldd	r31, Y+4	; 0x04
     dee:	80 83       	st	Z, r24
		API_Status = EXIT_SUCCEED;
     df0:	81 e0       	ldi	r24, 0x01	; 1
     df2:	89 83       	std	Y+1, r24	; 0x01
     df4:	01 c0       	rjmp	.+2      	; 0xdf8 <DIO_u8GetPortDirection+0x40>
	} else {
		API_Status = EXIT_FAILED;
     df6:	19 82       	std	Y+1, r1	; 0x01
	}
	return API_Status;
     df8:	89 81       	ldd	r24, Y+1	; 0x01
}
     dfa:	0f 90       	pop	r0
     dfc:	0f 90       	pop	r0
     dfe:	0f 90       	pop	r0
     e00:	0f 90       	pop	r0
     e02:	cf 91       	pop	r28
     e04:	df 91       	pop	r29
     e06:	08 95       	ret

00000e08 <DIO_u8SetPinDirection>:
/*     Description :                                                                    */
/*     Input       :                                                                    */
/*     Output      :                                                                    */
/****************************************************************************************/

u8 DIO_u8SetPinDirection(u8 Copy_portNumber, u8 Copy_pinNumber, u8 Copy_pinDirectionMode) {
     e08:	df 93       	push	r29
     e0a:	cf 93       	push	r28
     e0c:	00 d0       	rcall	.+0      	; 0xe0e <DIO_u8SetPinDirection+0x6>
     e0e:	00 d0       	rcall	.+0      	; 0xe10 <DIO_u8SetPinDirection+0x8>
     e10:	00 d0       	rcall	.+0      	; 0xe12 <DIO_u8SetPinDirection+0xa>
     e12:	cd b7       	in	r28, 0x3d	; 61
     e14:	de b7       	in	r29, 0x3e	; 62
     e16:	8a 83       	std	Y+2, r24	; 0x02
     e18:	6b 83       	std	Y+3, r22	; 0x03
     e1a:	4c 83       	std	Y+4, r20	; 0x04
	u8 API_Status = EXIT_FAILED;
     e1c:	19 82       	std	Y+1, r1	; 0x01
	if (Copy_portNumber >= DIO_PORTA && Copy_portNumber <= DIO_PORTD) {
     e1e:	8a 81       	ldd	r24, Y+2	; 0x02
     e20:	84 30       	cpi	r24, 0x04	; 4
     e22:	08 f0       	brcs	.+2      	; 0xe26 <DIO_u8SetPinDirection+0x1e>
     e24:	66 c0       	rjmp	.+204    	; 0xef2 <DIO_u8SetPinDirection+0xea>
		if (Copy_pinNumber >= PIN0 && Copy_pinNumber <= PIN7) {
     e26:	8b 81       	ldd	r24, Y+3	; 0x03
     e28:	88 30       	cpi	r24, 0x08	; 8
     e2a:	08 f0       	brcs	.+2      	; 0xe2e <DIO_u8SetPinDirection+0x26>
     e2c:	60 c0       	rjmp	.+192    	; 0xeee <DIO_u8SetPinDirection+0xe6>
			switch (Copy_pinDirectionMode) {
     e2e:	8c 81       	ldd	r24, Y+4	; 0x04
     e30:	28 2f       	mov	r18, r24
     e32:	30 e0       	ldi	r19, 0x00	; 0
     e34:	3e 83       	std	Y+6, r19	; 0x06
     e36:	2d 83       	std	Y+5, r18	; 0x05
     e38:	8d 81       	ldd	r24, Y+5	; 0x05
     e3a:	9e 81       	ldd	r25, Y+6	; 0x06
     e3c:	00 97       	sbiw	r24, 0x00	; 0
     e3e:	71 f1       	breq	.+92     	; 0xe9c <DIO_u8SetPinDirection+0x94>
     e40:	2d 81       	ldd	r18, Y+5	; 0x05
     e42:	3e 81       	ldd	r19, Y+6	; 0x06
     e44:	21 30       	cpi	r18, 0x01	; 1
     e46:	31 05       	cpc	r19, r1
     e48:	09 f0       	breq	.+2      	; 0xe4c <DIO_u8SetPinDirection+0x44>
     e4a:	4f c0       	rjmp	.+158    	; 0xeea <DIO_u8SetPinDirection+0xe2>
			case DIO_PIN_OUTPUT:
				CLEAR_BIT((*(DIO_dirs[Copy_portNumber])), Copy_pinNumber);
     e4c:	8a 81       	ldd	r24, Y+2	; 0x02
     e4e:	88 2f       	mov	r24, r24
     e50:	90 e0       	ldi	r25, 0x00	; 0
     e52:	88 0f       	add	r24, r24
     e54:	99 1f       	adc	r25, r25
     e56:	fc 01       	movw	r30, r24
     e58:	ef 56       	subi	r30, 0x6F	; 111
     e5a:	ff 4f       	sbci	r31, 0xFF	; 255
     e5c:	a0 81       	ld	r26, Z
     e5e:	b1 81       	ldd	r27, Z+1	; 0x01
     e60:	8a 81       	ldd	r24, Y+2	; 0x02
     e62:	88 2f       	mov	r24, r24
     e64:	90 e0       	ldi	r25, 0x00	; 0
     e66:	88 0f       	add	r24, r24
     e68:	99 1f       	adc	r25, r25
     e6a:	fc 01       	movw	r30, r24
     e6c:	ef 56       	subi	r30, 0x6F	; 111
     e6e:	ff 4f       	sbci	r31, 0xFF	; 255
     e70:	01 90       	ld	r0, Z+
     e72:	f0 81       	ld	r31, Z
     e74:	e0 2d       	mov	r30, r0
     e76:	80 81       	ld	r24, Z
     e78:	48 2f       	mov	r20, r24
     e7a:	8b 81       	ldd	r24, Y+3	; 0x03
     e7c:	28 2f       	mov	r18, r24
     e7e:	30 e0       	ldi	r19, 0x00	; 0
     e80:	81 e0       	ldi	r24, 0x01	; 1
     e82:	90 e0       	ldi	r25, 0x00	; 0
     e84:	02 2e       	mov	r0, r18
     e86:	02 c0       	rjmp	.+4      	; 0xe8c <DIO_u8SetPinDirection+0x84>
     e88:	88 0f       	add	r24, r24
     e8a:	99 1f       	adc	r25, r25
     e8c:	0a 94       	dec	r0
     e8e:	e2 f7       	brpl	.-8      	; 0xe88 <DIO_u8SetPinDirection+0x80>
     e90:	80 95       	com	r24
     e92:	84 23       	and	r24, r20
     e94:	8c 93       	st	X, r24
				API_Status = EXIT_SUCCEED;
     e96:	81 e0       	ldi	r24, 0x01	; 1
     e98:	89 83       	std	Y+1, r24	; 0x01
     e9a:	2c c0       	rjmp	.+88     	; 0xef4 <DIO_u8SetPinDirection+0xec>
				break;
			case DIO_PIN_INPUT:
				SET_BIT((*(DIO_dirs[Copy_portNumber])), Copy_pinNumber);
     e9c:	8a 81       	ldd	r24, Y+2	; 0x02
     e9e:	88 2f       	mov	r24, r24
     ea0:	90 e0       	ldi	r25, 0x00	; 0
     ea2:	88 0f       	add	r24, r24
     ea4:	99 1f       	adc	r25, r25
     ea6:	fc 01       	movw	r30, r24
     ea8:	ef 56       	subi	r30, 0x6F	; 111
     eaa:	ff 4f       	sbci	r31, 0xFF	; 255
     eac:	a0 81       	ld	r26, Z
     eae:	b1 81       	ldd	r27, Z+1	; 0x01
     eb0:	8a 81       	ldd	r24, Y+2	; 0x02
     eb2:	88 2f       	mov	r24, r24
     eb4:	90 e0       	ldi	r25, 0x00	; 0
     eb6:	88 0f       	add	r24, r24
     eb8:	99 1f       	adc	r25, r25
     eba:	fc 01       	movw	r30, r24
     ebc:	ef 56       	subi	r30, 0x6F	; 111
     ebe:	ff 4f       	sbci	r31, 0xFF	; 255
     ec0:	01 90       	ld	r0, Z+
     ec2:	f0 81       	ld	r31, Z
     ec4:	e0 2d       	mov	r30, r0
     ec6:	80 81       	ld	r24, Z
     ec8:	48 2f       	mov	r20, r24
     eca:	8b 81       	ldd	r24, Y+3	; 0x03
     ecc:	28 2f       	mov	r18, r24
     ece:	30 e0       	ldi	r19, 0x00	; 0
     ed0:	81 e0       	ldi	r24, 0x01	; 1
     ed2:	90 e0       	ldi	r25, 0x00	; 0
     ed4:	02 2e       	mov	r0, r18
     ed6:	02 c0       	rjmp	.+4      	; 0xedc <DIO_u8SetPinDirection+0xd4>
     ed8:	88 0f       	add	r24, r24
     eda:	99 1f       	adc	r25, r25
     edc:	0a 94       	dec	r0
     ede:	e2 f7       	brpl	.-8      	; 0xed8 <DIO_u8SetPinDirection+0xd0>
     ee0:	84 2b       	or	r24, r20
     ee2:	8c 93       	st	X, r24
				API_Status = EXIT_SUCCEED;
     ee4:	81 e0       	ldi	r24, 0x01	; 1
     ee6:	89 83       	std	Y+1, r24	; 0x01
     ee8:	05 c0       	rjmp	.+10     	; 0xef4 <DIO_u8SetPinDirection+0xec>
				break;
			default:
				API_Status = EXIT_FAILED;
     eea:	19 82       	std	Y+1, r1	; 0x01
     eec:	03 c0       	rjmp	.+6      	; 0xef4 <DIO_u8SetPinDirection+0xec>
				break;
			}

		} else {
			API_Status = EXIT_FAILED;
     eee:	19 82       	std	Y+1, r1	; 0x01
     ef0:	01 c0       	rjmp	.+2      	; 0xef4 <DIO_u8SetPinDirection+0xec>
		}
	} else {
		API_Status = EXIT_FAILED;
     ef2:	19 82       	std	Y+1, r1	; 0x01
	}

	return API_Status;
     ef4:	89 81       	ldd	r24, Y+1	; 0x01
}
     ef6:	26 96       	adiw	r28, 0x06	; 6
     ef8:	0f b6       	in	r0, 0x3f	; 63
     efa:	f8 94       	cli
     efc:	de bf       	out	0x3e, r29	; 62
     efe:	0f be       	out	0x3f, r0	; 63
     f00:	cd bf       	out	0x3d, r28	; 61
     f02:	cf 91       	pop	r28
     f04:	df 91       	pop	r29
     f06:	08 95       	ret

00000f08 <DIO_u8SetPinValue>:
/*     Description :                                                                    */
/*     Input       :                                                                    */
/*     Output      :                                                                    */
/****************************************************************************************/

u8 DIO_u8SetPinValue(u8 Copy_portNumber, u8 Copy_pinNumber, u8 Copy_pinValue) {
     f08:	df 93       	push	r29
     f0a:	cf 93       	push	r28
     f0c:	00 d0       	rcall	.+0      	; 0xf0e <DIO_u8SetPinValue+0x6>
     f0e:	00 d0       	rcall	.+0      	; 0xf10 <DIO_u8SetPinValue+0x8>
     f10:	00 d0       	rcall	.+0      	; 0xf12 <DIO_u8SetPinValue+0xa>
     f12:	cd b7       	in	r28, 0x3d	; 61
     f14:	de b7       	in	r29, 0x3e	; 62
     f16:	8a 83       	std	Y+2, r24	; 0x02
     f18:	6b 83       	std	Y+3, r22	; 0x03
     f1a:	4c 83       	std	Y+4, r20	; 0x04
	u8 API_Status = EXIT_FAILED;
     f1c:	19 82       	std	Y+1, r1	; 0x01
	if (Copy_portNumber >= DIO_PORTA && Copy_portNumber <= DIO_PORTD) {
     f1e:	8a 81       	ldd	r24, Y+2	; 0x02
     f20:	84 30       	cpi	r24, 0x04	; 4
     f22:	08 f0       	brcs	.+2      	; 0xf26 <DIO_u8SetPinValue+0x1e>
     f24:	66 c0       	rjmp	.+204    	; 0xff2 <DIO_u8SetPinValue+0xea>
		if (Copy_pinNumber >= PIN0 && Copy_pinNumber <= PIN7) {
     f26:	8b 81       	ldd	r24, Y+3	; 0x03
     f28:	88 30       	cpi	r24, 0x08	; 8
     f2a:	08 f0       	brcs	.+2      	; 0xf2e <DIO_u8SetPinValue+0x26>
     f2c:	60 c0       	rjmp	.+192    	; 0xfee <DIO_u8SetPinValue+0xe6>
			switch (Copy_pinValue) {
     f2e:	8c 81       	ldd	r24, Y+4	; 0x04
     f30:	28 2f       	mov	r18, r24
     f32:	30 e0       	ldi	r19, 0x00	; 0
     f34:	3e 83       	std	Y+6, r19	; 0x06
     f36:	2d 83       	std	Y+5, r18	; 0x05
     f38:	8d 81       	ldd	r24, Y+5	; 0x05
     f3a:	9e 81       	ldd	r25, Y+6	; 0x06
     f3c:	00 97       	sbiw	r24, 0x00	; 0
     f3e:	31 f0       	breq	.+12     	; 0xf4c <DIO_u8SetPinValue+0x44>
     f40:	2d 81       	ldd	r18, Y+5	; 0x05
     f42:	3e 81       	ldd	r19, Y+6	; 0x06
     f44:	21 30       	cpi	r18, 0x01	; 1
     f46:	31 05       	cpc	r19, r1
     f48:	49 f1       	breq	.+82     	; 0xf9c <DIO_u8SetPinValue+0x94>
     f4a:	4f c0       	rjmp	.+158    	; 0xfea <DIO_u8SetPinValue+0xe2>
			case DIO_PIN_LOW:
				CLEAR_BIT((*(DIO_ports[Copy_portNumber])), Copy_pinNumber);
     f4c:	8a 81       	ldd	r24, Y+2	; 0x02
     f4e:	88 2f       	mov	r24, r24
     f50:	90 e0       	ldi	r25, 0x00	; 0
     f52:	88 0f       	add	r24, r24
     f54:	99 1f       	adc	r25, r25
     f56:	fc 01       	movw	r30, r24
     f58:	ef 55       	subi	r30, 0x5F	; 95
     f5a:	ff 4f       	sbci	r31, 0xFF	; 255
     f5c:	a0 81       	ld	r26, Z
     f5e:	b1 81       	ldd	r27, Z+1	; 0x01
     f60:	8a 81       	ldd	r24, Y+2	; 0x02
     f62:	88 2f       	mov	r24, r24
     f64:	90 e0       	ldi	r25, 0x00	; 0
     f66:	88 0f       	add	r24, r24
     f68:	99 1f       	adc	r25, r25
     f6a:	fc 01       	movw	r30, r24
     f6c:	ef 55       	subi	r30, 0x5F	; 95
     f6e:	ff 4f       	sbci	r31, 0xFF	; 255
     f70:	01 90       	ld	r0, Z+
     f72:	f0 81       	ld	r31, Z
     f74:	e0 2d       	mov	r30, r0
     f76:	80 81       	ld	r24, Z
     f78:	48 2f       	mov	r20, r24
     f7a:	8b 81       	ldd	r24, Y+3	; 0x03
     f7c:	28 2f       	mov	r18, r24
     f7e:	30 e0       	ldi	r19, 0x00	; 0
     f80:	81 e0       	ldi	r24, 0x01	; 1
     f82:	90 e0       	ldi	r25, 0x00	; 0
     f84:	02 2e       	mov	r0, r18
     f86:	02 c0       	rjmp	.+4      	; 0xf8c <DIO_u8SetPinValue+0x84>
     f88:	88 0f       	add	r24, r24
     f8a:	99 1f       	adc	r25, r25
     f8c:	0a 94       	dec	r0
     f8e:	e2 f7       	brpl	.-8      	; 0xf88 <DIO_u8SetPinValue+0x80>
     f90:	80 95       	com	r24
     f92:	84 23       	and	r24, r20
     f94:	8c 93       	st	X, r24
				API_Status = EXIT_SUCCEED;
     f96:	81 e0       	ldi	r24, 0x01	; 1
     f98:	89 83       	std	Y+1, r24	; 0x01
     f9a:	2c c0       	rjmp	.+88     	; 0xff4 <DIO_u8SetPinValue+0xec>
				break;
			case DIO_PIN_HIGH:
				SET_BIT((*(DIO_ports[Copy_portNumber])), Copy_pinNumber);
     f9c:	8a 81       	ldd	r24, Y+2	; 0x02
     f9e:	88 2f       	mov	r24, r24
     fa0:	90 e0       	ldi	r25, 0x00	; 0
     fa2:	88 0f       	add	r24, r24
     fa4:	99 1f       	adc	r25, r25
     fa6:	fc 01       	movw	r30, r24
     fa8:	ef 55       	subi	r30, 0x5F	; 95
     faa:	ff 4f       	sbci	r31, 0xFF	; 255
     fac:	a0 81       	ld	r26, Z
     fae:	b1 81       	ldd	r27, Z+1	; 0x01
     fb0:	8a 81       	ldd	r24, Y+2	; 0x02
     fb2:	88 2f       	mov	r24, r24
     fb4:	90 e0       	ldi	r25, 0x00	; 0
     fb6:	88 0f       	add	r24, r24
     fb8:	99 1f       	adc	r25, r25
     fba:	fc 01       	movw	r30, r24
     fbc:	ef 55       	subi	r30, 0x5F	; 95
     fbe:	ff 4f       	sbci	r31, 0xFF	; 255
     fc0:	01 90       	ld	r0, Z+
     fc2:	f0 81       	ld	r31, Z
     fc4:	e0 2d       	mov	r30, r0
     fc6:	80 81       	ld	r24, Z
     fc8:	48 2f       	mov	r20, r24
     fca:	8b 81       	ldd	r24, Y+3	; 0x03
     fcc:	28 2f       	mov	r18, r24
     fce:	30 e0       	ldi	r19, 0x00	; 0
     fd0:	81 e0       	ldi	r24, 0x01	; 1
     fd2:	90 e0       	ldi	r25, 0x00	; 0
     fd4:	02 2e       	mov	r0, r18
     fd6:	02 c0       	rjmp	.+4      	; 0xfdc <DIO_u8SetPinValue+0xd4>
     fd8:	88 0f       	add	r24, r24
     fda:	99 1f       	adc	r25, r25
     fdc:	0a 94       	dec	r0
     fde:	e2 f7       	brpl	.-8      	; 0xfd8 <DIO_u8SetPinValue+0xd0>
     fe0:	84 2b       	or	r24, r20
     fe2:	8c 93       	st	X, r24
				API_Status = EXIT_SUCCEED;
     fe4:	81 e0       	ldi	r24, 0x01	; 1
     fe6:	89 83       	std	Y+1, r24	; 0x01
     fe8:	05 c0       	rjmp	.+10     	; 0xff4 <DIO_u8SetPinValue+0xec>
				break;
			default: API_Status = EXIT_FAILED ;
     fea:	19 82       	std	Y+1, r1	; 0x01
     fec:	03 c0       	rjmp	.+6      	; 0xff4 <DIO_u8SetPinValue+0xec>
				break;
			}

		} else {
			API_Status = EXIT_FAILED;
     fee:	19 82       	std	Y+1, r1	; 0x01
     ff0:	01 c0       	rjmp	.+2      	; 0xff4 <DIO_u8SetPinValue+0xec>
		}
	} else {
		API_Status = EXIT_FAILED;
     ff2:	19 82       	std	Y+1, r1	; 0x01
	}

	return API_Status;
     ff4:	89 81       	ldd	r24, Y+1	; 0x01
}
     ff6:	26 96       	adiw	r28, 0x06	; 6
     ff8:	0f b6       	in	r0, 0x3f	; 63
     ffa:	f8 94       	cli
     ffc:	de bf       	out	0x3e, r29	; 62
     ffe:	0f be       	out	0x3f, r0	; 63
    1000:	cd bf       	out	0x3d, r28	; 61
    1002:	cf 91       	pop	r28
    1004:	df 91       	pop	r29
    1006:	08 95       	ret

00001008 <DIO_u8GetPinValue>:
/*     Input       :                                                                    */
/*     Output      :                                                                    */
/****************************************************************************************/

u8 DIO_u8GetPinValue(u8 Copy_portNumber, u8 Copy_pinNumber)
{
    1008:	df 93       	push	r29
    100a:	cf 93       	push	r28
    100c:	00 d0       	rcall	.+0      	; 0x100e <DIO_u8GetPinValue+0x6>
    100e:	0f 92       	push	r0
    1010:	cd b7       	in	r28, 0x3d	; 61
    1012:	de b7       	in	r29, 0x3e	; 62
    1014:	8a 83       	std	Y+2, r24	; 0x02
    1016:	6b 83       	std	Y+3, r22	; 0x03
	u8 LocalBitValue = 0xFF ;
    1018:	8f ef       	ldi	r24, 0xFF	; 255
    101a:	89 83       	std	Y+1, r24	; 0x01
	if (Copy_portNumber >= DIO_PORTA && Copy_portNumber <= DIO_PORTD){
    101c:	8a 81       	ldd	r24, Y+2	; 0x02
    101e:	84 30       	cpi	r24, 0x04	; 4
    1020:	e8 f4       	brcc	.+58     	; 0x105c <DIO_u8GetPinValue+0x54>
		if (Copy_pinNumber >= PIN0 && Copy_pinNumber <= PIN7) {
    1022:	8b 81       	ldd	r24, Y+3	; 0x03
    1024:	88 30       	cpi	r24, 0x08	; 8
    1026:	d0 f4       	brcc	.+52     	; 0x105c <DIO_u8GetPinValue+0x54>
           LocalBitValue = GET_BIT(*DIO_pins[Copy_portNumber],Copy_pinNumber) ;
    1028:	8a 81       	ldd	r24, Y+2	; 0x02
    102a:	88 2f       	mov	r24, r24
    102c:	90 e0       	ldi	r25, 0x00	; 0
    102e:	88 0f       	add	r24, r24
    1030:	99 1f       	adc	r25, r25
    1032:	fc 01       	movw	r30, r24
    1034:	e7 56       	subi	r30, 0x67	; 103
    1036:	ff 4f       	sbci	r31, 0xFF	; 255
    1038:	01 90       	ld	r0, Z+
    103a:	f0 81       	ld	r31, Z
    103c:	e0 2d       	mov	r30, r0
    103e:	80 81       	ld	r24, Z
    1040:	28 2f       	mov	r18, r24
    1042:	30 e0       	ldi	r19, 0x00	; 0
    1044:	8b 81       	ldd	r24, Y+3	; 0x03
    1046:	88 2f       	mov	r24, r24
    1048:	90 e0       	ldi	r25, 0x00	; 0
    104a:	a9 01       	movw	r20, r18
    104c:	02 c0       	rjmp	.+4      	; 0x1052 <DIO_u8GetPinValue+0x4a>
    104e:	55 95       	asr	r21
    1050:	47 95       	ror	r20
    1052:	8a 95       	dec	r24
    1054:	e2 f7       	brpl	.-8      	; 0x104e <DIO_u8GetPinValue+0x46>
    1056:	ca 01       	movw	r24, r20
    1058:	81 70       	andi	r24, 0x01	; 1
    105a:	89 83       	std	Y+1, r24	; 0x01

	}
} else {

}
	return LocalBitValue ;
    105c:	89 81       	ldd	r24, Y+1	; 0x01
}
    105e:	0f 90       	pop	r0
    1060:	0f 90       	pop	r0
    1062:	0f 90       	pop	r0
    1064:	cf 91       	pop	r28
    1066:	df 91       	pop	r29
    1068:	08 95       	ret

0000106a <DIO_u8GetPinDirection>:
/*     Description :                                                                    */
/*     Input       :                                                                    */
/*     Output      :                                                                    */
/****************************************************************************************/
 u8 DIO_u8GetPinDirection(u8 Copy_portNumber , u8 Copy_pinNumber , u8 *Copy_pinDirectionValue)
 {
    106a:	df 93       	push	r29
    106c:	cf 93       	push	r28
    106e:	00 d0       	rcall	.+0      	; 0x1070 <DIO_u8GetPinDirection+0x6>
    1070:	00 d0       	rcall	.+0      	; 0x1072 <DIO_u8GetPinDirection+0x8>
    1072:	0f 92       	push	r0
    1074:	cd b7       	in	r28, 0x3d	; 61
    1076:	de b7       	in	r29, 0x3e	; 62
    1078:	8a 83       	std	Y+2, r24	; 0x02
    107a:	6b 83       	std	Y+3, r22	; 0x03
    107c:	5d 83       	std	Y+5, r21	; 0x05
    107e:	4c 83       	std	Y+4, r20	; 0x04
	   u8 API_Status = EXIT_FAILED ;
    1080:	19 82       	std	Y+1, r1	; 0x01
	   if (Copy_portNumber >= DIO_PORTA && Copy_portNumber <= DIO_PORTD){
    1082:	8a 81       	ldd	r24, Y+2	; 0x02
    1084:	84 30       	cpi	r24, 0x04	; 4
    1086:	08 f5       	brcc	.+66     	; 0x10ca <DIO_u8GetPinDirection+0x60>
	   		if (Copy_pinNumber >= PIN0 && Copy_pinNumber <= PIN7){
    1088:	8b 81       	ldd	r24, Y+3	; 0x03
    108a:	88 30       	cpi	r24, 0x08	; 8
    108c:	f0 f4       	brcc	.+60     	; 0x10ca <DIO_u8GetPinDirection+0x60>
	   			*Copy_pinDirectionValue = GET_BIT((*(DIO_dirs[Copy_portNumber])),Copy_pinNumber) ;
    108e:	8a 81       	ldd	r24, Y+2	; 0x02
    1090:	88 2f       	mov	r24, r24
    1092:	90 e0       	ldi	r25, 0x00	; 0
    1094:	88 0f       	add	r24, r24
    1096:	99 1f       	adc	r25, r25
    1098:	fc 01       	movw	r30, r24
    109a:	ef 56       	subi	r30, 0x6F	; 111
    109c:	ff 4f       	sbci	r31, 0xFF	; 255
    109e:	01 90       	ld	r0, Z+
    10a0:	f0 81       	ld	r31, Z
    10a2:	e0 2d       	mov	r30, r0
    10a4:	80 81       	ld	r24, Z
    10a6:	28 2f       	mov	r18, r24
    10a8:	30 e0       	ldi	r19, 0x00	; 0
    10aa:	8b 81       	ldd	r24, Y+3	; 0x03
    10ac:	88 2f       	mov	r24, r24
    10ae:	90 e0       	ldi	r25, 0x00	; 0
    10b0:	a9 01       	movw	r20, r18
    10b2:	02 c0       	rjmp	.+4      	; 0x10b8 <DIO_u8GetPinDirection+0x4e>
    10b4:	55 95       	asr	r21
    10b6:	47 95       	ror	r20
    10b8:	8a 95       	dec	r24
    10ba:	e2 f7       	brpl	.-8      	; 0x10b4 <DIO_u8GetPinDirection+0x4a>
    10bc:	ca 01       	movw	r24, r20
    10be:	81 70       	andi	r24, 0x01	; 1
    10c0:	ec 81       	ldd	r30, Y+4	; 0x04
    10c2:	fd 81       	ldd	r31, Y+5	; 0x05
    10c4:	80 83       	st	Z, r24
	   			API_Status = EXIT_SUCCEED ;
    10c6:	81 e0       	ldi	r24, 0x01	; 1
    10c8:	89 83       	std	Y+1, r24	; 0x01
	   		}
	   }
		return API_Status ;
    10ca:	89 81       	ldd	r24, Y+1	; 0x01
 }
    10cc:	0f 90       	pop	r0
    10ce:	0f 90       	pop	r0
    10d0:	0f 90       	pop	r0
    10d2:	0f 90       	pop	r0
    10d4:	0f 90       	pop	r0
    10d6:	cf 91       	pop	r28
    10d8:	df 91       	pop	r29
    10da:	08 95       	ret

000010dc <DIO_u8TogglePinValue>:
 /*     Description :                                                                    */
 /*     Input       :                                                                    */
 /*     Output      :                                                                    */
 /****************************************************************************************/

 extern u8 DIO_u8TogglePinValue(u8 Copy_portNumber, u8 Copy_pinNumber) {
    10dc:	df 93       	push	r29
    10de:	cf 93       	push	r28
    10e0:	00 d0       	rcall	.+0      	; 0x10e2 <DIO_u8TogglePinValue+0x6>
    10e2:	0f 92       	push	r0
    10e4:	cd b7       	in	r28, 0x3d	; 61
    10e6:	de b7       	in	r29, 0x3e	; 62
    10e8:	8a 83       	std	Y+2, r24	; 0x02
    10ea:	6b 83       	std	Y+3, r22	; 0x03
	u8 API_Status = EXIT_FAILED  ;
    10ec:	19 82       	std	Y+1, r1	; 0x01
	if (Copy_portNumber >= DIO_PORTA && Copy_portNumber <= DIO_PORTD){
    10ee:	8a 81       	ldd	r24, Y+2	; 0x02
    10f0:	84 30       	cpi	r24, 0x04	; 4
    10f2:	60 f5       	brcc	.+88     	; 0x114c <DIO_u8TogglePinValue+0x70>
		   		if (Copy_pinNumber >= PIN0 && Copy_pinNumber <= PIN7){
    10f4:	8b 81       	ldd	r24, Y+3	; 0x03
    10f6:	88 30       	cpi	r24, 0x08	; 8
    10f8:	38 f5       	brcc	.+78     	; 0x1148 <DIO_u8TogglePinValue+0x6c>
		   			TOGGLE_BIT((*DIO_ports[Copy_pinNumber]),Copy_pinNumber) ;
    10fa:	8b 81       	ldd	r24, Y+3	; 0x03
    10fc:	88 2f       	mov	r24, r24
    10fe:	90 e0       	ldi	r25, 0x00	; 0
    1100:	88 0f       	add	r24, r24
    1102:	99 1f       	adc	r25, r25
    1104:	fc 01       	movw	r30, r24
    1106:	ef 55       	subi	r30, 0x5F	; 95
    1108:	ff 4f       	sbci	r31, 0xFF	; 255
    110a:	a0 81       	ld	r26, Z
    110c:	b1 81       	ldd	r27, Z+1	; 0x01
    110e:	8b 81       	ldd	r24, Y+3	; 0x03
    1110:	88 2f       	mov	r24, r24
    1112:	90 e0       	ldi	r25, 0x00	; 0
    1114:	88 0f       	add	r24, r24
    1116:	99 1f       	adc	r25, r25
    1118:	fc 01       	movw	r30, r24
    111a:	ef 55       	subi	r30, 0x5F	; 95
    111c:	ff 4f       	sbci	r31, 0xFF	; 255
    111e:	01 90       	ld	r0, Z+
    1120:	f0 81       	ld	r31, Z
    1122:	e0 2d       	mov	r30, r0
    1124:	80 81       	ld	r24, Z
    1126:	48 2f       	mov	r20, r24
    1128:	8b 81       	ldd	r24, Y+3	; 0x03
    112a:	28 2f       	mov	r18, r24
    112c:	30 e0       	ldi	r19, 0x00	; 0
    112e:	81 e0       	ldi	r24, 0x01	; 1
    1130:	90 e0       	ldi	r25, 0x00	; 0
    1132:	02 2e       	mov	r0, r18
    1134:	02 c0       	rjmp	.+4      	; 0x113a <DIO_u8TogglePinValue+0x5e>
    1136:	88 0f       	add	r24, r24
    1138:	99 1f       	adc	r25, r25
    113a:	0a 94       	dec	r0
    113c:	e2 f7       	brpl	.-8      	; 0x1136 <DIO_u8TogglePinValue+0x5a>
    113e:	84 27       	eor	r24, r20
    1140:	8c 93       	st	X, r24
		   			API_Status = EXIT_SUCCEED ;
    1142:	81 e0       	ldi	r24, 0x01	; 1
    1144:	89 83       	std	Y+1, r24	; 0x01
    1146:	03 c0       	rjmp	.+6      	; 0x114e <DIO_u8TogglePinValue+0x72>
		   		}else {
					 API_Status = EXIT_FAILED ;
    1148:	19 82       	std	Y+1, r1	; 0x01
    114a:	01 c0       	rjmp	.+2      	; 0x114e <DIO_u8TogglePinValue+0x72>
				}
	}else {
		API_Status = EXIT_FAILED ;
    114c:	19 82       	std	Y+1, r1	; 0x01
	}
	 return API_Status ;
    114e:	89 81       	ldd	r24, Y+1	; 0x01

 }
    1150:	0f 90       	pop	r0
    1152:	0f 90       	pop	r0
    1154:	0f 90       	pop	r0
    1156:	cf 91       	pop	r28
    1158:	df 91       	pop	r29
    115a:	08 95       	ret

0000115c <LCD_u8Init>:
 * Input:  Nothing
 * Output: Nothing
 **************************************************************************************************************/
static LCD_Config_t Config_Struct;

u8 LCD_u8Init(LCD_Config_t *Copy_ConfigPtr) {
    115c:	df 93       	push	r29
    115e:	cf 93       	push	r28
    1160:	cd b7       	in	r28, 0x3d	; 61
    1162:	de b7       	in	r29, 0x3e	; 62
    1164:	a1 97       	sbiw	r28, 0x21	; 33
    1166:	0f b6       	in	r0, 0x3f	; 63
    1168:	f8 94       	cli
    116a:	de bf       	out	0x3e, r29	; 62
    116c:	0f be       	out	0x3f, r0	; 63
    116e:	cd bf       	out	0x3d, r28	; 61
    1170:	9f 8f       	std	Y+31, r25	; 0x1f
    1172:	8e 8f       	std	Y+30, r24	; 0x1e
	u8 API_Status = EXIT_FAILED;
    1174:	1d 8e       	std	Y+29, r1	; 0x1d
	Config_Struct.LCD_Control_port_Reg = Copy_ConfigPtr->LCD_Control_port_Reg;
    1176:	ee 8d       	ldd	r30, Y+30	; 0x1e
    1178:	ff 8d       	ldd	r31, Y+31	; 0x1f
    117a:	81 81       	ldd	r24, Z+1	; 0x01
    117c:	80 93 ab 00 	sts	0x00AB, r24
	Config_Struct.LCD_Data_Port_Reg = Copy_ConfigPtr->LCD_Data_Port_Reg;
    1180:	ee 8d       	ldd	r30, Y+30	; 0x1e
    1182:	ff 8d       	ldd	r31, Y+31	; 0x1f
    1184:	80 81       	ld	r24, Z
    1186:	80 93 aa 00 	sts	0x00AA, r24
	Config_Struct.LCD_Mode = Copy_ConfigPtr->LCD_Mode;
    118a:	ee 8d       	ldd	r30, Y+30	; 0x1e
    118c:	ff 8d       	ldd	r31, Y+31	; 0x1f
    118e:	85 81       	ldd	r24, Z+5	; 0x05
    1190:	80 93 af 00 	sts	0x00AF, r24
	Config_Struct.LCD_RS = Copy_ConfigPtr->LCD_RS;
    1194:	ee 8d       	ldd	r30, Y+30	; 0x1e
    1196:	ff 8d       	ldd	r31, Y+31	; 0x1f
    1198:	82 81       	ldd	r24, Z+2	; 0x02
    119a:	80 93 ac 00 	sts	0x00AC, r24
	Config_Struct.LCD_RW = Copy_ConfigPtr->LCD_RW;
    119e:	ee 8d       	ldd	r30, Y+30	; 0x1e
    11a0:	ff 8d       	ldd	r31, Y+31	; 0x1f
    11a2:	83 81       	ldd	r24, Z+3	; 0x03
    11a4:	80 93 ad 00 	sts	0x00AD, r24
	Config_Struct.LCD_E = Copy_ConfigPtr->LCD_E;
    11a8:	ee 8d       	ldd	r30, Y+30	; 0x1e
    11aa:	ff 8d       	ldd	r31, Y+31	; 0x1f
    11ac:	84 81       	ldd	r24, Z+4	; 0x04
    11ae:	80 93 ae 00 	sts	0x00AE, r24
	/* Make Control and Data ports Output */
	DIO_u8SetPortDirection(Config_Struct.LCD_Data_Port_Reg, DIO_PORT_OUTPUT);
    11b2:	80 91 aa 00 	lds	r24, 0x00AA
    11b6:	6f ef       	ldi	r22, 0xFF	; 255
    11b8:	0e 94 6e 06 	call	0xcdc	; 0xcdc <DIO_u8SetPortDirection>
	DIO_u8SetPortDirection(Config_Struct.LCD_Control_port_Reg,
    11bc:	80 91 ab 00 	lds	r24, 0x00AB
    11c0:	6f ef       	ldi	r22, 0xFF	; 255
    11c2:	0e 94 6e 06 	call	0xcdc	; 0xcdc <DIO_u8SetPortDirection>
//  /* Use the default port values */
//	DIO_u8SetPortValue(Config_Struct.LCD_Control_port_Reg , DIO_DEFAULT_PORT_VALUE) ;
//	DIO_u8SetPortValue(Config_Struct.LCD_Data_Port_Reg , DIO_DEFAULT_PORT_VALUE) ;


	switch (Config_Struct.LCD_Mode) {
    11c6:	80 91 af 00 	lds	r24, 0x00AF
    11ca:	28 2f       	mov	r18, r24
    11cc:	30 e0       	ldi	r19, 0x00	; 0
    11ce:	39 a3       	std	Y+33, r19	; 0x21
    11d0:	28 a3       	std	Y+32, r18	; 0x20
    11d2:	88 a1       	ldd	r24, Y+32	; 0x20
    11d4:	99 a1       	ldd	r25, Y+33	; 0x21
    11d6:	84 30       	cpi	r24, 0x04	; 4
    11d8:	91 05       	cpc	r25, r1
    11da:	39 f0       	breq	.+14     	; 0x11ea <LCD_u8Init+0x8e>
    11dc:	28 a1       	ldd	r18, Y+32	; 0x20
    11de:	39 a1       	ldd	r19, Y+33	; 0x21
    11e0:	28 30       	cpi	r18, 0x08	; 8
    11e2:	31 05       	cpc	r19, r1
    11e4:	09 f4       	brne	.+2      	; 0x11e8 <LCD_u8Init+0x8c>
    11e6:	82 c0       	rjmp	.+260    	; 0x12ec <LCD_u8Init+0x190>
    11e8:	02 c1       	rjmp	.+516    	; 0x13ee <LCD_u8Init+0x292>
    11ea:	80 e0       	ldi	r24, 0x00	; 0
    11ec:	90 e0       	ldi	r25, 0x00	; 0
    11ee:	a8 e4       	ldi	r26, 0x48	; 72
    11f0:	b2 e4       	ldi	r27, 0x42	; 66
    11f2:	89 8f       	std	Y+25, r24	; 0x19
    11f4:	9a 8f       	std	Y+26, r25	; 0x1a
    11f6:	ab 8f       	std	Y+27, r26	; 0x1b
    11f8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11fa:	69 8d       	ldd	r22, Y+25	; 0x19
    11fc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    11fe:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1200:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1202:	20 e0       	ldi	r18, 0x00	; 0
    1204:	30 e0       	ldi	r19, 0x00	; 0
    1206:	4a ef       	ldi	r20, 0xFA	; 250
    1208:	54 e4       	ldi	r21, 0x44	; 68
    120a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    120e:	dc 01       	movw	r26, r24
    1210:	cb 01       	movw	r24, r22
    1212:	8d 8b       	std	Y+21, r24	; 0x15
    1214:	9e 8b       	std	Y+22, r25	; 0x16
    1216:	af 8b       	std	Y+23, r26	; 0x17
    1218:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    121a:	6d 89       	ldd	r22, Y+21	; 0x15
    121c:	7e 89       	ldd	r23, Y+22	; 0x16
    121e:	8f 89       	ldd	r24, Y+23	; 0x17
    1220:	98 8d       	ldd	r25, Y+24	; 0x18
    1222:	20 e0       	ldi	r18, 0x00	; 0
    1224:	30 e0       	ldi	r19, 0x00	; 0
    1226:	40 e8       	ldi	r20, 0x80	; 128
    1228:	5f e3       	ldi	r21, 0x3F	; 63
    122a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    122e:	88 23       	and	r24, r24
    1230:	2c f4       	brge	.+10     	; 0x123c <LCD_u8Init+0xe0>
		__ticks = 1;
    1232:	81 e0       	ldi	r24, 0x01	; 1
    1234:	90 e0       	ldi	r25, 0x00	; 0
    1236:	9c 8b       	std	Y+20, r25	; 0x14
    1238:	8b 8b       	std	Y+19, r24	; 0x13
    123a:	3f c0       	rjmp	.+126    	; 0x12ba <LCD_u8Init+0x15e>
	else if (__tmp > 65535)
    123c:	6d 89       	ldd	r22, Y+21	; 0x15
    123e:	7e 89       	ldd	r23, Y+22	; 0x16
    1240:	8f 89       	ldd	r24, Y+23	; 0x17
    1242:	98 8d       	ldd	r25, Y+24	; 0x18
    1244:	20 e0       	ldi	r18, 0x00	; 0
    1246:	3f ef       	ldi	r19, 0xFF	; 255
    1248:	4f e7       	ldi	r20, 0x7F	; 127
    124a:	57 e4       	ldi	r21, 0x47	; 71
    124c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1250:	18 16       	cp	r1, r24
    1252:	4c f5       	brge	.+82     	; 0x12a6 <LCD_u8Init+0x14a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1254:	69 8d       	ldd	r22, Y+25	; 0x19
    1256:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1258:	8b 8d       	ldd	r24, Y+27	; 0x1b
    125a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    125c:	20 e0       	ldi	r18, 0x00	; 0
    125e:	30 e0       	ldi	r19, 0x00	; 0
    1260:	40 e2       	ldi	r20, 0x20	; 32
    1262:	51 e4       	ldi	r21, 0x41	; 65
    1264:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1268:	dc 01       	movw	r26, r24
    126a:	cb 01       	movw	r24, r22
    126c:	bc 01       	movw	r22, r24
    126e:	cd 01       	movw	r24, r26
    1270:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1274:	dc 01       	movw	r26, r24
    1276:	cb 01       	movw	r24, r22
    1278:	9c 8b       	std	Y+20, r25	; 0x14
    127a:	8b 8b       	std	Y+19, r24	; 0x13
    127c:	0f c0       	rjmp	.+30     	; 0x129c <LCD_u8Init+0x140>
    127e:	88 ec       	ldi	r24, 0xC8	; 200
    1280:	90 e0       	ldi	r25, 0x00	; 0
    1282:	9a 8b       	std	Y+18, r25	; 0x12
    1284:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1286:	89 89       	ldd	r24, Y+17	; 0x11
    1288:	9a 89       	ldd	r25, Y+18	; 0x12
    128a:	01 97       	sbiw	r24, 0x01	; 1
    128c:	f1 f7       	brne	.-4      	; 0x128a <LCD_u8Init+0x12e>
    128e:	9a 8b       	std	Y+18, r25	; 0x12
    1290:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1292:	8b 89       	ldd	r24, Y+19	; 0x13
    1294:	9c 89       	ldd	r25, Y+20	; 0x14
    1296:	01 97       	sbiw	r24, 0x01	; 1
    1298:	9c 8b       	std	Y+20, r25	; 0x14
    129a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    129c:	8b 89       	ldd	r24, Y+19	; 0x13
    129e:	9c 89       	ldd	r25, Y+20	; 0x14
    12a0:	00 97       	sbiw	r24, 0x00	; 0
    12a2:	69 f7       	brne	.-38     	; 0x127e <LCD_u8Init+0x122>
    12a4:	14 c0       	rjmp	.+40     	; 0x12ce <LCD_u8Init+0x172>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12a6:	6d 89       	ldd	r22, Y+21	; 0x15
    12a8:	7e 89       	ldd	r23, Y+22	; 0x16
    12aa:	8f 89       	ldd	r24, Y+23	; 0x17
    12ac:	98 8d       	ldd	r25, Y+24	; 0x18
    12ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12b2:	dc 01       	movw	r26, r24
    12b4:	cb 01       	movw	r24, r22
    12b6:	9c 8b       	std	Y+20, r25	; 0x14
    12b8:	8b 8b       	std	Y+19, r24	; 0x13
    12ba:	8b 89       	ldd	r24, Y+19	; 0x13
    12bc:	9c 89       	ldd	r25, Y+20	; 0x14
    12be:	98 8b       	std	Y+16, r25	; 0x10
    12c0:	8f 87       	std	Y+15, r24	; 0x0f
    12c2:	8f 85       	ldd	r24, Y+15	; 0x0f
    12c4:	98 89       	ldd	r25, Y+16	; 0x10
    12c6:	01 97       	sbiw	r24, 0x01	; 1
    12c8:	f1 f7       	brne	.-4      	; 0x12c6 <LCD_u8Init+0x16a>
    12ca:	98 8b       	std	Y+16, r25	; 0x10
    12cc:	8f 87       	std	Y+15, r24	; 0x0f
	case LCD_4Bit_Mode:
		_delay_ms(50);
		LCD_u8SendCommand(LCD_FUN_SET_4BIT_2LINE);
    12ce:	88 e2       	ldi	r24, 0x28	; 40
    12d0:	0e 94 02 0a 	call	0x1404	; 0x1404 <LCD_u8SendCommand>
		LCD_u8SendCommand(LCD_DISPLAY_ON_CURSOR_OFF);
    12d4:	8c e0       	ldi	r24, 0x0C	; 12
    12d6:	0e 94 02 0a 	call	0x1404	; 0x1404 <LCD_u8SendCommand>
		LCD_u8SendCommand(LCD_CLEAR);
    12da:	81 e0       	ldi	r24, 0x01	; 1
    12dc:	0e 94 02 0a 	call	0x1404	; 0x1404 <LCD_u8SendCommand>
		LCD_u8SendCommand(LCD_ENTRY_MODE_SET);
    12e0:	86 e0       	ldi	r24, 0x06	; 6
    12e2:	0e 94 02 0a 	call	0x1404	; 0x1404 <LCD_u8SendCommand>
		API_Status = EXIT_SUCCEED;
    12e6:	81 e0       	ldi	r24, 0x01	; 1
    12e8:	8d 8f       	std	Y+29, r24	; 0x1d
    12ea:	82 c0       	rjmp	.+260    	; 0x13f0 <LCD_u8Init+0x294>
		break;
    12ec:	80 e0       	ldi	r24, 0x00	; 0
    12ee:	90 e0       	ldi	r25, 0x00	; 0
    12f0:	a8 e4       	ldi	r26, 0x48	; 72
    12f2:	b2 e4       	ldi	r27, 0x42	; 66
    12f4:	8b 87       	std	Y+11, r24	; 0x0b
    12f6:	9c 87       	std	Y+12, r25	; 0x0c
    12f8:	ad 87       	std	Y+13, r26	; 0x0d
    12fa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12fc:	6b 85       	ldd	r22, Y+11	; 0x0b
    12fe:	7c 85       	ldd	r23, Y+12	; 0x0c
    1300:	8d 85       	ldd	r24, Y+13	; 0x0d
    1302:	9e 85       	ldd	r25, Y+14	; 0x0e
    1304:	20 e0       	ldi	r18, 0x00	; 0
    1306:	30 e0       	ldi	r19, 0x00	; 0
    1308:	4a ef       	ldi	r20, 0xFA	; 250
    130a:	54 e4       	ldi	r21, 0x44	; 68
    130c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1310:	dc 01       	movw	r26, r24
    1312:	cb 01       	movw	r24, r22
    1314:	8f 83       	std	Y+7, r24	; 0x07
    1316:	98 87       	std	Y+8, r25	; 0x08
    1318:	a9 87       	std	Y+9, r26	; 0x09
    131a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    131c:	6f 81       	ldd	r22, Y+7	; 0x07
    131e:	78 85       	ldd	r23, Y+8	; 0x08
    1320:	89 85       	ldd	r24, Y+9	; 0x09
    1322:	9a 85       	ldd	r25, Y+10	; 0x0a
    1324:	20 e0       	ldi	r18, 0x00	; 0
    1326:	30 e0       	ldi	r19, 0x00	; 0
    1328:	40 e8       	ldi	r20, 0x80	; 128
    132a:	5f e3       	ldi	r21, 0x3F	; 63
    132c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1330:	88 23       	and	r24, r24
    1332:	2c f4       	brge	.+10     	; 0x133e <LCD_u8Init+0x1e2>
		__ticks = 1;
    1334:	81 e0       	ldi	r24, 0x01	; 1
    1336:	90 e0       	ldi	r25, 0x00	; 0
    1338:	9e 83       	std	Y+6, r25	; 0x06
    133a:	8d 83       	std	Y+5, r24	; 0x05
    133c:	3f c0       	rjmp	.+126    	; 0x13bc <LCD_u8Init+0x260>
	else if (__tmp > 65535)
    133e:	6f 81       	ldd	r22, Y+7	; 0x07
    1340:	78 85       	ldd	r23, Y+8	; 0x08
    1342:	89 85       	ldd	r24, Y+9	; 0x09
    1344:	9a 85       	ldd	r25, Y+10	; 0x0a
    1346:	20 e0       	ldi	r18, 0x00	; 0
    1348:	3f ef       	ldi	r19, 0xFF	; 255
    134a:	4f e7       	ldi	r20, 0x7F	; 127
    134c:	57 e4       	ldi	r21, 0x47	; 71
    134e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1352:	18 16       	cp	r1, r24
    1354:	4c f5       	brge	.+82     	; 0x13a8 <LCD_u8Init+0x24c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1356:	6b 85       	ldd	r22, Y+11	; 0x0b
    1358:	7c 85       	ldd	r23, Y+12	; 0x0c
    135a:	8d 85       	ldd	r24, Y+13	; 0x0d
    135c:	9e 85       	ldd	r25, Y+14	; 0x0e
    135e:	20 e0       	ldi	r18, 0x00	; 0
    1360:	30 e0       	ldi	r19, 0x00	; 0
    1362:	40 e2       	ldi	r20, 0x20	; 32
    1364:	51 e4       	ldi	r21, 0x41	; 65
    1366:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    136a:	dc 01       	movw	r26, r24
    136c:	cb 01       	movw	r24, r22
    136e:	bc 01       	movw	r22, r24
    1370:	cd 01       	movw	r24, r26
    1372:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1376:	dc 01       	movw	r26, r24
    1378:	cb 01       	movw	r24, r22
    137a:	9e 83       	std	Y+6, r25	; 0x06
    137c:	8d 83       	std	Y+5, r24	; 0x05
    137e:	0f c0       	rjmp	.+30     	; 0x139e <LCD_u8Init+0x242>
    1380:	88 ec       	ldi	r24, 0xC8	; 200
    1382:	90 e0       	ldi	r25, 0x00	; 0
    1384:	9c 83       	std	Y+4, r25	; 0x04
    1386:	8b 83       	std	Y+3, r24	; 0x03
    1388:	8b 81       	ldd	r24, Y+3	; 0x03
    138a:	9c 81       	ldd	r25, Y+4	; 0x04
    138c:	01 97       	sbiw	r24, 0x01	; 1
    138e:	f1 f7       	brne	.-4      	; 0x138c <LCD_u8Init+0x230>
    1390:	9c 83       	std	Y+4, r25	; 0x04
    1392:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1394:	8d 81       	ldd	r24, Y+5	; 0x05
    1396:	9e 81       	ldd	r25, Y+6	; 0x06
    1398:	01 97       	sbiw	r24, 0x01	; 1
    139a:	9e 83       	std	Y+6, r25	; 0x06
    139c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    139e:	8d 81       	ldd	r24, Y+5	; 0x05
    13a0:	9e 81       	ldd	r25, Y+6	; 0x06
    13a2:	00 97       	sbiw	r24, 0x00	; 0
    13a4:	69 f7       	brne	.-38     	; 0x1380 <LCD_u8Init+0x224>
    13a6:	14 c0       	rjmp	.+40     	; 0x13d0 <LCD_u8Init+0x274>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13a8:	6f 81       	ldd	r22, Y+7	; 0x07
    13aa:	78 85       	ldd	r23, Y+8	; 0x08
    13ac:	89 85       	ldd	r24, Y+9	; 0x09
    13ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    13b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13b4:	dc 01       	movw	r26, r24
    13b6:	cb 01       	movw	r24, r22
    13b8:	9e 83       	std	Y+6, r25	; 0x06
    13ba:	8d 83       	std	Y+5, r24	; 0x05
    13bc:	8d 81       	ldd	r24, Y+5	; 0x05
    13be:	9e 81       	ldd	r25, Y+6	; 0x06
    13c0:	9a 83       	std	Y+2, r25	; 0x02
    13c2:	89 83       	std	Y+1, r24	; 0x01
    13c4:	89 81       	ldd	r24, Y+1	; 0x01
    13c6:	9a 81       	ldd	r25, Y+2	; 0x02
    13c8:	01 97       	sbiw	r24, 0x01	; 1
    13ca:	f1 f7       	brne	.-4      	; 0x13c8 <LCD_u8Init+0x26c>
    13cc:	9a 83       	std	Y+2, r25	; 0x02
    13ce:	89 83       	std	Y+1, r24	; 0x01

	case LCD_8Bit_Mode:
		_delay_ms(50);
		LCD_u8SendCommand( LCD_FUN_SET_8BIT_2LINE);
    13d0:	88 e3       	ldi	r24, 0x38	; 56
    13d2:	0e 94 02 0a 	call	0x1404	; 0x1404 <LCD_u8SendCommand>
		LCD_u8SendCommand( LCD_DISPLAY_ON_CURSOR_OFF);
    13d6:	8c e0       	ldi	r24, 0x0C	; 12
    13d8:	0e 94 02 0a 	call	0x1404	; 0x1404 <LCD_u8SendCommand>
		LCD_u8SendCommand(LCD_CLEAR);
    13dc:	81 e0       	ldi	r24, 0x01	; 1
    13de:	0e 94 02 0a 	call	0x1404	; 0x1404 <LCD_u8SendCommand>
		LCD_u8SendCommand(LCD_ENTRY_MODE_SET);
    13e2:	86 e0       	ldi	r24, 0x06	; 6
    13e4:	0e 94 02 0a 	call	0x1404	; 0x1404 <LCD_u8SendCommand>
		API_Status = EXIT_SUCCEED;
    13e8:	81 e0       	ldi	r24, 0x01	; 1
    13ea:	8d 8f       	std	Y+29, r24	; 0x1d
    13ec:	01 c0       	rjmp	.+2      	; 0x13f0 <LCD_u8Init+0x294>
		break;
	default:
		API_Status = EXIT_FAILED;
    13ee:	1d 8e       	std	Y+29, r1	; 0x1d
		break;
	}
	return API_Status;
    13f0:	8d 8d       	ldd	r24, Y+29	; 0x1d
}
    13f2:	a1 96       	adiw	r28, 0x21	; 33
    13f4:	0f b6       	in	r0, 0x3f	; 63
    13f6:	f8 94       	cli
    13f8:	de bf       	out	0x3e, r29	; 62
    13fa:	0f be       	out	0x3f, r0	; 63
    13fc:	cd bf       	out	0x3d, r28	; 61
    13fe:	cf 91       	pop	r28
    1400:	df 91       	pop	r29
    1402:	08 95       	ret

00001404 <LCD_u8SendCommand>:
 * Input : Required Command
 * Output: Nothing
 *
 */

u8 LCD_u8SendCommand(u8 Copy_u8Command) {
    1404:	df 93       	push	r29
    1406:	cf 93       	push	r28
    1408:	cd b7       	in	r28, 0x3d	; 61
    140a:	de b7       	in	r29, 0x3e	; 62
    140c:	e9 97       	sbiw	r28, 0x39	; 57
    140e:	0f b6       	in	r0, 0x3f	; 63
    1410:	f8 94       	cli
    1412:	de bf       	out	0x3e, r29	; 62
    1414:	0f be       	out	0x3f, r0	; 63
    1416:	cd bf       	out	0x3d, r28	; 61
    1418:	8f ab       	std	Y+55, r24	; 0x37

	u8 API_Status = EXIT_FAILED;
    141a:	1e aa       	std	Y+54, r1	; 0x36
	u8 Command = 0x00;
    141c:	1d aa       	std	Y+53, r1	; 0x35

	DIO_u8SetPinValue(Config_Struct.LCD_Control_port_Reg, Config_Struct.LCD_RS,
    141e:	80 91 ab 00 	lds	r24, 0x00AB
    1422:	90 91 ac 00 	lds	r25, 0x00AC
    1426:	69 2f       	mov	r22, r25
    1428:	40 e0       	ldi	r20, 0x00	; 0
    142a:	0e 94 84 07 	call	0xf08	; 0xf08 <DIO_u8SetPinValue>
	DIO_PIN_LOW);
	DIO_u8SetPinValue(Config_Struct.LCD_Control_port_Reg, Config_Struct.LCD_RW,
    142e:	80 91 ab 00 	lds	r24, 0x00AB
    1432:	90 91 ad 00 	lds	r25, 0x00AD
    1436:	69 2f       	mov	r22, r25
    1438:	40 e0       	ldi	r20, 0x00	; 0
    143a:	0e 94 84 07 	call	0xf08	; 0xf08 <DIO_u8SetPinValue>
	DIO_PIN_LOW);

	switch (Config_Struct.LCD_Mode) {
    143e:	80 91 af 00 	lds	r24, 0x00AF
    1442:	28 2f       	mov	r18, r24
    1444:	30 e0       	ldi	r19, 0x00	; 0
    1446:	39 af       	std	Y+57, r19	; 0x39
    1448:	28 af       	std	Y+56, r18	; 0x38
    144a:	88 ad       	ldd	r24, Y+56	; 0x38
    144c:	99 ad       	ldd	r25, Y+57	; 0x39
    144e:	84 30       	cpi	r24, 0x04	; 4
    1450:	91 05       	cpc	r25, r1
    1452:	39 f0       	breq	.+14     	; 0x1462 <LCD_u8SendCommand+0x5e>
    1454:	28 ad       	ldd	r18, Y+56	; 0x38
    1456:	39 ad       	ldd	r19, Y+57	; 0x39
    1458:	28 30       	cpi	r18, 0x08	; 8
    145a:	31 05       	cpc	r19, r1
    145c:	09 f4       	brne	.+2      	; 0x1460 <LCD_u8SendCommand+0x5c>
    145e:	7d c1       	rjmp	.+762    	; 0x175a <LCD_u8SendCommand+0x356>
    1460:	0e c2       	rjmp	.+1052   	; 0x187e <LCD_u8SendCommand+0x47a>
	case LCD_4Bit_Mode:
		Command = (Config_Struct.LCD_Data_Port_Reg & 0x0F) | (Copy_u8Command & 0xF0);
    1462:	80 91 aa 00 	lds	r24, 0x00AA
    1466:	98 2f       	mov	r25, r24
    1468:	9f 70       	andi	r25, 0x0F	; 15
    146a:	8f a9       	ldd	r24, Y+55	; 0x37
    146c:	80 7f       	andi	r24, 0xF0	; 240
    146e:	89 2b       	or	r24, r25
    1470:	8d ab       	std	Y+53, r24	; 0x35
		/* E is HIGH */
		DIO_u8SetPinValue(Config_Struct.LCD_Control_port_Reg,
    1472:	80 91 ab 00 	lds	r24, 0x00AB
    1476:	90 91 ae 00 	lds	r25, 0x00AE
    147a:	69 2f       	mov	r22, r25
    147c:	41 e0       	ldi	r20, 0x01	; 1
    147e:	0e 94 84 07 	call	0xf08	; 0xf08 <DIO_u8SetPinValue>
				Config_Struct.LCD_E, DIO_PIN_HIGH);
		DIO_u8SetPortValue(Config_Struct.LCD_Data_Port_Reg, Command);
    1482:	80 91 aa 00 	lds	r24, 0x00AA
    1486:	6d a9       	ldd	r22, Y+53	; 0x35
    1488:	0e 94 90 06 	call	0xd20	; 0xd20 <DIO_u8SetPortValue>

		/* E is LOW */
		DIO_u8SetPinValue(Config_Struct.LCD_Control_port_Reg,
    148c:	80 91 ab 00 	lds	r24, 0x00AB
    1490:	90 91 ae 00 	lds	r25, 0x00AE
    1494:	69 2f       	mov	r22, r25
    1496:	40 e0       	ldi	r20, 0x00	; 0
    1498:	0e 94 84 07 	call	0xf08	; 0xf08 <DIO_u8SetPinValue>
    149c:	80 e0       	ldi	r24, 0x00	; 0
    149e:	90 e0       	ldi	r25, 0x00	; 0
    14a0:	a8 e4       	ldi	r26, 0x48	; 72
    14a2:	b3 e4       	ldi	r27, 0x43	; 67
    14a4:	89 ab       	std	Y+49, r24	; 0x31
    14a6:	9a ab       	std	Y+50, r25	; 0x32
    14a8:	ab ab       	std	Y+51, r26	; 0x33
    14aa:	bc ab       	std	Y+52, r27	; 0x34
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    14ac:	69 a9       	ldd	r22, Y+49	; 0x31
    14ae:	7a a9       	ldd	r23, Y+50	; 0x32
    14b0:	8b a9       	ldd	r24, Y+51	; 0x33
    14b2:	9c a9       	ldd	r25, Y+52	; 0x34
    14b4:	2b ea       	ldi	r18, 0xAB	; 171
    14b6:	3a ea       	ldi	r19, 0xAA	; 170
    14b8:	4a e2       	ldi	r20, 0x2A	; 42
    14ba:	50 e4       	ldi	r21, 0x40	; 64
    14bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14c0:	dc 01       	movw	r26, r24
    14c2:	cb 01       	movw	r24, r22
    14c4:	8d a7       	std	Y+45, r24	; 0x2d
    14c6:	9e a7       	std	Y+46, r25	; 0x2e
    14c8:	af a7       	std	Y+47, r26	; 0x2f
    14ca:	b8 ab       	std	Y+48, r27	; 0x30
	if (__tmp < 1.0)
    14cc:	6d a5       	ldd	r22, Y+45	; 0x2d
    14ce:	7e a5       	ldd	r23, Y+46	; 0x2e
    14d0:	8f a5       	ldd	r24, Y+47	; 0x2f
    14d2:	98 a9       	ldd	r25, Y+48	; 0x30
    14d4:	20 e0       	ldi	r18, 0x00	; 0
    14d6:	30 e0       	ldi	r19, 0x00	; 0
    14d8:	40 e8       	ldi	r20, 0x80	; 128
    14da:	5f e3       	ldi	r21, 0x3F	; 63
    14dc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    14e0:	88 23       	and	r24, r24
    14e2:	1c f4       	brge	.+6      	; 0x14ea <LCD_u8SendCommand+0xe6>
		__ticks = 1;
    14e4:	81 e0       	ldi	r24, 0x01	; 1
    14e6:	8c a7       	std	Y+44, r24	; 0x2c
    14e8:	91 c0       	rjmp	.+290    	; 0x160c <LCD_u8SendCommand+0x208>
	else if (__tmp > 255)
    14ea:	6d a5       	ldd	r22, Y+45	; 0x2d
    14ec:	7e a5       	ldd	r23, Y+46	; 0x2e
    14ee:	8f a5       	ldd	r24, Y+47	; 0x2f
    14f0:	98 a9       	ldd	r25, Y+48	; 0x30
    14f2:	20 e0       	ldi	r18, 0x00	; 0
    14f4:	30 e0       	ldi	r19, 0x00	; 0
    14f6:	4f e7       	ldi	r20, 0x7F	; 127
    14f8:	53 e4       	ldi	r21, 0x43	; 67
    14fa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    14fe:	18 16       	cp	r1, r24
    1500:	0c f0       	brlt	.+2      	; 0x1504 <LCD_u8SendCommand+0x100>
    1502:	7b c0       	rjmp	.+246    	; 0x15fa <LCD_u8SendCommand+0x1f6>
	{
		_delay_ms(__us / 1000.0);
    1504:	69 a9       	ldd	r22, Y+49	; 0x31
    1506:	7a a9       	ldd	r23, Y+50	; 0x32
    1508:	8b a9       	ldd	r24, Y+51	; 0x33
    150a:	9c a9       	ldd	r25, Y+52	; 0x34
    150c:	20 e0       	ldi	r18, 0x00	; 0
    150e:	30 e0       	ldi	r19, 0x00	; 0
    1510:	4a e7       	ldi	r20, 0x7A	; 122
    1512:	54 e4       	ldi	r21, 0x44	; 68
    1514:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1518:	dc 01       	movw	r26, r24
    151a:	cb 01       	movw	r24, r22
    151c:	88 a7       	std	Y+40, r24	; 0x28
    151e:	99 a7       	std	Y+41, r25	; 0x29
    1520:	aa a7       	std	Y+42, r26	; 0x2a
    1522:	bb a7       	std	Y+43, r27	; 0x2b
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1524:	68 a5       	ldd	r22, Y+40	; 0x28
    1526:	79 a5       	ldd	r23, Y+41	; 0x29
    1528:	8a a5       	ldd	r24, Y+42	; 0x2a
    152a:	9b a5       	ldd	r25, Y+43	; 0x2b
    152c:	20 e0       	ldi	r18, 0x00	; 0
    152e:	30 e0       	ldi	r19, 0x00	; 0
    1530:	4a ef       	ldi	r20, 0xFA	; 250
    1532:	54 e4       	ldi	r21, 0x44	; 68
    1534:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1538:	dc 01       	movw	r26, r24
    153a:	cb 01       	movw	r24, r22
    153c:	8c a3       	std	Y+36, r24	; 0x24
    153e:	9d a3       	std	Y+37, r25	; 0x25
    1540:	ae a3       	std	Y+38, r26	; 0x26
    1542:	bf a3       	std	Y+39, r27	; 0x27
	if (__tmp < 1.0)
    1544:	6c a1       	ldd	r22, Y+36	; 0x24
    1546:	7d a1       	ldd	r23, Y+37	; 0x25
    1548:	8e a1       	ldd	r24, Y+38	; 0x26
    154a:	9f a1       	ldd	r25, Y+39	; 0x27
    154c:	20 e0       	ldi	r18, 0x00	; 0
    154e:	30 e0       	ldi	r19, 0x00	; 0
    1550:	40 e8       	ldi	r20, 0x80	; 128
    1552:	5f e3       	ldi	r21, 0x3F	; 63
    1554:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1558:	88 23       	and	r24, r24
    155a:	2c f4       	brge	.+10     	; 0x1566 <LCD_u8SendCommand+0x162>
		__ticks = 1;
    155c:	81 e0       	ldi	r24, 0x01	; 1
    155e:	90 e0       	ldi	r25, 0x00	; 0
    1560:	9b a3       	std	Y+35, r25	; 0x23
    1562:	8a a3       	std	Y+34, r24	; 0x22
    1564:	3f c0       	rjmp	.+126    	; 0x15e4 <LCD_u8SendCommand+0x1e0>
	else if (__tmp > 65535)
    1566:	6c a1       	ldd	r22, Y+36	; 0x24
    1568:	7d a1       	ldd	r23, Y+37	; 0x25
    156a:	8e a1       	ldd	r24, Y+38	; 0x26
    156c:	9f a1       	ldd	r25, Y+39	; 0x27
    156e:	20 e0       	ldi	r18, 0x00	; 0
    1570:	3f ef       	ldi	r19, 0xFF	; 255
    1572:	4f e7       	ldi	r20, 0x7F	; 127
    1574:	57 e4       	ldi	r21, 0x47	; 71
    1576:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    157a:	18 16       	cp	r1, r24
    157c:	4c f5       	brge	.+82     	; 0x15d0 <LCD_u8SendCommand+0x1cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    157e:	68 a5       	ldd	r22, Y+40	; 0x28
    1580:	79 a5       	ldd	r23, Y+41	; 0x29
    1582:	8a a5       	ldd	r24, Y+42	; 0x2a
    1584:	9b a5       	ldd	r25, Y+43	; 0x2b
    1586:	20 e0       	ldi	r18, 0x00	; 0
    1588:	30 e0       	ldi	r19, 0x00	; 0
    158a:	40 e2       	ldi	r20, 0x20	; 32
    158c:	51 e4       	ldi	r21, 0x41	; 65
    158e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1592:	dc 01       	movw	r26, r24
    1594:	cb 01       	movw	r24, r22
    1596:	bc 01       	movw	r22, r24
    1598:	cd 01       	movw	r24, r26
    159a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    159e:	dc 01       	movw	r26, r24
    15a0:	cb 01       	movw	r24, r22
    15a2:	9b a3       	std	Y+35, r25	; 0x23
    15a4:	8a a3       	std	Y+34, r24	; 0x22
    15a6:	0f c0       	rjmp	.+30     	; 0x15c6 <LCD_u8SendCommand+0x1c2>
    15a8:	88 ec       	ldi	r24, 0xC8	; 200
    15aa:	90 e0       	ldi	r25, 0x00	; 0
    15ac:	99 a3       	std	Y+33, r25	; 0x21
    15ae:	88 a3       	std	Y+32, r24	; 0x20
    15b0:	88 a1       	ldd	r24, Y+32	; 0x20
    15b2:	99 a1       	ldd	r25, Y+33	; 0x21
    15b4:	01 97       	sbiw	r24, 0x01	; 1
    15b6:	f1 f7       	brne	.-4      	; 0x15b4 <LCD_u8SendCommand+0x1b0>
    15b8:	99 a3       	std	Y+33, r25	; 0x21
    15ba:	88 a3       	std	Y+32, r24	; 0x20
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15bc:	8a a1       	ldd	r24, Y+34	; 0x22
    15be:	9b a1       	ldd	r25, Y+35	; 0x23
    15c0:	01 97       	sbiw	r24, 0x01	; 1
    15c2:	9b a3       	std	Y+35, r25	; 0x23
    15c4:	8a a3       	std	Y+34, r24	; 0x22
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15c6:	8a a1       	ldd	r24, Y+34	; 0x22
    15c8:	9b a1       	ldd	r25, Y+35	; 0x23
    15ca:	00 97       	sbiw	r24, 0x00	; 0
    15cc:	69 f7       	brne	.-38     	; 0x15a8 <LCD_u8SendCommand+0x1a4>
    15ce:	24 c0       	rjmp	.+72     	; 0x1618 <LCD_u8SendCommand+0x214>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15d0:	6c a1       	ldd	r22, Y+36	; 0x24
    15d2:	7d a1       	ldd	r23, Y+37	; 0x25
    15d4:	8e a1       	ldd	r24, Y+38	; 0x26
    15d6:	9f a1       	ldd	r25, Y+39	; 0x27
    15d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15dc:	dc 01       	movw	r26, r24
    15de:	cb 01       	movw	r24, r22
    15e0:	9b a3       	std	Y+35, r25	; 0x23
    15e2:	8a a3       	std	Y+34, r24	; 0x22
    15e4:	8a a1       	ldd	r24, Y+34	; 0x22
    15e6:	9b a1       	ldd	r25, Y+35	; 0x23
    15e8:	9f 8f       	std	Y+31, r25	; 0x1f
    15ea:	8e 8f       	std	Y+30, r24	; 0x1e
    15ec:	8e 8d       	ldd	r24, Y+30	; 0x1e
    15ee:	9f 8d       	ldd	r25, Y+31	; 0x1f
    15f0:	01 97       	sbiw	r24, 0x01	; 1
    15f2:	f1 f7       	brne	.-4      	; 0x15f0 <LCD_u8SendCommand+0x1ec>
    15f4:	9f 8f       	std	Y+31, r25	; 0x1f
    15f6:	8e 8f       	std	Y+30, r24	; 0x1e
    15f8:	0f c0       	rjmp	.+30     	; 0x1618 <LCD_u8SendCommand+0x214>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    15fa:	6d a5       	ldd	r22, Y+45	; 0x2d
    15fc:	7e a5       	ldd	r23, Y+46	; 0x2e
    15fe:	8f a5       	ldd	r24, Y+47	; 0x2f
    1600:	98 a9       	ldd	r25, Y+48	; 0x30
    1602:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1606:	dc 01       	movw	r26, r24
    1608:	cb 01       	movw	r24, r22
    160a:	8c a7       	std	Y+44, r24	; 0x2c
    160c:	8c a5       	ldd	r24, Y+44	; 0x2c
    160e:	8d 8f       	std	Y+29, r24	; 0x1d
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1610:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1612:	8a 95       	dec	r24
    1614:	f1 f7       	brne	.-4      	; 0x1612 <LCD_u8SendCommand+0x20e>
    1616:	8d 8f       	std	Y+29, r24	; 0x1d
				Config_Struct.LCD_E, DIO_PIN_LOW);
		_delay_us(200);
		Command = (Config_Struct.LCD_Data_Port_Reg & 0x0F) | (Copy_u8Command << 4);
    1618:	80 91 aa 00 	lds	r24, 0x00AA
    161c:	28 2f       	mov	r18, r24
    161e:	2f 70       	andi	r18, 0x0F	; 15
    1620:	8f a9       	ldd	r24, Y+55	; 0x37
    1622:	88 2f       	mov	r24, r24
    1624:	90 e0       	ldi	r25, 0x00	; 0
    1626:	82 95       	swap	r24
    1628:	92 95       	swap	r25
    162a:	90 7f       	andi	r25, 0xF0	; 240
    162c:	98 27       	eor	r25, r24
    162e:	80 7f       	andi	r24, 0xF0	; 240
    1630:	98 27       	eor	r25, r24
    1632:	82 2b       	or	r24, r18
    1634:	8d ab       	std	Y+53, r24	; 0x35
		DIO_u8SetPinValue(Config_Struct.LCD_Control_port_Reg,
    1636:	80 91 ab 00 	lds	r24, 0x00AB
    163a:	90 91 ae 00 	lds	r25, 0x00AE
    163e:	69 2f       	mov	r22, r25
    1640:	41 e0       	ldi	r20, 0x01	; 1
    1642:	0e 94 84 07 	call	0xf08	; 0xf08 <DIO_u8SetPinValue>
				Config_Struct.LCD_E, DIO_PIN_HIGH);
		DIO_u8SetPortValue(Config_Struct.LCD_Data_Port_Reg, Command);
    1646:	80 91 aa 00 	lds	r24, 0x00AA
    164a:	6d a9       	ldd	r22, Y+53	; 0x35
    164c:	0e 94 90 06 	call	0xd20	; 0xd20 <DIO_u8SetPortValue>

		DIO_u8SetPinValue(Config_Struct.LCD_Control_port_Reg,
    1650:	80 91 ab 00 	lds	r24, 0x00AB
    1654:	90 91 ae 00 	lds	r25, 0x00AE
    1658:	69 2f       	mov	r22, r25
    165a:	40 e0       	ldi	r20, 0x00	; 0
    165c:	0e 94 84 07 	call	0xf08	; 0xf08 <DIO_u8SetPinValue>
    1660:	80 e0       	ldi	r24, 0x00	; 0
    1662:	90 e0       	ldi	r25, 0x00	; 0
    1664:	a0 e0       	ldi	r26, 0x00	; 0
    1666:	b0 e4       	ldi	r27, 0x40	; 64
    1668:	89 8f       	std	Y+25, r24	; 0x19
    166a:	9a 8f       	std	Y+26, r25	; 0x1a
    166c:	ab 8f       	std	Y+27, r26	; 0x1b
    166e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1670:	69 8d       	ldd	r22, Y+25	; 0x19
    1672:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1674:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1676:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1678:	20 e0       	ldi	r18, 0x00	; 0
    167a:	30 e0       	ldi	r19, 0x00	; 0
    167c:	4a ef       	ldi	r20, 0xFA	; 250
    167e:	54 e4       	ldi	r21, 0x44	; 68
    1680:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1684:	dc 01       	movw	r26, r24
    1686:	cb 01       	movw	r24, r22
    1688:	8d 8b       	std	Y+21, r24	; 0x15
    168a:	9e 8b       	std	Y+22, r25	; 0x16
    168c:	af 8b       	std	Y+23, r26	; 0x17
    168e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1690:	6d 89       	ldd	r22, Y+21	; 0x15
    1692:	7e 89       	ldd	r23, Y+22	; 0x16
    1694:	8f 89       	ldd	r24, Y+23	; 0x17
    1696:	98 8d       	ldd	r25, Y+24	; 0x18
    1698:	20 e0       	ldi	r18, 0x00	; 0
    169a:	30 e0       	ldi	r19, 0x00	; 0
    169c:	40 e8       	ldi	r20, 0x80	; 128
    169e:	5f e3       	ldi	r21, 0x3F	; 63
    16a0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    16a4:	88 23       	and	r24, r24
    16a6:	2c f4       	brge	.+10     	; 0x16b2 <LCD_u8SendCommand+0x2ae>
		__ticks = 1;
    16a8:	81 e0       	ldi	r24, 0x01	; 1
    16aa:	90 e0       	ldi	r25, 0x00	; 0
    16ac:	9c 8b       	std	Y+20, r25	; 0x14
    16ae:	8b 8b       	std	Y+19, r24	; 0x13
    16b0:	3f c0       	rjmp	.+126    	; 0x1730 <LCD_u8SendCommand+0x32c>
	else if (__tmp > 65535)
    16b2:	6d 89       	ldd	r22, Y+21	; 0x15
    16b4:	7e 89       	ldd	r23, Y+22	; 0x16
    16b6:	8f 89       	ldd	r24, Y+23	; 0x17
    16b8:	98 8d       	ldd	r25, Y+24	; 0x18
    16ba:	20 e0       	ldi	r18, 0x00	; 0
    16bc:	3f ef       	ldi	r19, 0xFF	; 255
    16be:	4f e7       	ldi	r20, 0x7F	; 127
    16c0:	57 e4       	ldi	r21, 0x47	; 71
    16c2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    16c6:	18 16       	cp	r1, r24
    16c8:	4c f5       	brge	.+82     	; 0x171c <LCD_u8SendCommand+0x318>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16ca:	69 8d       	ldd	r22, Y+25	; 0x19
    16cc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    16ce:	8b 8d       	ldd	r24, Y+27	; 0x1b
    16d0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    16d2:	20 e0       	ldi	r18, 0x00	; 0
    16d4:	30 e0       	ldi	r19, 0x00	; 0
    16d6:	40 e2       	ldi	r20, 0x20	; 32
    16d8:	51 e4       	ldi	r21, 0x41	; 65
    16da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16de:	dc 01       	movw	r26, r24
    16e0:	cb 01       	movw	r24, r22
    16e2:	bc 01       	movw	r22, r24
    16e4:	cd 01       	movw	r24, r26
    16e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16ea:	dc 01       	movw	r26, r24
    16ec:	cb 01       	movw	r24, r22
    16ee:	9c 8b       	std	Y+20, r25	; 0x14
    16f0:	8b 8b       	std	Y+19, r24	; 0x13
    16f2:	0f c0       	rjmp	.+30     	; 0x1712 <LCD_u8SendCommand+0x30e>
    16f4:	88 ec       	ldi	r24, 0xC8	; 200
    16f6:	90 e0       	ldi	r25, 0x00	; 0
    16f8:	9a 8b       	std	Y+18, r25	; 0x12
    16fa:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    16fc:	89 89       	ldd	r24, Y+17	; 0x11
    16fe:	9a 89       	ldd	r25, Y+18	; 0x12
    1700:	01 97       	sbiw	r24, 0x01	; 1
    1702:	f1 f7       	brne	.-4      	; 0x1700 <LCD_u8SendCommand+0x2fc>
    1704:	9a 8b       	std	Y+18, r25	; 0x12
    1706:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1708:	8b 89       	ldd	r24, Y+19	; 0x13
    170a:	9c 89       	ldd	r25, Y+20	; 0x14
    170c:	01 97       	sbiw	r24, 0x01	; 1
    170e:	9c 8b       	std	Y+20, r25	; 0x14
    1710:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1712:	8b 89       	ldd	r24, Y+19	; 0x13
    1714:	9c 89       	ldd	r25, Y+20	; 0x14
    1716:	00 97       	sbiw	r24, 0x00	; 0
    1718:	69 f7       	brne	.-38     	; 0x16f4 <LCD_u8SendCommand+0x2f0>
    171a:	14 c0       	rjmp	.+40     	; 0x1744 <LCD_u8SendCommand+0x340>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    171c:	6d 89       	ldd	r22, Y+21	; 0x15
    171e:	7e 89       	ldd	r23, Y+22	; 0x16
    1720:	8f 89       	ldd	r24, Y+23	; 0x17
    1722:	98 8d       	ldd	r25, Y+24	; 0x18
    1724:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1728:	dc 01       	movw	r26, r24
    172a:	cb 01       	movw	r24, r22
    172c:	9c 8b       	std	Y+20, r25	; 0x14
    172e:	8b 8b       	std	Y+19, r24	; 0x13
    1730:	8b 89       	ldd	r24, Y+19	; 0x13
    1732:	9c 89       	ldd	r25, Y+20	; 0x14
    1734:	98 8b       	std	Y+16, r25	; 0x10
    1736:	8f 87       	std	Y+15, r24	; 0x0f
    1738:	8f 85       	ldd	r24, Y+15	; 0x0f
    173a:	98 89       	ldd	r25, Y+16	; 0x10
    173c:	01 97       	sbiw	r24, 0x01	; 1
    173e:	f1 f7       	brne	.-4      	; 0x173c <LCD_u8SendCommand+0x338>
    1740:	98 8b       	std	Y+16, r25	; 0x10
    1742:	8f 87       	std	Y+15, r24	; 0x0f
				Config_Struct.LCD_E, DIO_PIN_LOW);
		_delay_ms(2);
		DIO_u8SetPinValue(Config_Struct.LCD_Control_port_Reg,
    1744:	80 91 ab 00 	lds	r24, 0x00AB
    1748:	90 91 ae 00 	lds	r25, 0x00AE
    174c:	69 2f       	mov	r22, r25
    174e:	41 e0       	ldi	r20, 0x01	; 1
    1750:	0e 94 84 07 	call	0xf08	; 0xf08 <DIO_u8SetPinValue>
				Config_Struct.LCD_E, DIO_PIN_HIGH);

		API_Status = EXIT_SUCCEED;
    1754:	81 e0       	ldi	r24, 0x01	; 1
    1756:	8e ab       	std	Y+54, r24	; 0x36
    1758:	93 c0       	rjmp	.+294    	; 0x1880 <LCD_u8SendCommand+0x47c>
		break;
	case LCD_8Bit_Mode:

		/* Set 1 on E (E is HIGH) */
		DIO_u8SetPinValue(Config_Struct.LCD_Control_port_Reg,
    175a:	80 91 ab 00 	lds	r24, 0x00AB
    175e:	90 91 ae 00 	lds	r25, 0x00AE
    1762:	69 2f       	mov	r22, r25
    1764:	41 e0       	ldi	r20, 0x01	; 1
    1766:	0e 94 84 07 	call	0xf08	; 0xf08 <DIO_u8SetPinValue>
				Config_Struct.LCD_E, DIO_PIN_HIGH);
		DIO_u8SetPortValue(Config_Struct.LCD_Data_Port_Reg, Copy_u8Command);
    176a:	80 91 aa 00 	lds	r24, 0x00AA
    176e:	6f a9       	ldd	r22, Y+55	; 0x37
    1770:	0e 94 90 06 	call	0xd20	; 0xd20 <DIO_u8SetPortValue>
		DIO_u8SetPinValue(Config_Struct.LCD_Control_port_Reg,
    1774:	80 91 ab 00 	lds	r24, 0x00AB
    1778:	90 91 ae 00 	lds	r25, 0x00AE
    177c:	69 2f       	mov	r22, r25
    177e:	40 e0       	ldi	r20, 0x00	; 0
    1780:	0e 94 84 07 	call	0xf08	; 0xf08 <DIO_u8SetPinValue>
    1784:	80 e0       	ldi	r24, 0x00	; 0
    1786:	90 e0       	ldi	r25, 0x00	; 0
    1788:	a0 e0       	ldi	r26, 0x00	; 0
    178a:	b0 e4       	ldi	r27, 0x40	; 64
    178c:	8b 87       	std	Y+11, r24	; 0x0b
    178e:	9c 87       	std	Y+12, r25	; 0x0c
    1790:	ad 87       	std	Y+13, r26	; 0x0d
    1792:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1794:	6b 85       	ldd	r22, Y+11	; 0x0b
    1796:	7c 85       	ldd	r23, Y+12	; 0x0c
    1798:	8d 85       	ldd	r24, Y+13	; 0x0d
    179a:	9e 85       	ldd	r25, Y+14	; 0x0e
    179c:	20 e0       	ldi	r18, 0x00	; 0
    179e:	30 e0       	ldi	r19, 0x00	; 0
    17a0:	4a ef       	ldi	r20, 0xFA	; 250
    17a2:	54 e4       	ldi	r21, 0x44	; 68
    17a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17a8:	dc 01       	movw	r26, r24
    17aa:	cb 01       	movw	r24, r22
    17ac:	8f 83       	std	Y+7, r24	; 0x07
    17ae:	98 87       	std	Y+8, r25	; 0x08
    17b0:	a9 87       	std	Y+9, r26	; 0x09
    17b2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    17b4:	6f 81       	ldd	r22, Y+7	; 0x07
    17b6:	78 85       	ldd	r23, Y+8	; 0x08
    17b8:	89 85       	ldd	r24, Y+9	; 0x09
    17ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    17bc:	20 e0       	ldi	r18, 0x00	; 0
    17be:	30 e0       	ldi	r19, 0x00	; 0
    17c0:	40 e8       	ldi	r20, 0x80	; 128
    17c2:	5f e3       	ldi	r21, 0x3F	; 63
    17c4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    17c8:	88 23       	and	r24, r24
    17ca:	2c f4       	brge	.+10     	; 0x17d6 <LCD_u8SendCommand+0x3d2>
		__ticks = 1;
    17cc:	81 e0       	ldi	r24, 0x01	; 1
    17ce:	90 e0       	ldi	r25, 0x00	; 0
    17d0:	9e 83       	std	Y+6, r25	; 0x06
    17d2:	8d 83       	std	Y+5, r24	; 0x05
    17d4:	3f c0       	rjmp	.+126    	; 0x1854 <LCD_u8SendCommand+0x450>
	else if (__tmp > 65535)
    17d6:	6f 81       	ldd	r22, Y+7	; 0x07
    17d8:	78 85       	ldd	r23, Y+8	; 0x08
    17da:	89 85       	ldd	r24, Y+9	; 0x09
    17dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    17de:	20 e0       	ldi	r18, 0x00	; 0
    17e0:	3f ef       	ldi	r19, 0xFF	; 255
    17e2:	4f e7       	ldi	r20, 0x7F	; 127
    17e4:	57 e4       	ldi	r21, 0x47	; 71
    17e6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    17ea:	18 16       	cp	r1, r24
    17ec:	4c f5       	brge	.+82     	; 0x1840 <LCD_u8SendCommand+0x43c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17ee:	6b 85       	ldd	r22, Y+11	; 0x0b
    17f0:	7c 85       	ldd	r23, Y+12	; 0x0c
    17f2:	8d 85       	ldd	r24, Y+13	; 0x0d
    17f4:	9e 85       	ldd	r25, Y+14	; 0x0e
    17f6:	20 e0       	ldi	r18, 0x00	; 0
    17f8:	30 e0       	ldi	r19, 0x00	; 0
    17fa:	40 e2       	ldi	r20, 0x20	; 32
    17fc:	51 e4       	ldi	r21, 0x41	; 65
    17fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1802:	dc 01       	movw	r26, r24
    1804:	cb 01       	movw	r24, r22
    1806:	bc 01       	movw	r22, r24
    1808:	cd 01       	movw	r24, r26
    180a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    180e:	dc 01       	movw	r26, r24
    1810:	cb 01       	movw	r24, r22
    1812:	9e 83       	std	Y+6, r25	; 0x06
    1814:	8d 83       	std	Y+5, r24	; 0x05
    1816:	0f c0       	rjmp	.+30     	; 0x1836 <LCD_u8SendCommand+0x432>
    1818:	88 ec       	ldi	r24, 0xC8	; 200
    181a:	90 e0       	ldi	r25, 0x00	; 0
    181c:	9c 83       	std	Y+4, r25	; 0x04
    181e:	8b 83       	std	Y+3, r24	; 0x03
    1820:	8b 81       	ldd	r24, Y+3	; 0x03
    1822:	9c 81       	ldd	r25, Y+4	; 0x04
    1824:	01 97       	sbiw	r24, 0x01	; 1
    1826:	f1 f7       	brne	.-4      	; 0x1824 <LCD_u8SendCommand+0x420>
    1828:	9c 83       	std	Y+4, r25	; 0x04
    182a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    182c:	8d 81       	ldd	r24, Y+5	; 0x05
    182e:	9e 81       	ldd	r25, Y+6	; 0x06
    1830:	01 97       	sbiw	r24, 0x01	; 1
    1832:	9e 83       	std	Y+6, r25	; 0x06
    1834:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1836:	8d 81       	ldd	r24, Y+5	; 0x05
    1838:	9e 81       	ldd	r25, Y+6	; 0x06
    183a:	00 97       	sbiw	r24, 0x00	; 0
    183c:	69 f7       	brne	.-38     	; 0x1818 <LCD_u8SendCommand+0x414>
    183e:	14 c0       	rjmp	.+40     	; 0x1868 <LCD_u8SendCommand+0x464>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1840:	6f 81       	ldd	r22, Y+7	; 0x07
    1842:	78 85       	ldd	r23, Y+8	; 0x08
    1844:	89 85       	ldd	r24, Y+9	; 0x09
    1846:	9a 85       	ldd	r25, Y+10	; 0x0a
    1848:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    184c:	dc 01       	movw	r26, r24
    184e:	cb 01       	movw	r24, r22
    1850:	9e 83       	std	Y+6, r25	; 0x06
    1852:	8d 83       	std	Y+5, r24	; 0x05
    1854:	8d 81       	ldd	r24, Y+5	; 0x05
    1856:	9e 81       	ldd	r25, Y+6	; 0x06
    1858:	9a 83       	std	Y+2, r25	; 0x02
    185a:	89 83       	std	Y+1, r24	; 0x01
    185c:	89 81       	ldd	r24, Y+1	; 0x01
    185e:	9a 81       	ldd	r25, Y+2	; 0x02
    1860:	01 97       	sbiw	r24, 0x01	; 1
    1862:	f1 f7       	brne	.-4      	; 0x1860 <LCD_u8SendCommand+0x45c>
    1864:	9a 83       	std	Y+2, r25	; 0x02
    1866:	89 83       	std	Y+1, r24	; 0x01
				Config_Struct.LCD_E, DIO_PIN_LOW);
		_delay_ms(2);
		DIO_u8SetPinValue(Config_Struct.LCD_Control_port_Reg,
    1868:	80 91 ab 00 	lds	r24, 0x00AB
    186c:	90 91 ae 00 	lds	r25, 0x00AE
    1870:	69 2f       	mov	r22, r25
    1872:	41 e0       	ldi	r20, 0x01	; 1
    1874:	0e 94 84 07 	call	0xf08	; 0xf08 <DIO_u8SetPinValue>
				Config_Struct.LCD_E, DIO_PIN_HIGH);
		API_Status = EXIT_SUCCEED;
    1878:	81 e0       	ldi	r24, 0x01	; 1
    187a:	8e ab       	std	Y+54, r24	; 0x36
    187c:	01 c0       	rjmp	.+2      	; 0x1880 <LCD_u8SendCommand+0x47c>
		break;

	default:
		API_Status = EXIT_FAILED;
    187e:	1e aa       	std	Y+54, r1	; 0x36
		break;
	}

	return API_Status;
    1880:	8e a9       	ldd	r24, Y+54	; 0x36
}
    1882:	e9 96       	adiw	r28, 0x39	; 57
    1884:	0f b6       	in	r0, 0x3f	; 63
    1886:	f8 94       	cli
    1888:	de bf       	out	0x3e, r29	; 62
    188a:	0f be       	out	0x3f, r0	; 63
    188c:	cd bf       	out	0x3d, r28	; 61
    188e:	cf 91       	pop	r28
    1890:	df 91       	pop	r29
    1892:	08 95       	ret

00001894 <LCD_u8SendCharCp>:
 * LCD Send Character to send the required character to be displayed in the current position
 * Input: Required Character
 * Output:Nothing
 *
 */
u8 LCD_u8SendCharCp(u8 Copy_u8Char) {
    1894:	df 93       	push	r29
    1896:	cf 93       	push	r28
    1898:	cd b7       	in	r28, 0x3d	; 61
    189a:	de b7       	in	r29, 0x3e	; 62
    189c:	a1 97       	sbiw	r28, 0x21	; 33
    189e:	0f b6       	in	r0, 0x3f	; 63
    18a0:	f8 94       	cli
    18a2:	de bf       	out	0x3e, r29	; 62
    18a4:	0f be       	out	0x3f, r0	; 63
    18a6:	cd bf       	out	0x3d, r28	; 61
    18a8:	8f 8f       	std	Y+31, r24	; 0x1f
	u8 API_Status = EXIT_FAILED;
    18aa:	1e 8e       	std	Y+30, r1	; 0x1e
	u8 localByte = 0x00;
    18ac:	1d 8e       	std	Y+29, r1	; 0x1d
	DIO_u8SetPinValue(Config_Struct.LCD_Control_port_Reg, Config_Struct.LCD_RS,
    18ae:	80 91 ab 00 	lds	r24, 0x00AB
    18b2:	90 91 ac 00 	lds	r25, 0x00AC
    18b6:	69 2f       	mov	r22, r25
    18b8:	41 e0       	ldi	r20, 0x01	; 1
    18ba:	0e 94 84 07 	call	0xf08	; 0xf08 <DIO_u8SetPinValue>
	DIO_PIN_HIGH);
	DIO_u8SetPinValue(Config_Struct.LCD_Control_port_Reg, Config_Struct.LCD_RW,
    18be:	80 91 ab 00 	lds	r24, 0x00AB
    18c2:	90 91 ad 00 	lds	r25, 0x00AD
    18c6:	69 2f       	mov	r22, r25
    18c8:	40 e0       	ldi	r20, 0x00	; 0
    18ca:	0e 94 84 07 	call	0xf08	; 0xf08 <DIO_u8SetPinValue>
	DIO_PIN_LOW);
	switch (Config_Struct.LCD_Mode) {
    18ce:	80 91 af 00 	lds	r24, 0x00AF
    18d2:	28 2f       	mov	r18, r24
    18d4:	30 e0       	ldi	r19, 0x00	; 0
    18d6:	39 a3       	std	Y+33, r19	; 0x21
    18d8:	28 a3       	std	Y+32, r18	; 0x20
    18da:	88 a1       	ldd	r24, Y+32	; 0x20
    18dc:	99 a1       	ldd	r25, Y+33	; 0x21
    18de:	84 30       	cpi	r24, 0x04	; 4
    18e0:	91 05       	cpc	r25, r1
    18e2:	39 f0       	breq	.+14     	; 0x18f2 <LCD_u8SendCharCp+0x5e>
    18e4:	28 a1       	ldd	r18, Y+32	; 0x20
    18e6:	39 a1       	ldd	r19, Y+33	; 0x21
    18e8:	28 30       	cpi	r18, 0x08	; 8
    18ea:	31 05       	cpc	r19, r1
    18ec:	09 f4       	brne	.+2      	; 0x18f0 <LCD_u8SendCharCp+0x5c>
    18ee:	bf c0       	rjmp	.+382    	; 0x1a6e <LCD_u8SendCharCp+0x1da>
    18f0:	50 c1       	rjmp	.+672    	; 0x1b92 <LCD_u8SendCharCp+0x2fe>

	case LCD_4Bit_Mode:
		localByte = (Config_Struct.LCD_Data_Port_Reg & 0x0F) | (Copy_u8Char & 0xF0);
    18f2:	80 91 aa 00 	lds	r24, 0x00AA
    18f6:	98 2f       	mov	r25, r24
    18f8:	9f 70       	andi	r25, 0x0F	; 15
    18fa:	8f 8d       	ldd	r24, Y+31	; 0x1f
    18fc:	80 7f       	andi	r24, 0xF0	; 240
    18fe:	89 2b       	or	r24, r25
    1900:	8d 8f       	std	Y+29, r24	; 0x1d
		/* E is High */
		DIO_u8SetPinValue(Config_Struct.LCD_Control_port_Reg,
    1902:	80 91 ab 00 	lds	r24, 0x00AB
    1906:	90 91 ae 00 	lds	r25, 0x00AE
    190a:	69 2f       	mov	r22, r25
    190c:	41 e0       	ldi	r20, 0x01	; 1
    190e:	0e 94 84 07 	call	0xf08	; 0xf08 <DIO_u8SetPinValue>
				Config_Struct.LCD_E, DIO_PIN_HIGH);
		DIO_u8SetPortValue(Config_Struct.LCD_Data_Port_Reg, localByte);
    1912:	80 91 aa 00 	lds	r24, 0x00AA
    1916:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1918:	0e 94 90 06 	call	0xd20	; 0xd20 <DIO_u8SetPortValue>
		/* E is LOW */
		DIO_u8SetPinValue(Config_Struct.LCD_Control_port_Reg,
    191c:	80 91 ab 00 	lds	r24, 0x00AB
    1920:	90 91 ae 00 	lds	r25, 0x00AE
    1924:	69 2f       	mov	r22, r25
    1926:	40 e0       	ldi	r20, 0x00	; 0
    1928:	0e 94 84 07 	call	0xf08	; 0xf08 <DIO_u8SetPinValue>
				Config_Struct.LCD_E, DIO_PIN_LOW);

		localByte = (Config_Struct.LCD_Data_Port_Reg & 0x0F) | (Copy_u8Char << 4);
    192c:	80 91 aa 00 	lds	r24, 0x00AA
    1930:	28 2f       	mov	r18, r24
    1932:	2f 70       	andi	r18, 0x0F	; 15
    1934:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1936:	88 2f       	mov	r24, r24
    1938:	90 e0       	ldi	r25, 0x00	; 0
    193a:	82 95       	swap	r24
    193c:	92 95       	swap	r25
    193e:	90 7f       	andi	r25, 0xF0	; 240
    1940:	98 27       	eor	r25, r24
    1942:	80 7f       	andi	r24, 0xF0	; 240
    1944:	98 27       	eor	r25, r24
    1946:	82 2b       	or	r24, r18
    1948:	8d 8f       	std	Y+29, r24	; 0x1d
		/* E is High */

		DIO_u8SetPinValue(Config_Struct.LCD_Control_port_Reg,
    194a:	80 91 ab 00 	lds	r24, 0x00AB
    194e:	90 91 ae 00 	lds	r25, 0x00AE
    1952:	69 2f       	mov	r22, r25
    1954:	41 e0       	ldi	r20, 0x01	; 1
    1956:	0e 94 84 07 	call	0xf08	; 0xf08 <DIO_u8SetPinValue>
				Config_Struct.LCD_E, DIO_PIN_HIGH);
		DIO_u8SetPortValue(Config_Struct.LCD_Data_Port_Reg, localByte);
    195a:	80 91 aa 00 	lds	r24, 0x00AA
    195e:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1960:	0e 94 90 06 	call	0xd20	; 0xd20 <DIO_u8SetPortValue>
		/* E is LOW */
		DIO_u8SetPinValue(Config_Struct.LCD_Control_port_Reg,
    1964:	80 91 ab 00 	lds	r24, 0x00AB
    1968:	90 91 ae 00 	lds	r25, 0x00AE
    196c:	69 2f       	mov	r22, r25
    196e:	40 e0       	ldi	r20, 0x00	; 0
    1970:	0e 94 84 07 	call	0xf08	; 0xf08 <DIO_u8SetPinValue>
    1974:	80 e0       	ldi	r24, 0x00	; 0
    1976:	90 e0       	ldi	r25, 0x00	; 0
    1978:	a0 e0       	ldi	r26, 0x00	; 0
    197a:	b0 e4       	ldi	r27, 0x40	; 64
    197c:	89 8f       	std	Y+25, r24	; 0x19
    197e:	9a 8f       	std	Y+26, r25	; 0x1a
    1980:	ab 8f       	std	Y+27, r26	; 0x1b
    1982:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1984:	69 8d       	ldd	r22, Y+25	; 0x19
    1986:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1988:	8b 8d       	ldd	r24, Y+27	; 0x1b
    198a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    198c:	20 e0       	ldi	r18, 0x00	; 0
    198e:	30 e0       	ldi	r19, 0x00	; 0
    1990:	4a ef       	ldi	r20, 0xFA	; 250
    1992:	54 e4       	ldi	r21, 0x44	; 68
    1994:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1998:	dc 01       	movw	r26, r24
    199a:	cb 01       	movw	r24, r22
    199c:	8d 8b       	std	Y+21, r24	; 0x15
    199e:	9e 8b       	std	Y+22, r25	; 0x16
    19a0:	af 8b       	std	Y+23, r26	; 0x17
    19a2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    19a4:	6d 89       	ldd	r22, Y+21	; 0x15
    19a6:	7e 89       	ldd	r23, Y+22	; 0x16
    19a8:	8f 89       	ldd	r24, Y+23	; 0x17
    19aa:	98 8d       	ldd	r25, Y+24	; 0x18
    19ac:	20 e0       	ldi	r18, 0x00	; 0
    19ae:	30 e0       	ldi	r19, 0x00	; 0
    19b0:	40 e8       	ldi	r20, 0x80	; 128
    19b2:	5f e3       	ldi	r21, 0x3F	; 63
    19b4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    19b8:	88 23       	and	r24, r24
    19ba:	2c f4       	brge	.+10     	; 0x19c6 <LCD_u8SendCharCp+0x132>
		__ticks = 1;
    19bc:	81 e0       	ldi	r24, 0x01	; 1
    19be:	90 e0       	ldi	r25, 0x00	; 0
    19c0:	9c 8b       	std	Y+20, r25	; 0x14
    19c2:	8b 8b       	std	Y+19, r24	; 0x13
    19c4:	3f c0       	rjmp	.+126    	; 0x1a44 <LCD_u8SendCharCp+0x1b0>
	else if (__tmp > 65535)
    19c6:	6d 89       	ldd	r22, Y+21	; 0x15
    19c8:	7e 89       	ldd	r23, Y+22	; 0x16
    19ca:	8f 89       	ldd	r24, Y+23	; 0x17
    19cc:	98 8d       	ldd	r25, Y+24	; 0x18
    19ce:	20 e0       	ldi	r18, 0x00	; 0
    19d0:	3f ef       	ldi	r19, 0xFF	; 255
    19d2:	4f e7       	ldi	r20, 0x7F	; 127
    19d4:	57 e4       	ldi	r21, 0x47	; 71
    19d6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    19da:	18 16       	cp	r1, r24
    19dc:	4c f5       	brge	.+82     	; 0x1a30 <LCD_u8SendCharCp+0x19c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19de:	69 8d       	ldd	r22, Y+25	; 0x19
    19e0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    19e2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    19e4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    19e6:	20 e0       	ldi	r18, 0x00	; 0
    19e8:	30 e0       	ldi	r19, 0x00	; 0
    19ea:	40 e2       	ldi	r20, 0x20	; 32
    19ec:	51 e4       	ldi	r21, 0x41	; 65
    19ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19f2:	dc 01       	movw	r26, r24
    19f4:	cb 01       	movw	r24, r22
    19f6:	bc 01       	movw	r22, r24
    19f8:	cd 01       	movw	r24, r26
    19fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19fe:	dc 01       	movw	r26, r24
    1a00:	cb 01       	movw	r24, r22
    1a02:	9c 8b       	std	Y+20, r25	; 0x14
    1a04:	8b 8b       	std	Y+19, r24	; 0x13
    1a06:	0f c0       	rjmp	.+30     	; 0x1a26 <LCD_u8SendCharCp+0x192>
    1a08:	88 ec       	ldi	r24, 0xC8	; 200
    1a0a:	90 e0       	ldi	r25, 0x00	; 0
    1a0c:	9a 8b       	std	Y+18, r25	; 0x12
    1a0e:	89 8b       	std	Y+17, r24	; 0x11
    1a10:	89 89       	ldd	r24, Y+17	; 0x11
    1a12:	9a 89       	ldd	r25, Y+18	; 0x12
    1a14:	01 97       	sbiw	r24, 0x01	; 1
    1a16:	f1 f7       	brne	.-4      	; 0x1a14 <LCD_u8SendCharCp+0x180>
    1a18:	9a 8b       	std	Y+18, r25	; 0x12
    1a1a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a1c:	8b 89       	ldd	r24, Y+19	; 0x13
    1a1e:	9c 89       	ldd	r25, Y+20	; 0x14
    1a20:	01 97       	sbiw	r24, 0x01	; 1
    1a22:	9c 8b       	std	Y+20, r25	; 0x14
    1a24:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a26:	8b 89       	ldd	r24, Y+19	; 0x13
    1a28:	9c 89       	ldd	r25, Y+20	; 0x14
    1a2a:	00 97       	sbiw	r24, 0x00	; 0
    1a2c:	69 f7       	brne	.-38     	; 0x1a08 <LCD_u8SendCharCp+0x174>
    1a2e:	14 c0       	rjmp	.+40     	; 0x1a58 <LCD_u8SendCharCp+0x1c4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a30:	6d 89       	ldd	r22, Y+21	; 0x15
    1a32:	7e 89       	ldd	r23, Y+22	; 0x16
    1a34:	8f 89       	ldd	r24, Y+23	; 0x17
    1a36:	98 8d       	ldd	r25, Y+24	; 0x18
    1a38:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a3c:	dc 01       	movw	r26, r24
    1a3e:	cb 01       	movw	r24, r22
    1a40:	9c 8b       	std	Y+20, r25	; 0x14
    1a42:	8b 8b       	std	Y+19, r24	; 0x13
    1a44:	8b 89       	ldd	r24, Y+19	; 0x13
    1a46:	9c 89       	ldd	r25, Y+20	; 0x14
    1a48:	98 8b       	std	Y+16, r25	; 0x10
    1a4a:	8f 87       	std	Y+15, r24	; 0x0f
    1a4c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a4e:	98 89       	ldd	r25, Y+16	; 0x10
    1a50:	01 97       	sbiw	r24, 0x01	; 1
    1a52:	f1 f7       	brne	.-4      	; 0x1a50 <LCD_u8SendCharCp+0x1bc>
    1a54:	98 8b       	std	Y+16, r25	; 0x10
    1a56:	8f 87       	std	Y+15, r24	; 0x0f
				Config_Struct.LCD_E, DIO_PIN_LOW);

		_delay_ms(2);
		/* E is High */
		DIO_u8SetPinValue(Config_Struct.LCD_Control_port_Reg,
    1a58:	80 91 ab 00 	lds	r24, 0x00AB
    1a5c:	90 91 ae 00 	lds	r25, 0x00AE
    1a60:	69 2f       	mov	r22, r25
    1a62:	41 e0       	ldi	r20, 0x01	; 1
    1a64:	0e 94 84 07 	call	0xf08	; 0xf08 <DIO_u8SetPinValue>
				Config_Struct.LCD_E, DIO_PIN_HIGH);
		API_Status = EXIT_SUCCEED;
    1a68:	81 e0       	ldi	r24, 0x01	; 1
    1a6a:	8e 8f       	std	Y+30, r24	; 0x1e
    1a6c:	93 c0       	rjmp	.+294    	; 0x1b94 <LCD_u8SendCharCp+0x300>
		break;
	case LCD_8Bit_Mode:

		/*  (E is HIGH) */
		DIO_u8SetPinValue(Config_Struct.LCD_Control_port_Reg,
    1a6e:	80 91 ab 00 	lds	r24, 0x00AB
    1a72:	90 91 ae 00 	lds	r25, 0x00AE
    1a76:	69 2f       	mov	r22, r25
    1a78:	41 e0       	ldi	r20, 0x01	; 1
    1a7a:	0e 94 84 07 	call	0xf08	; 0xf08 <DIO_u8SetPinValue>
				Config_Struct.LCD_E, DIO_PIN_HIGH);
		DIO_u8SetPortValue(Config_Struct.LCD_Data_Port_Reg, Copy_u8Char);
    1a7e:	80 91 aa 00 	lds	r24, 0x00AA
    1a82:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1a84:	0e 94 90 06 	call	0xd20	; 0xd20 <DIO_u8SetPortValue>
		/* E is LOW */
		DIO_u8SetPinValue(Config_Struct.LCD_Control_port_Reg,
    1a88:	80 91 ab 00 	lds	r24, 0x00AB
    1a8c:	90 91 ae 00 	lds	r25, 0x00AE
    1a90:	69 2f       	mov	r22, r25
    1a92:	40 e0       	ldi	r20, 0x00	; 0
    1a94:	0e 94 84 07 	call	0xf08	; 0xf08 <DIO_u8SetPinValue>
    1a98:	80 e0       	ldi	r24, 0x00	; 0
    1a9a:	90 e0       	ldi	r25, 0x00	; 0
    1a9c:	a0 e0       	ldi	r26, 0x00	; 0
    1a9e:	b0 e4       	ldi	r27, 0x40	; 64
    1aa0:	8b 87       	std	Y+11, r24	; 0x0b
    1aa2:	9c 87       	std	Y+12, r25	; 0x0c
    1aa4:	ad 87       	std	Y+13, r26	; 0x0d
    1aa6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1aa8:	6b 85       	ldd	r22, Y+11	; 0x0b
    1aaa:	7c 85       	ldd	r23, Y+12	; 0x0c
    1aac:	8d 85       	ldd	r24, Y+13	; 0x0d
    1aae:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ab0:	20 e0       	ldi	r18, 0x00	; 0
    1ab2:	30 e0       	ldi	r19, 0x00	; 0
    1ab4:	4a ef       	ldi	r20, 0xFA	; 250
    1ab6:	54 e4       	ldi	r21, 0x44	; 68
    1ab8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1abc:	dc 01       	movw	r26, r24
    1abe:	cb 01       	movw	r24, r22
    1ac0:	8f 83       	std	Y+7, r24	; 0x07
    1ac2:	98 87       	std	Y+8, r25	; 0x08
    1ac4:	a9 87       	std	Y+9, r26	; 0x09
    1ac6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ac8:	6f 81       	ldd	r22, Y+7	; 0x07
    1aca:	78 85       	ldd	r23, Y+8	; 0x08
    1acc:	89 85       	ldd	r24, Y+9	; 0x09
    1ace:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ad0:	20 e0       	ldi	r18, 0x00	; 0
    1ad2:	30 e0       	ldi	r19, 0x00	; 0
    1ad4:	40 e8       	ldi	r20, 0x80	; 128
    1ad6:	5f e3       	ldi	r21, 0x3F	; 63
    1ad8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1adc:	88 23       	and	r24, r24
    1ade:	2c f4       	brge	.+10     	; 0x1aea <LCD_u8SendCharCp+0x256>
		__ticks = 1;
    1ae0:	81 e0       	ldi	r24, 0x01	; 1
    1ae2:	90 e0       	ldi	r25, 0x00	; 0
    1ae4:	9e 83       	std	Y+6, r25	; 0x06
    1ae6:	8d 83       	std	Y+5, r24	; 0x05
    1ae8:	3f c0       	rjmp	.+126    	; 0x1b68 <LCD_u8SendCharCp+0x2d4>
	else if (__tmp > 65535)
    1aea:	6f 81       	ldd	r22, Y+7	; 0x07
    1aec:	78 85       	ldd	r23, Y+8	; 0x08
    1aee:	89 85       	ldd	r24, Y+9	; 0x09
    1af0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1af2:	20 e0       	ldi	r18, 0x00	; 0
    1af4:	3f ef       	ldi	r19, 0xFF	; 255
    1af6:	4f e7       	ldi	r20, 0x7F	; 127
    1af8:	57 e4       	ldi	r21, 0x47	; 71
    1afa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1afe:	18 16       	cp	r1, r24
    1b00:	4c f5       	brge	.+82     	; 0x1b54 <LCD_u8SendCharCp+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b02:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b04:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b06:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b08:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b0a:	20 e0       	ldi	r18, 0x00	; 0
    1b0c:	30 e0       	ldi	r19, 0x00	; 0
    1b0e:	40 e2       	ldi	r20, 0x20	; 32
    1b10:	51 e4       	ldi	r21, 0x41	; 65
    1b12:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b16:	dc 01       	movw	r26, r24
    1b18:	cb 01       	movw	r24, r22
    1b1a:	bc 01       	movw	r22, r24
    1b1c:	cd 01       	movw	r24, r26
    1b1e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b22:	dc 01       	movw	r26, r24
    1b24:	cb 01       	movw	r24, r22
    1b26:	9e 83       	std	Y+6, r25	; 0x06
    1b28:	8d 83       	std	Y+5, r24	; 0x05
    1b2a:	0f c0       	rjmp	.+30     	; 0x1b4a <LCD_u8SendCharCp+0x2b6>
    1b2c:	88 ec       	ldi	r24, 0xC8	; 200
    1b2e:	90 e0       	ldi	r25, 0x00	; 0
    1b30:	9c 83       	std	Y+4, r25	; 0x04
    1b32:	8b 83       	std	Y+3, r24	; 0x03
    1b34:	8b 81       	ldd	r24, Y+3	; 0x03
    1b36:	9c 81       	ldd	r25, Y+4	; 0x04
    1b38:	01 97       	sbiw	r24, 0x01	; 1
    1b3a:	f1 f7       	brne	.-4      	; 0x1b38 <LCD_u8SendCharCp+0x2a4>
    1b3c:	9c 83       	std	Y+4, r25	; 0x04
    1b3e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b40:	8d 81       	ldd	r24, Y+5	; 0x05
    1b42:	9e 81       	ldd	r25, Y+6	; 0x06
    1b44:	01 97       	sbiw	r24, 0x01	; 1
    1b46:	9e 83       	std	Y+6, r25	; 0x06
    1b48:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b4a:	8d 81       	ldd	r24, Y+5	; 0x05
    1b4c:	9e 81       	ldd	r25, Y+6	; 0x06
    1b4e:	00 97       	sbiw	r24, 0x00	; 0
    1b50:	69 f7       	brne	.-38     	; 0x1b2c <LCD_u8SendCharCp+0x298>
    1b52:	14 c0       	rjmp	.+40     	; 0x1b7c <LCD_u8SendCharCp+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b54:	6f 81       	ldd	r22, Y+7	; 0x07
    1b56:	78 85       	ldd	r23, Y+8	; 0x08
    1b58:	89 85       	ldd	r24, Y+9	; 0x09
    1b5a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b5c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b60:	dc 01       	movw	r26, r24
    1b62:	cb 01       	movw	r24, r22
    1b64:	9e 83       	std	Y+6, r25	; 0x06
    1b66:	8d 83       	std	Y+5, r24	; 0x05
    1b68:	8d 81       	ldd	r24, Y+5	; 0x05
    1b6a:	9e 81       	ldd	r25, Y+6	; 0x06
    1b6c:	9a 83       	std	Y+2, r25	; 0x02
    1b6e:	89 83       	std	Y+1, r24	; 0x01
    1b70:	89 81       	ldd	r24, Y+1	; 0x01
    1b72:	9a 81       	ldd	r25, Y+2	; 0x02
    1b74:	01 97       	sbiw	r24, 0x01	; 1
    1b76:	f1 f7       	brne	.-4      	; 0x1b74 <LCD_u8SendCharCp+0x2e0>
    1b78:	9a 83       	std	Y+2, r25	; 0x02
    1b7a:	89 83       	std	Y+1, r24	; 0x01
				Config_Struct.LCD_E, DIO_PIN_LOW);
		_delay_ms(2);
		/* E is High */
		DIO_u8SetPinValue(Config_Struct.LCD_Control_port_Reg,
    1b7c:	80 91 ab 00 	lds	r24, 0x00AB
    1b80:	90 91 ae 00 	lds	r25, 0x00AE
    1b84:	69 2f       	mov	r22, r25
    1b86:	41 e0       	ldi	r20, 0x01	; 1
    1b88:	0e 94 84 07 	call	0xf08	; 0xf08 <DIO_u8SetPinValue>
				Config_Struct.LCD_E, DIO_PIN_HIGH);
		API_Status = EXIT_SUCCEED;
    1b8c:	81 e0       	ldi	r24, 0x01	; 1
    1b8e:	8e 8f       	std	Y+30, r24	; 0x1e
    1b90:	01 c0       	rjmp	.+2      	; 0x1b94 <LCD_u8SendCharCp+0x300>
		break;
	default:
		API_Status = EXIT_FAILED;
    1b92:	1e 8e       	std	Y+30, r1	; 0x1e
		break;
	}

	return API_Status;
    1b94:	8e 8d       	ldd	r24, Y+30	; 0x1e
}
    1b96:	a1 96       	adiw	r28, 0x21	; 33
    1b98:	0f b6       	in	r0, 0x3f	; 63
    1b9a:	f8 94       	cli
    1b9c:	de bf       	out	0x3e, r29	; 62
    1b9e:	0f be       	out	0x3f, r0	; 63
    1ba0:	cd bf       	out	0x3d, r28	; 61
    1ba2:	cf 91       	pop	r28
    1ba4:	df 91       	pop	r29
    1ba6:	08 95       	ret

00001ba8 <LCD_u8SendTextCp>:
 * LCD Send Text to send the required String to be displayed in the current position
 * Input: Array Of Character
 * Output:Nothing
 *
 */
u8 LCD_u8SendTextCp(u8 *Copy_u8Str) {
    1ba8:	df 93       	push	r29
    1baa:	cf 93       	push	r28
    1bac:	00 d0       	rcall	.+0      	; 0x1bae <LCD_u8SendTextCp+0x6>
    1bae:	00 d0       	rcall	.+0      	; 0x1bb0 <LCD_u8SendTextCp+0x8>
    1bb0:	cd b7       	in	r28, 0x3d	; 61
    1bb2:	de b7       	in	r29, 0x3e	; 62
    1bb4:	9c 83       	std	Y+4, r25	; 0x04
    1bb6:	8b 83       	std	Y+3, r24	; 0x03

	u8 API_Status = EXIT_FAILED;
    1bb8:	1a 82       	std	Y+2, r1	; 0x02
	u8 local_u8Counter = 0 ;
    1bba:	19 82       	std	Y+1, r1	; 0x01
    1bbc:	0e c0       	rjmp	.+28     	; 0x1bda <LCD_u8SendTextCp+0x32>
	while(Copy_u8Str[local_u8Counter] != 0) /* 0 Represents NULL Character  */
	{
		LCD_u8SendCharCp(Copy_u8Str[local_u8Counter]) ;
    1bbe:	89 81       	ldd	r24, Y+1	; 0x01
    1bc0:	28 2f       	mov	r18, r24
    1bc2:	30 e0       	ldi	r19, 0x00	; 0
    1bc4:	8b 81       	ldd	r24, Y+3	; 0x03
    1bc6:	9c 81       	ldd	r25, Y+4	; 0x04
    1bc8:	fc 01       	movw	r30, r24
    1bca:	e2 0f       	add	r30, r18
    1bcc:	f3 1f       	adc	r31, r19
    1bce:	80 81       	ld	r24, Z
    1bd0:	0e 94 4a 0c 	call	0x1894	; 0x1894 <LCD_u8SendCharCp>
		++local_u8Counter ;
    1bd4:	89 81       	ldd	r24, Y+1	; 0x01
    1bd6:	8f 5f       	subi	r24, 0xFF	; 255
    1bd8:	89 83       	std	Y+1, r24	; 0x01
 */
u8 LCD_u8SendTextCp(u8 *Copy_u8Str) {

	u8 API_Status = EXIT_FAILED;
	u8 local_u8Counter = 0 ;
	while(Copy_u8Str[local_u8Counter] != 0) /* 0 Represents NULL Character  */
    1bda:	89 81       	ldd	r24, Y+1	; 0x01
    1bdc:	28 2f       	mov	r18, r24
    1bde:	30 e0       	ldi	r19, 0x00	; 0
    1be0:	8b 81       	ldd	r24, Y+3	; 0x03
    1be2:	9c 81       	ldd	r25, Y+4	; 0x04
    1be4:	fc 01       	movw	r30, r24
    1be6:	e2 0f       	add	r30, r18
    1be8:	f3 1f       	adc	r31, r19
    1bea:	80 81       	ld	r24, Z
    1bec:	88 23       	and	r24, r24
    1bee:	39 f7       	brne	.-50     	; 0x1bbe <LCD_u8SendTextCp+0x16>
	{
		LCD_u8SendCharCp(Copy_u8Str[local_u8Counter]) ;
		++local_u8Counter ;
	}

	return API_Status;
    1bf0:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1bf2:	0f 90       	pop	r0
    1bf4:	0f 90       	pop	r0
    1bf6:	0f 90       	pop	r0
    1bf8:	0f 90       	pop	r0
    1bfa:	cf 91       	pop	r28
    1bfc:	df 91       	pop	r29
    1bfe:	08 95       	ret

00001c00 <LCD_u8GotoX_Y>:
 * LCD Goto X , Y : This function make the cursor to be placed in a specified location
 * Input: X Row , Y Column
 * Output:Nothing
 *
 */
u8 LCD_u8GotoX_Y(u8 Copy_u8Row, u8 Copy_u8Column) {
    1c00:	df 93       	push	r29
    1c02:	cf 93       	push	r28
    1c04:	00 d0       	rcall	.+0      	; 0x1c06 <LCD_u8GotoX_Y+0x6>
    1c06:	00 d0       	rcall	.+0      	; 0x1c08 <LCD_u8GotoX_Y+0x8>
    1c08:	0f 92       	push	r0
    1c0a:	cd b7       	in	r28, 0x3d	; 61
    1c0c:	de b7       	in	r29, 0x3e	; 62
    1c0e:	8a 83       	std	Y+2, r24	; 0x02
    1c10:	6b 83       	std	Y+3, r22	; 0x03
	u8 API_Status = EXIT_FAILED;
    1c12:	19 82       	std	Y+1, r1	; 0x01

	if ((Copy_u8Row >= 1 && Copy_u8Row <= 4)
    1c14:	8a 81       	ldd	r24, Y+2	; 0x02
    1c16:	88 23       	and	r24, r24
    1c18:	09 f4       	brne	.+2      	; 0x1c1c <LCD_u8GotoX_Y+0x1c>
    1c1a:	4a c0       	rjmp	.+148    	; 0x1cb0 <LCD_u8GotoX_Y+0xb0>
    1c1c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c1e:	85 30       	cpi	r24, 0x05	; 5
    1c20:	08 f0       	brcs	.+2      	; 0x1c24 <LCD_u8GotoX_Y+0x24>
    1c22:	46 c0       	rjmp	.+140    	; 0x1cb0 <LCD_u8GotoX_Y+0xb0>
    1c24:	8b 81       	ldd	r24, Y+3	; 0x03
    1c26:	88 23       	and	r24, r24
    1c28:	09 f4       	brne	.+2      	; 0x1c2c <LCD_u8GotoX_Y+0x2c>
    1c2a:	42 c0       	rjmp	.+132    	; 0x1cb0 <LCD_u8GotoX_Y+0xb0>
    1c2c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c2e:	81 31       	cpi	r24, 0x11	; 17
    1c30:	08 f0       	brcs	.+2      	; 0x1c34 <LCD_u8GotoX_Y+0x34>
    1c32:	3e c0       	rjmp	.+124    	; 0x1cb0 <LCD_u8GotoX_Y+0xb0>
			&& (Copy_u8Column >= 1 && Copy_u8Column <= 16))
		switch (Copy_u8Row) {
    1c34:	8a 81       	ldd	r24, Y+2	; 0x02
    1c36:	28 2f       	mov	r18, r24
    1c38:	30 e0       	ldi	r19, 0x00	; 0
    1c3a:	3d 83       	std	Y+5, r19	; 0x05
    1c3c:	2c 83       	std	Y+4, r18	; 0x04
    1c3e:	8c 81       	ldd	r24, Y+4	; 0x04
    1c40:	9d 81       	ldd	r25, Y+5	; 0x05
    1c42:	82 30       	cpi	r24, 0x02	; 2
    1c44:	91 05       	cpc	r25, r1
    1c46:	e9 f0       	breq	.+58     	; 0x1c82 <LCD_u8GotoX_Y+0x82>
    1c48:	2c 81       	ldd	r18, Y+4	; 0x04
    1c4a:	3d 81       	ldd	r19, Y+5	; 0x05
    1c4c:	23 30       	cpi	r18, 0x03	; 3
    1c4e:	31 05       	cpc	r19, r1
    1c50:	34 f4       	brge	.+12     	; 0x1c5e <LCD_u8GotoX_Y+0x5e>
    1c52:	8c 81       	ldd	r24, Y+4	; 0x04
    1c54:	9d 81       	ldd	r25, Y+5	; 0x05
    1c56:	81 30       	cpi	r24, 0x01	; 1
    1c58:	91 05       	cpc	r25, r1
    1c5a:	61 f0       	breq	.+24     	; 0x1c74 <LCD_u8GotoX_Y+0x74>
    1c5c:	27 c0       	rjmp	.+78     	; 0x1cac <LCD_u8GotoX_Y+0xac>
    1c5e:	2c 81       	ldd	r18, Y+4	; 0x04
    1c60:	3d 81       	ldd	r19, Y+5	; 0x05
    1c62:	23 30       	cpi	r18, 0x03	; 3
    1c64:	31 05       	cpc	r19, r1
    1c66:	a1 f0       	breq	.+40     	; 0x1c90 <LCD_u8GotoX_Y+0x90>
    1c68:	8c 81       	ldd	r24, Y+4	; 0x04
    1c6a:	9d 81       	ldd	r25, Y+5	; 0x05
    1c6c:	84 30       	cpi	r24, 0x04	; 4
    1c6e:	91 05       	cpc	r25, r1
    1c70:	b1 f0       	breq	.+44     	; 0x1c9e <LCD_u8GotoX_Y+0x9e>
    1c72:	1c c0       	rjmp	.+56     	; 0x1cac <LCD_u8GotoX_Y+0xac>
		case 1:
			LCD_u8SendCommand(LCD_1ST_LINE_BEGGING + Copy_u8Column - 1);
    1c74:	8b 81       	ldd	r24, Y+3	; 0x03
    1c76:	81 58       	subi	r24, 0x81	; 129
    1c78:	0e 94 02 0a 	call	0x1404	; 0x1404 <LCD_u8SendCommand>
			API_Status = EXIT_SUCCEED;
    1c7c:	81 e0       	ldi	r24, 0x01	; 1
    1c7e:	89 83       	std	Y+1, r24	; 0x01
    1c80:	18 c0       	rjmp	.+48     	; 0x1cb2 <LCD_u8GotoX_Y+0xb2>

			break;
		case 2:
			LCD_u8SendCommand(LCD_2ND_LINE_BEGGING + Copy_u8Column - 1);
    1c82:	8b 81       	ldd	r24, Y+3	; 0x03
    1c84:	81 54       	subi	r24, 0x41	; 65
    1c86:	0e 94 02 0a 	call	0x1404	; 0x1404 <LCD_u8SendCommand>
			API_Status = EXIT_SUCCEED;
    1c8a:	81 e0       	ldi	r24, 0x01	; 1
    1c8c:	89 83       	std	Y+1, r24	; 0x01
    1c8e:	11 c0       	rjmp	.+34     	; 0x1cb2 <LCD_u8GotoX_Y+0xb2>

			break;
		case 3:
			LCD_u8SendCommand(LCD_3RD_LINE_BEGGING + Copy_u8Column - 1);
    1c90:	8b 81       	ldd	r24, Y+3	; 0x03
    1c92:	81 57       	subi	r24, 0x71	; 113
    1c94:	0e 94 02 0a 	call	0x1404	; 0x1404 <LCD_u8SendCommand>
			API_Status = EXIT_SUCCEED;
    1c98:	81 e0       	ldi	r24, 0x01	; 1
    1c9a:	89 83       	std	Y+1, r24	; 0x01
    1c9c:	0a c0       	rjmp	.+20     	; 0x1cb2 <LCD_u8GotoX_Y+0xb2>

			break;
		case 4:
			LCD_u8SendCommand(LCD_4TH_LINE_BEGGING + Copy_u8Column - 1);
    1c9e:	8b 81       	ldd	r24, Y+3	; 0x03
    1ca0:	81 53       	subi	r24, 0x31	; 49
    1ca2:	0e 94 02 0a 	call	0x1404	; 0x1404 <LCD_u8SendCommand>
			API_Status = EXIT_SUCCEED;
    1ca6:	81 e0       	ldi	r24, 0x01	; 1
    1ca8:	89 83       	std	Y+1, r24	; 0x01
    1caa:	03 c0       	rjmp	.+6      	; 0x1cb2 <LCD_u8GotoX_Y+0xb2>
			break;
		default:
			API_Status = EXIT_FAILED;
    1cac:	19 82       	std	Y+1, r1	; 0x01
    1cae:	01 c0       	rjmp	.+2      	; 0x1cb2 <LCD_u8GotoX_Y+0xb2>
			break;
		}
	else {
		API_Status = EXIT_FAILED;
    1cb0:	19 82       	std	Y+1, r1	; 0x01
	}

	return API_Status;
    1cb2:	89 81       	ldd	r24, Y+1	; 0x01
}
    1cb4:	0f 90       	pop	r0
    1cb6:	0f 90       	pop	r0
    1cb8:	0f 90       	pop	r0
    1cba:	0f 90       	pop	r0
    1cbc:	0f 90       	pop	r0
    1cbe:	cf 91       	pop	r28
    1cc0:	df 91       	pop	r29
    1cc2:	08 95       	ret

00001cc4 <LCD_u8SendChar>:
 * LCD Send Character to send the required character to be displayed in the specified position
 * Input: Required Character
 * Output:Nothing
 *
 */
u8 LCD_u8SendChar(u8 Copy_u8Row, u8 Copy_u8Column, u8 Copy_u8Data) {
    1cc4:	df 93       	push	r29
    1cc6:	cf 93       	push	r28
    1cc8:	00 d0       	rcall	.+0      	; 0x1cca <LCD_u8SendChar+0x6>
    1cca:	00 d0       	rcall	.+0      	; 0x1ccc <LCD_u8SendChar+0x8>
    1ccc:	cd b7       	in	r28, 0x3d	; 61
    1cce:	de b7       	in	r29, 0x3e	; 62
    1cd0:	8a 83       	std	Y+2, r24	; 0x02
    1cd2:	6b 83       	std	Y+3, r22	; 0x03
    1cd4:	4c 83       	std	Y+4, r20	; 0x04
	u8 API_Status = EXIT_FAILED;
    1cd6:	19 82       	std	Y+1, r1	; 0x01
	LCD_u8GotoX_Y(Copy_u8Row, Copy_u8Column);
    1cd8:	8a 81       	ldd	r24, Y+2	; 0x02
    1cda:	6b 81       	ldd	r22, Y+3	; 0x03
    1cdc:	0e 94 00 0e 	call	0x1c00	; 0x1c00 <LCD_u8GotoX_Y>
	API_Status = LCD_u8SendCharCp(Copy_u8Data);
    1ce0:	8c 81       	ldd	r24, Y+4	; 0x04
    1ce2:	0e 94 4a 0c 	call	0x1894	; 0x1894 <LCD_u8SendCharCp>
    1ce6:	89 83       	std	Y+1, r24	; 0x01
	return API_Status;
    1ce8:	89 81       	ldd	r24, Y+1	; 0x01
}
    1cea:	0f 90       	pop	r0
    1cec:	0f 90       	pop	r0
    1cee:	0f 90       	pop	r0
    1cf0:	0f 90       	pop	r0
    1cf2:	cf 91       	pop	r28
    1cf4:	df 91       	pop	r29
    1cf6:	08 95       	ret

00001cf8 <LCD_u8SendText>:
 * LCD Send Text to send the required String to be displayed in the specified position
 * Input: Array Of Character
 * Output:Nothing
 *
 */
u8 LCD_u8SendText(u8 Copy_u8Row, u8 Copy_u8Column, u8 *Copy_u8data) {
    1cf8:	df 93       	push	r29
    1cfa:	cf 93       	push	r28
    1cfc:	00 d0       	rcall	.+0      	; 0x1cfe <LCD_u8SendText+0x6>
    1cfe:	00 d0       	rcall	.+0      	; 0x1d00 <LCD_u8SendText+0x8>
    1d00:	0f 92       	push	r0
    1d02:	cd b7       	in	r28, 0x3d	; 61
    1d04:	de b7       	in	r29, 0x3e	; 62
    1d06:	8a 83       	std	Y+2, r24	; 0x02
    1d08:	6b 83       	std	Y+3, r22	; 0x03
    1d0a:	5d 83       	std	Y+5, r21	; 0x05
    1d0c:	4c 83       	std	Y+4, r20	; 0x04
	u8 API_Status = EXIT_FAILED;
    1d0e:	19 82       	std	Y+1, r1	; 0x01
	LCD_u8GotoX_Y(Copy_u8Row, Copy_u8Column);
    1d10:	8a 81       	ldd	r24, Y+2	; 0x02
    1d12:	6b 81       	ldd	r22, Y+3	; 0x03
    1d14:	0e 94 00 0e 	call	0x1c00	; 0x1c00 <LCD_u8GotoX_Y>
	API_Status = LCD_u8SendTextCp(Copy_u8data);
    1d18:	8c 81       	ldd	r24, Y+4	; 0x04
    1d1a:	9d 81       	ldd	r25, Y+5	; 0x05
    1d1c:	0e 94 d4 0d 	call	0x1ba8	; 0x1ba8 <LCD_u8SendTextCp>
    1d20:	89 83       	std	Y+1, r24	; 0x01
	return API_Status;
    1d22:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d24:	0f 90       	pop	r0
    1d26:	0f 90       	pop	r0
    1d28:	0f 90       	pop	r0
    1d2a:	0f 90       	pop	r0
    1d2c:	0f 90       	pop	r0
    1d2e:	cf 91       	pop	r28
    1d30:	df 91       	pop	r29
    1d32:	08 95       	ret

00001d34 <LCD_u8CheckIfBusy>:
/***************************************************************************************************************
 * CheckIfBusy: This function check if the current data can be written or read from LCD at this moment
 * Input: Nothing
 * Output: 0 when it is not busy 1 when it is busy
 */
u8 LCD_u8CheckIfBusy(void) {
    1d34:	df 93       	push	r29
    1d36:	cf 93       	push	r28
    1d38:	0f 92       	push	r0
    1d3a:	cd b7       	in	r28, 0x3d	; 61
    1d3c:	de b7       	in	r29, 0x3e	; 62
	u8 API_Status = EXIT_FAILED;
    1d3e:	19 82       	std	Y+1, r1	; 0x01
	DIO_u8SetPinDirection(Config_Struct.LCD_Data_Port_Reg, PIN7,
    1d40:	80 91 aa 00 	lds	r24, 0x00AA
    1d44:	67 e0       	ldi	r22, 0x07	; 7
    1d46:	40 e0       	ldi	r20, 0x00	; 0
    1d48:	0e 94 04 07 	call	0xe08	; 0xe08 <DIO_u8SetPinDirection>
	DIO_PIN_INPUT);
	DIO_u8SetPinValue(Config_Struct.LCD_Control_port_Reg, Config_Struct.LCD_RW,
    1d4c:	80 91 ab 00 	lds	r24, 0x00AB
    1d50:	90 91 ad 00 	lds	r25, 0x00AD
    1d54:	69 2f       	mov	r22, r25
    1d56:	41 e0       	ldi	r20, 0x01	; 1
    1d58:	0e 94 84 07 	call	0xf08	; 0xf08 <DIO_u8SetPinValue>
	DIO_PIN_HIGH);
	DIO_u8SetPinValue(Config_Struct.LCD_Control_port_Reg, Config_Struct.LCD_RS,
    1d5c:	80 91 ab 00 	lds	r24, 0x00AB
    1d60:	90 91 ac 00 	lds	r25, 0x00AC
    1d64:	69 2f       	mov	r22, r25
    1d66:	40 e0       	ldi	r20, 0x00	; 0
    1d68:	0e 94 84 07 	call	0xf08	; 0xf08 <DIO_u8SetPinValue>
	DIO_PIN_LOW);

	API_Status = DIO_u8GetPinValue(Config_Struct.LCD_Data_Port_Reg, PIN7);
    1d6c:	80 91 aa 00 	lds	r24, 0x00AA
    1d70:	67 e0       	ldi	r22, 0x07	; 7
    1d72:	0e 94 04 08 	call	0x1008	; 0x1008 <DIO_u8GetPinValue>
    1d76:	89 83       	std	Y+1, r24	; 0x01
	/* Reset RW  before Exit */
	DIO_u8SetPinValue(Config_Struct.LCD_Control_port_Reg, Config_Struct.LCD_RW,
    1d78:	80 91 ab 00 	lds	r24, 0x00AB
    1d7c:	90 91 ad 00 	lds	r25, 0x00AD
    1d80:	69 2f       	mov	r22, r25
    1d82:	40 e0       	ldi	r20, 0x00	; 0
    1d84:	0e 94 84 07 	call	0xf08	; 0xf08 <DIO_u8SetPinValue>
	DIO_PIN_LOW);
	return API_Status;
    1d88:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d8a:	0f 90       	pop	r0
    1d8c:	cf 91       	pop	r28
    1d8e:	df 91       	pop	r29
    1d90:	08 95       	ret

00001d92 <LCD_u8GenerateCharacter>:
/***************************************************************************************************************
 * Generate_Character: This function enable the user to generate a custome character
 * Input: Array of character which contain the 7 rows of character pattern and address to where to store this character
 * output: Nothing
 */
u8 LCD_u8GenerateCharacter(u8 Copy_u8Address ,  u8 *Copy_u8CharRows) {
    1d92:	df 93       	push	r29
    1d94:	cf 93       	push	r28
    1d96:	00 d0       	rcall	.+0      	; 0x1d98 <LCD_u8GenerateCharacter+0x6>
    1d98:	00 d0       	rcall	.+0      	; 0x1d9a <LCD_u8GenerateCharacter+0x8>
    1d9a:	0f 92       	push	r0
    1d9c:	cd b7       	in	r28, 0x3d	; 61
    1d9e:	de b7       	in	r29, 0x3e	; 62
    1da0:	8b 83       	std	Y+3, r24	; 0x03
    1da2:	7d 83       	std	Y+5, r23	; 0x05
    1da4:	6c 83       	std	Y+4, r22	; 0x04
	u8 API_Status = EXIT_FAILED;
    1da6:	1a 82       	std	Y+2, r1	; 0x02
	/* Notice that CGRAM is 64 * 8 */
	LCD_u8SendCommand((LCD_CGRAM_START_ADDRESS + (8 * Copy_u8Address)));
    1da8:	8b 81       	ldd	r24, Y+3	; 0x03
    1daa:	88 2f       	mov	r24, r24
    1dac:	90 e0       	ldi	r25, 0x00	; 0
    1dae:	08 96       	adiw	r24, 0x08	; 8
    1db0:	88 0f       	add	r24, r24
    1db2:	99 1f       	adc	r25, r25
    1db4:	88 0f       	add	r24, r24
    1db6:	99 1f       	adc	r25, r25
    1db8:	88 0f       	add	r24, r24
    1dba:	99 1f       	adc	r25, r25
    1dbc:	0e 94 02 0a 	call	0x1404	; 0x1404 <LCD_u8SendCommand>

	/* Set the Eight bytes of  that character */
	for (u8 i = 0; i < 8; i++) {
    1dc0:	19 82       	std	Y+1, r1	; 0x01
    1dc2:	0e c0       	rjmp	.+28     	; 0x1de0 <LCD_u8GenerateCharacter+0x4e>
		LCD_u8SendCharCp(Copy_u8CharRows[i]);
    1dc4:	89 81       	ldd	r24, Y+1	; 0x01
    1dc6:	28 2f       	mov	r18, r24
    1dc8:	30 e0       	ldi	r19, 0x00	; 0
    1dca:	8c 81       	ldd	r24, Y+4	; 0x04
    1dcc:	9d 81       	ldd	r25, Y+5	; 0x05
    1dce:	fc 01       	movw	r30, r24
    1dd0:	e2 0f       	add	r30, r18
    1dd2:	f3 1f       	adc	r31, r19
    1dd4:	80 81       	ld	r24, Z
    1dd6:	0e 94 4a 0c 	call	0x1894	; 0x1894 <LCD_u8SendCharCp>
	u8 API_Status = EXIT_FAILED;
	/* Notice that CGRAM is 64 * 8 */
	LCD_u8SendCommand((LCD_CGRAM_START_ADDRESS + (8 * Copy_u8Address)));

	/* Set the Eight bytes of  that character */
	for (u8 i = 0; i < 8; i++) {
    1dda:	89 81       	ldd	r24, Y+1	; 0x01
    1ddc:	8f 5f       	subi	r24, 0xFF	; 255
    1dde:	89 83       	std	Y+1, r24	; 0x01
    1de0:	89 81       	ldd	r24, Y+1	; 0x01
    1de2:	88 30       	cpi	r24, 0x08	; 8
    1de4:	78 f3       	brcs	.-34     	; 0x1dc4 <LCD_u8GenerateCharacter+0x32>
		LCD_u8SendCharCp(Copy_u8CharRows[i]);
	}
	return API_Status;
    1de6:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1de8:	0f 90       	pop	r0
    1dea:	0f 90       	pop	r0
    1dec:	0f 90       	pop	r0
    1dee:	0f 90       	pop	r0
    1df0:	0f 90       	pop	r0
    1df2:	cf 91       	pop	r28
    1df4:	df 91       	pop	r29
    1df6:	08 95       	ret

00001df8 <main>:
#include "..\APP\BIT_MATH.h"
#include "..\MCAL\DIO_Interface.h"
#include <util/delay.h>
#include "../HAL/LCD.h"

int main(void) {
    1df8:	df 93       	push	r29
    1dfa:	cf 93       	push	r28
    1dfc:	cd b7       	in	r28, 0x3d	; 61
    1dfe:	de b7       	in	r29, 0x3e	; 62
    1e00:	65 97       	sbiw	r28, 0x15	; 21
    1e02:	0f b6       	in	r0, 0x3f	; 63
    1e04:	f8 94       	cli
    1e06:	de bf       	out	0x3e, r29	; 62
    1e08:	0f be       	out	0x3f, r0	; 63
    1e0a:	cd bf       	out	0x3d, r28	; 61

	LCD_Config_t LCD_Config;
	LCD_Config.LCD_Control_port_Reg = DIO_PORTA;
    1e0c:	19 8a       	std	Y+17, r1	; 0x11
	LCD_Config.LCD_Data_Port_Reg = DIO_PORTC;
    1e0e:	82 e0       	ldi	r24, 0x02	; 2
    1e10:	88 8b       	std	Y+16, r24	; 0x10
	LCD_Config.LCD_RS = PIN0;
    1e12:	1a 8a       	std	Y+18, r1	; 0x12
	LCD_Config.LCD_E = PIN1;
    1e14:	81 e0       	ldi	r24, 0x01	; 1
    1e16:	8c 8b       	std	Y+20, r24	; 0x14
	LCD_Config.LCD_RW = PIN2;
    1e18:	82 e0       	ldi	r24, 0x02	; 2
    1e1a:	8b 8b       	std	Y+19, r24	; 0x13
	LCD_Config.LCD_Mode = LCD_8Bit_Mode;
    1e1c:	88 e0       	ldi	r24, 0x08	; 8
    1e1e:	8d 8b       	std	Y+21, r24	; 0x15

	LCD_u8Init(&LCD_Config);
    1e20:	ce 01       	movw	r24, r28
    1e22:	40 96       	adiw	r24, 0x10	; 16
    1e24:	0e 94 ae 08 	call	0x115c	; 0x115c <LCD_u8Init>
	LCD_u8SendCommand(LCD_RETURN_HOME);
    1e28:	82 e0       	ldi	r24, 0x02	; 2
    1e2a:	0e 94 02 0a 	call	0x1404	; 0x1404 <LCD_u8SendCommand>

	u8 num = 0;
    1e2e:	1f 86       	std	Y+15, r1	; 0x0f
	while (1) {

		LCD_u8SendText(1, 1, "Guess the number");
    1e30:	20 e6       	ldi	r18, 0x60	; 96
    1e32:	30 e0       	ldi	r19, 0x00	; 0
    1e34:	81 e0       	ldi	r24, 0x01	; 1
    1e36:	61 e0       	ldi	r22, 0x01	; 1
    1e38:	a9 01       	movw	r20, r18
    1e3a:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <LCD_u8SendText>
		LCD_u8SendText(2, 2, "Num [0-9]");
    1e3e:	21 e7       	ldi	r18, 0x71	; 113
    1e40:	30 e0       	ldi	r19, 0x00	; 0
    1e42:	82 e0       	ldi	r24, 0x02	; 2
    1e44:	62 e0       	ldi	r22, 0x02	; 2
    1e46:	a9 01       	movw	r20, r18
    1e48:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <LCD_u8SendText>

		if (0 == DIO_u8GetPinValue(DIO_PORTB, PIN4)) {
    1e4c:	81 e0       	ldi	r24, 0x01	; 1
    1e4e:	64 e0       	ldi	r22, 0x04	; 4
    1e50:	0e 94 04 08 	call	0x1008	; 0x1008 <DIO_u8GetPinValue>
    1e54:	88 23       	and	r24, r24
    1e56:	61 f7       	brne	.-40     	; 0x1e30 <main+0x38>
			num = 0 + rand() % 9;
    1e58:	0e 94 67 10 	call	0x20ce	; 0x20ce <rand>
    1e5c:	29 e0       	ldi	r18, 0x09	; 9
    1e5e:	30 e0       	ldi	r19, 0x00	; 0
    1e60:	b9 01       	movw	r22, r18
    1e62:	0e 94 b8 0f 	call	0x1f70	; 0x1f70 <__divmodhi4>
    1e66:	8f 87       	std	Y+15, r24	; 0x0f
			LCD_u8SendCommand(LCD_CLEAR);
    1e68:	81 e0       	ldi	r24, 0x01	; 1
    1e6a:	0e 94 02 0a 	call	0x1404	; 0x1404 <LCD_u8SendCommand>
			LCD_u8SendText(2, 2, "Number = ");
    1e6e:	2b e7       	ldi	r18, 0x7B	; 123
    1e70:	30 e0       	ldi	r19, 0x00	; 0
    1e72:	82 e0       	ldi	r24, 0x02	; 2
    1e74:	62 e0       	ldi	r22, 0x02	; 2
    1e76:	a9 01       	movw	r20, r18
    1e78:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <LCD_u8SendText>
			LCD_u8SendCharCp(num + '0');
    1e7c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e7e:	80 5d       	subi	r24, 0xD0	; 208
    1e80:	0e 94 4a 0c 	call	0x1894	; 0x1894 <LCD_u8SendCharCp>
    1e84:	80 e0       	ldi	r24, 0x00	; 0
    1e86:	90 e8       	ldi	r25, 0x80	; 128
    1e88:	ab e3       	ldi	r26, 0x3B	; 59
    1e8a:	b5 e4       	ldi	r27, 0x45	; 69
    1e8c:	8b 87       	std	Y+11, r24	; 0x0b
    1e8e:	9c 87       	std	Y+12, r25	; 0x0c
    1e90:	ad 87       	std	Y+13, r26	; 0x0d
    1e92:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e94:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e96:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e98:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e9a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e9c:	20 e0       	ldi	r18, 0x00	; 0
    1e9e:	30 e0       	ldi	r19, 0x00	; 0
    1ea0:	4a ef       	ldi	r20, 0xFA	; 250
    1ea2:	54 e4       	ldi	r21, 0x44	; 68
    1ea4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ea8:	dc 01       	movw	r26, r24
    1eaa:	cb 01       	movw	r24, r22
    1eac:	8f 83       	std	Y+7, r24	; 0x07
    1eae:	98 87       	std	Y+8, r25	; 0x08
    1eb0:	a9 87       	std	Y+9, r26	; 0x09
    1eb2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1eb4:	6f 81       	ldd	r22, Y+7	; 0x07
    1eb6:	78 85       	ldd	r23, Y+8	; 0x08
    1eb8:	89 85       	ldd	r24, Y+9	; 0x09
    1eba:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ebc:	20 e0       	ldi	r18, 0x00	; 0
    1ebe:	30 e0       	ldi	r19, 0x00	; 0
    1ec0:	40 e8       	ldi	r20, 0x80	; 128
    1ec2:	5f e3       	ldi	r21, 0x3F	; 63
    1ec4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ec8:	88 23       	and	r24, r24
    1eca:	2c f4       	brge	.+10     	; 0x1ed6 <main+0xde>
		__ticks = 1;
    1ecc:	81 e0       	ldi	r24, 0x01	; 1
    1ece:	90 e0       	ldi	r25, 0x00	; 0
    1ed0:	9e 83       	std	Y+6, r25	; 0x06
    1ed2:	8d 83       	std	Y+5, r24	; 0x05
    1ed4:	3f c0       	rjmp	.+126    	; 0x1f54 <main+0x15c>
	else if (__tmp > 65535)
    1ed6:	6f 81       	ldd	r22, Y+7	; 0x07
    1ed8:	78 85       	ldd	r23, Y+8	; 0x08
    1eda:	89 85       	ldd	r24, Y+9	; 0x09
    1edc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ede:	20 e0       	ldi	r18, 0x00	; 0
    1ee0:	3f ef       	ldi	r19, 0xFF	; 255
    1ee2:	4f e7       	ldi	r20, 0x7F	; 127
    1ee4:	57 e4       	ldi	r21, 0x47	; 71
    1ee6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1eea:	18 16       	cp	r1, r24
    1eec:	4c f5       	brge	.+82     	; 0x1f40 <main+0x148>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1eee:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ef0:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ef2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ef4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ef6:	20 e0       	ldi	r18, 0x00	; 0
    1ef8:	30 e0       	ldi	r19, 0x00	; 0
    1efa:	40 e2       	ldi	r20, 0x20	; 32
    1efc:	51 e4       	ldi	r21, 0x41	; 65
    1efe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f02:	dc 01       	movw	r26, r24
    1f04:	cb 01       	movw	r24, r22
    1f06:	bc 01       	movw	r22, r24
    1f08:	cd 01       	movw	r24, r26
    1f0a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f0e:	dc 01       	movw	r26, r24
    1f10:	cb 01       	movw	r24, r22
    1f12:	9e 83       	std	Y+6, r25	; 0x06
    1f14:	8d 83       	std	Y+5, r24	; 0x05
    1f16:	0f c0       	rjmp	.+30     	; 0x1f36 <main+0x13e>
    1f18:	88 ec       	ldi	r24, 0xC8	; 200
    1f1a:	90 e0       	ldi	r25, 0x00	; 0
    1f1c:	9c 83       	std	Y+4, r25	; 0x04
    1f1e:	8b 83       	std	Y+3, r24	; 0x03
    1f20:	8b 81       	ldd	r24, Y+3	; 0x03
    1f22:	9c 81       	ldd	r25, Y+4	; 0x04
    1f24:	01 97       	sbiw	r24, 0x01	; 1
    1f26:	f1 f7       	brne	.-4      	; 0x1f24 <main+0x12c>
    1f28:	9c 83       	std	Y+4, r25	; 0x04
    1f2a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f2c:	8d 81       	ldd	r24, Y+5	; 0x05
    1f2e:	9e 81       	ldd	r25, Y+6	; 0x06
    1f30:	01 97       	sbiw	r24, 0x01	; 1
    1f32:	9e 83       	std	Y+6, r25	; 0x06
    1f34:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f36:	8d 81       	ldd	r24, Y+5	; 0x05
    1f38:	9e 81       	ldd	r25, Y+6	; 0x06
    1f3a:	00 97       	sbiw	r24, 0x00	; 0
    1f3c:	69 f7       	brne	.-38     	; 0x1f18 <main+0x120>
    1f3e:	14 c0       	rjmp	.+40     	; 0x1f68 <main+0x170>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f40:	6f 81       	ldd	r22, Y+7	; 0x07
    1f42:	78 85       	ldd	r23, Y+8	; 0x08
    1f44:	89 85       	ldd	r24, Y+9	; 0x09
    1f46:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f48:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f4c:	dc 01       	movw	r26, r24
    1f4e:	cb 01       	movw	r24, r22
    1f50:	9e 83       	std	Y+6, r25	; 0x06
    1f52:	8d 83       	std	Y+5, r24	; 0x05
    1f54:	8d 81       	ldd	r24, Y+5	; 0x05
    1f56:	9e 81       	ldd	r25, Y+6	; 0x06
    1f58:	9a 83       	std	Y+2, r25	; 0x02
    1f5a:	89 83       	std	Y+1, r24	; 0x01
    1f5c:	89 81       	ldd	r24, Y+1	; 0x01
    1f5e:	9a 81       	ldd	r25, Y+2	; 0x02
    1f60:	01 97       	sbiw	r24, 0x01	; 1
    1f62:	f1 f7       	brne	.-4      	; 0x1f60 <main+0x168>
    1f64:	9a 83       	std	Y+2, r25	; 0x02
    1f66:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(3000);
			LCD_u8SendCommand(LCD_CLEAR) ;
    1f68:	81 e0       	ldi	r24, 0x01	; 1
    1f6a:	0e 94 02 0a 	call	0x1404	; 0x1404 <LCD_u8SendCommand>
    1f6e:	60 cf       	rjmp	.-320    	; 0x1e30 <main+0x38>

00001f70 <__divmodhi4>:
    1f70:	97 fb       	bst	r25, 7
    1f72:	09 2e       	mov	r0, r25
    1f74:	07 26       	eor	r0, r23
    1f76:	0a d0       	rcall	.+20     	; 0x1f8c <__divmodhi4_neg1>
    1f78:	77 fd       	sbrc	r23, 7
    1f7a:	04 d0       	rcall	.+8      	; 0x1f84 <__divmodhi4_neg2>
    1f7c:	0c d0       	rcall	.+24     	; 0x1f96 <__udivmodhi4>
    1f7e:	06 d0       	rcall	.+12     	; 0x1f8c <__divmodhi4_neg1>
    1f80:	00 20       	and	r0, r0
    1f82:	1a f4       	brpl	.+6      	; 0x1f8a <__divmodhi4_exit>

00001f84 <__divmodhi4_neg2>:
    1f84:	70 95       	com	r23
    1f86:	61 95       	neg	r22
    1f88:	7f 4f       	sbci	r23, 0xFF	; 255

00001f8a <__divmodhi4_exit>:
    1f8a:	08 95       	ret

00001f8c <__divmodhi4_neg1>:
    1f8c:	f6 f7       	brtc	.-4      	; 0x1f8a <__divmodhi4_exit>
    1f8e:	90 95       	com	r25
    1f90:	81 95       	neg	r24
    1f92:	9f 4f       	sbci	r25, 0xFF	; 255
    1f94:	08 95       	ret

00001f96 <__udivmodhi4>:
    1f96:	aa 1b       	sub	r26, r26
    1f98:	bb 1b       	sub	r27, r27
    1f9a:	51 e1       	ldi	r21, 0x11	; 17
    1f9c:	07 c0       	rjmp	.+14     	; 0x1fac <__udivmodhi4_ep>

00001f9e <__udivmodhi4_loop>:
    1f9e:	aa 1f       	adc	r26, r26
    1fa0:	bb 1f       	adc	r27, r27
    1fa2:	a6 17       	cp	r26, r22
    1fa4:	b7 07       	cpc	r27, r23
    1fa6:	10 f0       	brcs	.+4      	; 0x1fac <__udivmodhi4_ep>
    1fa8:	a6 1b       	sub	r26, r22
    1faa:	b7 0b       	sbc	r27, r23

00001fac <__udivmodhi4_ep>:
    1fac:	88 1f       	adc	r24, r24
    1fae:	99 1f       	adc	r25, r25
    1fb0:	5a 95       	dec	r21
    1fb2:	a9 f7       	brne	.-22     	; 0x1f9e <__udivmodhi4_loop>
    1fb4:	80 95       	com	r24
    1fb6:	90 95       	com	r25
    1fb8:	bc 01       	movw	r22, r24
    1fba:	cd 01       	movw	r24, r26
    1fbc:	08 95       	ret

00001fbe <__prologue_saves__>:
    1fbe:	2f 92       	push	r2
    1fc0:	3f 92       	push	r3
    1fc2:	4f 92       	push	r4
    1fc4:	5f 92       	push	r5
    1fc6:	6f 92       	push	r6
    1fc8:	7f 92       	push	r7
    1fca:	8f 92       	push	r8
    1fcc:	9f 92       	push	r9
    1fce:	af 92       	push	r10
    1fd0:	bf 92       	push	r11
    1fd2:	cf 92       	push	r12
    1fd4:	df 92       	push	r13
    1fd6:	ef 92       	push	r14
    1fd8:	ff 92       	push	r15
    1fda:	0f 93       	push	r16
    1fdc:	1f 93       	push	r17
    1fde:	cf 93       	push	r28
    1fe0:	df 93       	push	r29
    1fe2:	cd b7       	in	r28, 0x3d	; 61
    1fe4:	de b7       	in	r29, 0x3e	; 62
    1fe6:	ca 1b       	sub	r28, r26
    1fe8:	db 0b       	sbc	r29, r27
    1fea:	0f b6       	in	r0, 0x3f	; 63
    1fec:	f8 94       	cli
    1fee:	de bf       	out	0x3e, r29	; 62
    1ff0:	0f be       	out	0x3f, r0	; 63
    1ff2:	cd bf       	out	0x3d, r28	; 61
    1ff4:	09 94       	ijmp

00001ff6 <__epilogue_restores__>:
    1ff6:	2a 88       	ldd	r2, Y+18	; 0x12
    1ff8:	39 88       	ldd	r3, Y+17	; 0x11
    1ffa:	48 88       	ldd	r4, Y+16	; 0x10
    1ffc:	5f 84       	ldd	r5, Y+15	; 0x0f
    1ffe:	6e 84       	ldd	r6, Y+14	; 0x0e
    2000:	7d 84       	ldd	r7, Y+13	; 0x0d
    2002:	8c 84       	ldd	r8, Y+12	; 0x0c
    2004:	9b 84       	ldd	r9, Y+11	; 0x0b
    2006:	aa 84       	ldd	r10, Y+10	; 0x0a
    2008:	b9 84       	ldd	r11, Y+9	; 0x09
    200a:	c8 84       	ldd	r12, Y+8	; 0x08
    200c:	df 80       	ldd	r13, Y+7	; 0x07
    200e:	ee 80       	ldd	r14, Y+6	; 0x06
    2010:	fd 80       	ldd	r15, Y+5	; 0x05
    2012:	0c 81       	ldd	r16, Y+4	; 0x04
    2014:	1b 81       	ldd	r17, Y+3	; 0x03
    2016:	aa 81       	ldd	r26, Y+2	; 0x02
    2018:	b9 81       	ldd	r27, Y+1	; 0x01
    201a:	ce 0f       	add	r28, r30
    201c:	d1 1d       	adc	r29, r1
    201e:	0f b6       	in	r0, 0x3f	; 63
    2020:	f8 94       	cli
    2022:	de bf       	out	0x3e, r29	; 62
    2024:	0f be       	out	0x3f, r0	; 63
    2026:	cd bf       	out	0x3d, r28	; 61
    2028:	ed 01       	movw	r28, r26
    202a:	08 95       	ret

0000202c <do_rand>:
    202c:	a0 e0       	ldi	r26, 0x00	; 0
    202e:	b0 e0       	ldi	r27, 0x00	; 0
    2030:	ec e1       	ldi	r30, 0x1C	; 28
    2032:	f0 e1       	ldi	r31, 0x10	; 16
    2034:	0c 94 e7 0f 	jmp	0x1fce	; 0x1fce <__prologue_saves__+0x10>
    2038:	ec 01       	movw	r28, r24
    203a:	a8 80       	ld	r10, Y
    203c:	b9 80       	ldd	r11, Y+1	; 0x01
    203e:	ca 80       	ldd	r12, Y+2	; 0x02
    2040:	db 80       	ldd	r13, Y+3	; 0x03
    2042:	a1 14       	cp	r10, r1
    2044:	b1 04       	cpc	r11, r1
    2046:	c1 04       	cpc	r12, r1
    2048:	d1 04       	cpc	r13, r1
    204a:	41 f4       	brne	.+16     	; 0x205c <do_rand+0x30>
    204c:	84 e2       	ldi	r24, 0x24	; 36
    204e:	a8 2e       	mov	r10, r24
    2050:	89 ed       	ldi	r24, 0xD9	; 217
    2052:	b8 2e       	mov	r11, r24
    2054:	8b e5       	ldi	r24, 0x5B	; 91
    2056:	c8 2e       	mov	r12, r24
    2058:	87 e0       	ldi	r24, 0x07	; 7
    205a:	d8 2e       	mov	r13, r24
    205c:	c6 01       	movw	r24, r12
    205e:	b5 01       	movw	r22, r10
    2060:	2d e1       	ldi	r18, 0x1D	; 29
    2062:	33 ef       	ldi	r19, 0xF3	; 243
    2064:	41 e0       	ldi	r20, 0x01	; 1
    2066:	50 e0       	ldi	r21, 0x00	; 0
    2068:	0e 94 96 10 	call	0x212c	; 0x212c <__divmodsi4>
    206c:	27 ea       	ldi	r18, 0xA7	; 167
    206e:	31 e4       	ldi	r19, 0x41	; 65
    2070:	40 e0       	ldi	r20, 0x00	; 0
    2072:	50 e0       	ldi	r21, 0x00	; 0
    2074:	0e 94 77 10 	call	0x20ee	; 0x20ee <__mulsi3>
    2078:	7b 01       	movw	r14, r22
    207a:	8c 01       	movw	r16, r24
    207c:	c6 01       	movw	r24, r12
    207e:	b5 01       	movw	r22, r10
    2080:	2d e1       	ldi	r18, 0x1D	; 29
    2082:	33 ef       	ldi	r19, 0xF3	; 243
    2084:	41 e0       	ldi	r20, 0x01	; 1
    2086:	50 e0       	ldi	r21, 0x00	; 0
    2088:	0e 94 96 10 	call	0x212c	; 0x212c <__divmodsi4>
    208c:	ca 01       	movw	r24, r20
    208e:	b9 01       	movw	r22, r18
    2090:	2c ee       	ldi	r18, 0xEC	; 236
    2092:	34 ef       	ldi	r19, 0xF4	; 244
    2094:	4f ef       	ldi	r20, 0xFF	; 255
    2096:	5f ef       	ldi	r21, 0xFF	; 255
    2098:	0e 94 77 10 	call	0x20ee	; 0x20ee <__mulsi3>
    209c:	6e 0d       	add	r22, r14
    209e:	7f 1d       	adc	r23, r15
    20a0:	80 1f       	adc	r24, r16
    20a2:	91 1f       	adc	r25, r17
    20a4:	97 ff       	sbrs	r25, 7
    20a6:	04 c0       	rjmp	.+8      	; 0x20b0 <do_rand+0x84>
    20a8:	61 50       	subi	r22, 0x01	; 1
    20aa:	70 40       	sbci	r23, 0x00	; 0
    20ac:	80 40       	sbci	r24, 0x00	; 0
    20ae:	90 48       	sbci	r25, 0x80	; 128
    20b0:	68 83       	st	Y, r22
    20b2:	79 83       	std	Y+1, r23	; 0x01
    20b4:	8a 83       	std	Y+2, r24	; 0x02
    20b6:	9b 83       	std	Y+3, r25	; 0x03
    20b8:	9b 01       	movw	r18, r22
    20ba:	3f 77       	andi	r19, 0x7F	; 127
    20bc:	c9 01       	movw	r24, r18
    20be:	cd b7       	in	r28, 0x3d	; 61
    20c0:	de b7       	in	r29, 0x3e	; 62
    20c2:	ea e0       	ldi	r30, 0x0A	; 10
    20c4:	0c 94 03 10 	jmp	0x2006	; 0x2006 <__epilogue_restores__+0x10>

000020c8 <rand_r>:
    20c8:	0e 94 16 10 	call	0x202c	; 0x202c <do_rand>
    20cc:	08 95       	ret

000020ce <rand>:
    20ce:	8d e8       	ldi	r24, 0x8D	; 141
    20d0:	90 e0       	ldi	r25, 0x00	; 0
    20d2:	0e 94 16 10 	call	0x202c	; 0x202c <do_rand>
    20d6:	08 95       	ret

000020d8 <srand>:
    20d8:	a0 e0       	ldi	r26, 0x00	; 0
    20da:	b0 e0       	ldi	r27, 0x00	; 0
    20dc:	80 93 8d 00 	sts	0x008D, r24
    20e0:	90 93 8e 00 	sts	0x008E, r25
    20e4:	a0 93 8f 00 	sts	0x008F, r26
    20e8:	b0 93 90 00 	sts	0x0090, r27
    20ec:	08 95       	ret

000020ee <__mulsi3>:
    20ee:	62 9f       	mul	r22, r18
    20f0:	d0 01       	movw	r26, r0
    20f2:	73 9f       	mul	r23, r19
    20f4:	f0 01       	movw	r30, r0
    20f6:	82 9f       	mul	r24, r18
    20f8:	e0 0d       	add	r30, r0
    20fa:	f1 1d       	adc	r31, r1
    20fc:	64 9f       	mul	r22, r20
    20fe:	e0 0d       	add	r30, r0
    2100:	f1 1d       	adc	r31, r1
    2102:	92 9f       	mul	r25, r18
    2104:	f0 0d       	add	r31, r0
    2106:	83 9f       	mul	r24, r19
    2108:	f0 0d       	add	r31, r0
    210a:	74 9f       	mul	r23, r20
    210c:	f0 0d       	add	r31, r0
    210e:	65 9f       	mul	r22, r21
    2110:	f0 0d       	add	r31, r0
    2112:	99 27       	eor	r25, r25
    2114:	72 9f       	mul	r23, r18
    2116:	b0 0d       	add	r27, r0
    2118:	e1 1d       	adc	r30, r1
    211a:	f9 1f       	adc	r31, r25
    211c:	63 9f       	mul	r22, r19
    211e:	b0 0d       	add	r27, r0
    2120:	e1 1d       	adc	r30, r1
    2122:	f9 1f       	adc	r31, r25
    2124:	bd 01       	movw	r22, r26
    2126:	cf 01       	movw	r24, r30
    2128:	11 24       	eor	r1, r1
    212a:	08 95       	ret

0000212c <__divmodsi4>:
    212c:	97 fb       	bst	r25, 7
    212e:	09 2e       	mov	r0, r25
    2130:	05 26       	eor	r0, r21
    2132:	0e d0       	rcall	.+28     	; 0x2150 <__divmodsi4_neg1>
    2134:	57 fd       	sbrc	r21, 7
    2136:	04 d0       	rcall	.+8      	; 0x2140 <__divmodsi4_neg2>
    2138:	14 d0       	rcall	.+40     	; 0x2162 <__udivmodsi4>
    213a:	0a d0       	rcall	.+20     	; 0x2150 <__divmodsi4_neg1>
    213c:	00 1c       	adc	r0, r0
    213e:	38 f4       	brcc	.+14     	; 0x214e <__divmodsi4_exit>

00002140 <__divmodsi4_neg2>:
    2140:	50 95       	com	r21
    2142:	40 95       	com	r20
    2144:	30 95       	com	r19
    2146:	21 95       	neg	r18
    2148:	3f 4f       	sbci	r19, 0xFF	; 255
    214a:	4f 4f       	sbci	r20, 0xFF	; 255
    214c:	5f 4f       	sbci	r21, 0xFF	; 255

0000214e <__divmodsi4_exit>:
    214e:	08 95       	ret

00002150 <__divmodsi4_neg1>:
    2150:	f6 f7       	brtc	.-4      	; 0x214e <__divmodsi4_exit>
    2152:	90 95       	com	r25
    2154:	80 95       	com	r24
    2156:	70 95       	com	r23
    2158:	61 95       	neg	r22
    215a:	7f 4f       	sbci	r23, 0xFF	; 255
    215c:	8f 4f       	sbci	r24, 0xFF	; 255
    215e:	9f 4f       	sbci	r25, 0xFF	; 255
    2160:	08 95       	ret

00002162 <__udivmodsi4>:
    2162:	a1 e2       	ldi	r26, 0x21	; 33
    2164:	1a 2e       	mov	r1, r26
    2166:	aa 1b       	sub	r26, r26
    2168:	bb 1b       	sub	r27, r27
    216a:	fd 01       	movw	r30, r26
    216c:	0d c0       	rjmp	.+26     	; 0x2188 <__udivmodsi4_ep>

0000216e <__udivmodsi4_loop>:
    216e:	aa 1f       	adc	r26, r26
    2170:	bb 1f       	adc	r27, r27
    2172:	ee 1f       	adc	r30, r30
    2174:	ff 1f       	adc	r31, r31
    2176:	a2 17       	cp	r26, r18
    2178:	b3 07       	cpc	r27, r19
    217a:	e4 07       	cpc	r30, r20
    217c:	f5 07       	cpc	r31, r21
    217e:	20 f0       	brcs	.+8      	; 0x2188 <__udivmodsi4_ep>
    2180:	a2 1b       	sub	r26, r18
    2182:	b3 0b       	sbc	r27, r19
    2184:	e4 0b       	sbc	r30, r20
    2186:	f5 0b       	sbc	r31, r21

00002188 <__udivmodsi4_ep>:
    2188:	66 1f       	adc	r22, r22
    218a:	77 1f       	adc	r23, r23
    218c:	88 1f       	adc	r24, r24
    218e:	99 1f       	adc	r25, r25
    2190:	1a 94       	dec	r1
    2192:	69 f7       	brne	.-38     	; 0x216e <__udivmodsi4_loop>
    2194:	60 95       	com	r22
    2196:	70 95       	com	r23
    2198:	80 95       	com	r24
    219a:	90 95       	com	r25
    219c:	9b 01       	movw	r18, r22
    219e:	ac 01       	movw	r20, r24
    21a0:	bd 01       	movw	r22, r26
    21a2:	cf 01       	movw	r24, r30
    21a4:	08 95       	ret

000021a6 <_exit>:
    21a6:	f8 94       	cli

000021a8 <__stop_program>:
    21a8:	ff cf       	rjmp	.-2      	; 0x21a8 <__stop_program>
