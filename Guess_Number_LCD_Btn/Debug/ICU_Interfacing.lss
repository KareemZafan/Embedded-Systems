
ICU_Interfacing.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003140  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  00003140  000031b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00002148  00000000  00000000  000031c0  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000951  00000000  00000000  00005308  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  00005c59  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  00005d99  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  00005f09  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  00007b52  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  00008a3d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  000097ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  0000994c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  00009bd9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000a3a7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e4       	ldi	r30, 0x40	; 64
      68:	f1 e3       	ldi	r31, 0x31	; 49
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 36       	cpi	r26, 0x6C	; 108
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 e8 12 	call	0x25d0	; 0x25d0 <main>
      7a:	0c 94 9e 18 	jmp	0x313c	; 0x313c <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 67 18 	jmp	0x30ce	; 0x30ce <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a4 e6       	ldi	r26, 0x64	; 100
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 83 18 	jmp	0x3106	; 0x3106 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 73 18 	jmp	0x30e6	; 0x30e6 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 8f 18 	jmp	0x311e	; 0x311e <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 73 18 	jmp	0x30e6	; 0x30e6 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 8f 18 	jmp	0x311e	; 0x311e <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 67 18 	jmp	0x30ce	; 0x30ce <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	84 e6       	ldi	r24, 0x64	; 100
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 83 18 	jmp	0x3106	; 0x3106 <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 73 18 	jmp	0x30e6	; 0x30e6 <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 8f 18 	jmp	0x311e	; 0x311e <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 73 18 	jmp	0x30e6	; 0x30e6 <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 8f 18 	jmp	0x311e	; 0x311e <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 73 18 	jmp	0x30e6	; 0x30e6 <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 8f 18 	jmp	0x311e	; 0x311e <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 77 18 	jmp	0x30ee	; 0x30ee <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 93 18 	jmp	0x3126	; 0x3126 <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__stack+0x103>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__stack+0xfd>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__stack+0x107>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__stack+0x9f>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__stack+0x1>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__stack+0x55>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__stack+0x11>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__stack+0x9>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__stack+0x27>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__stack+0x1f>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__stack+0x49>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__stack+0x79>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__stack+0x81>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__stack+0x81>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__stack+0x99>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__stack+0xed>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__stack+0xfd>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__stack+0xcf>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__stack+0xdf>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__stack+0xd7>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__stack+0xed>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__stack+0xef>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__stack+0x107>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <LCD_Send_Command>:
 * Output: Nothing
 *
 */

void LCD_Send_Command(u8 command)
{
     b36:	0f 93       	push	r16
     b38:	1f 93       	push	r17
     b3a:	df 93       	push	r29
     b3c:	cf 93       	push	r28
     b3e:	cd b7       	in	r28, 0x3d	; 61
     b40:	de b7       	in	r29, 0x3e	; 62
     b42:	c5 55       	subi	r28, 0x55	; 85
     b44:	d0 40       	sbci	r29, 0x00	; 0
     b46:	0f b6       	in	r0, 0x3f	; 63
     b48:	f8 94       	cli
     b4a:	de bf       	out	0x3e, r29	; 62
     b4c:	0f be       	out	0x3f, r0	; 63
     b4e:	cd bf       	out	0x3d, r28	; 61
     b50:	fe 01       	movw	r30, r28
     b52:	eb 5a       	subi	r30, 0xAB	; 171
     b54:	ff 4f       	sbci	r31, 0xFF	; 255
     b56:	80 83       	st	Z, r24
			LCD_DATA_PORT = command ;
			LCD_CTRL_PORT &= ~(1<<E) ;
			_delay_ms(1) ;

#elif LCD_BIT_MODE == 4
		    LCD_CTRL_PORT &= ~(1<<RS) ;  /* Select IR Register */
     b58:	ab e3       	ldi	r26, 0x3B	; 59
     b5a:	b0 e0       	ldi	r27, 0x00	; 0
     b5c:	eb e3       	ldi	r30, 0x3B	; 59
     b5e:	f0 e0       	ldi	r31, 0x00	; 0
     b60:	80 81       	ld	r24, Z
     b62:	8e 7f       	andi	r24, 0xFE	; 254
     b64:	8c 93       	st	X, r24
     b66:	fe 01       	movw	r30, r28
     b68:	ef 5a       	subi	r30, 0xAF	; 175
     b6a:	ff 4f       	sbci	r31, 0xFF	; 255
     b6c:	80 e0       	ldi	r24, 0x00	; 0
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e8       	ldi	r26, 0x80	; 128
     b72:	bf e3       	ldi	r27, 0x3F	; 63
     b74:	80 83       	st	Z, r24
     b76:	91 83       	std	Z+1, r25	; 0x01
     b78:	a2 83       	std	Z+2, r26	; 0x02
     b7a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     b7c:	8e 01       	movw	r16, r28
     b7e:	03 5b       	subi	r16, 0xB3	; 179
     b80:	1f 4f       	sbci	r17, 0xFF	; 255
     b82:	fe 01       	movw	r30, r28
     b84:	ef 5a       	subi	r30, 0xAF	; 175
     b86:	ff 4f       	sbci	r31, 0xFF	; 255
     b88:	60 81       	ld	r22, Z
     b8a:	71 81       	ldd	r23, Z+1	; 0x01
     b8c:	82 81       	ldd	r24, Z+2	; 0x02
     b8e:	93 81       	ldd	r25, Z+3	; 0x03
     b90:	20 e0       	ldi	r18, 0x00	; 0
     b92:	30 e0       	ldi	r19, 0x00	; 0
     b94:	4a ef       	ldi	r20, 0xFA	; 250
     b96:	54 e4       	ldi	r21, 0x44	; 68
     b98:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     b9c:	dc 01       	movw	r26, r24
     b9e:	cb 01       	movw	r24, r22
     ba0:	f8 01       	movw	r30, r16
     ba2:	80 83       	st	Z, r24
     ba4:	91 83       	std	Z+1, r25	; 0x01
     ba6:	a2 83       	std	Z+2, r26	; 0x02
     ba8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     baa:	fe 01       	movw	r30, r28
     bac:	e3 5b       	subi	r30, 0xB3	; 179
     bae:	ff 4f       	sbci	r31, 0xFF	; 255
     bb0:	60 81       	ld	r22, Z
     bb2:	71 81       	ldd	r23, Z+1	; 0x01
     bb4:	82 81       	ldd	r24, Z+2	; 0x02
     bb6:	93 81       	ldd	r25, Z+3	; 0x03
     bb8:	20 e0       	ldi	r18, 0x00	; 0
     bba:	30 e0       	ldi	r19, 0x00	; 0
     bbc:	40 e8       	ldi	r20, 0x80	; 128
     bbe:	5f e3       	ldi	r21, 0x3F	; 63
     bc0:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     bc4:	88 23       	and	r24, r24
     bc6:	44 f4       	brge	.+16     	; 0xbd8 <LCD_Send_Command+0xa2>
		__ticks = 1;
     bc8:	fe 01       	movw	r30, r28
     bca:	e5 5b       	subi	r30, 0xB5	; 181
     bcc:	ff 4f       	sbci	r31, 0xFF	; 255
     bce:	81 e0       	ldi	r24, 0x01	; 1
     bd0:	90 e0       	ldi	r25, 0x00	; 0
     bd2:	91 83       	std	Z+1, r25	; 0x01
     bd4:	80 83       	st	Z, r24
     bd6:	64 c0       	rjmp	.+200    	; 0xca0 <LCD_Send_Command+0x16a>
	else if (__tmp > 65535)
     bd8:	fe 01       	movw	r30, r28
     bda:	e3 5b       	subi	r30, 0xB3	; 179
     bdc:	ff 4f       	sbci	r31, 0xFF	; 255
     bde:	60 81       	ld	r22, Z
     be0:	71 81       	ldd	r23, Z+1	; 0x01
     be2:	82 81       	ldd	r24, Z+2	; 0x02
     be4:	93 81       	ldd	r25, Z+3	; 0x03
     be6:	20 e0       	ldi	r18, 0x00	; 0
     be8:	3f ef       	ldi	r19, 0xFF	; 255
     bea:	4f e7       	ldi	r20, 0x7F	; 127
     bec:	57 e4       	ldi	r21, 0x47	; 71
     bee:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     bf2:	18 16       	cp	r1, r24
     bf4:	0c f0       	brlt	.+2      	; 0xbf8 <LCD_Send_Command+0xc2>
     bf6:	43 c0       	rjmp	.+134    	; 0xc7e <LCD_Send_Command+0x148>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     bf8:	fe 01       	movw	r30, r28
     bfa:	ef 5a       	subi	r30, 0xAF	; 175
     bfc:	ff 4f       	sbci	r31, 0xFF	; 255
     bfe:	60 81       	ld	r22, Z
     c00:	71 81       	ldd	r23, Z+1	; 0x01
     c02:	82 81       	ldd	r24, Z+2	; 0x02
     c04:	93 81       	ldd	r25, Z+3	; 0x03
     c06:	20 e0       	ldi	r18, 0x00	; 0
     c08:	30 e0       	ldi	r19, 0x00	; 0
     c0a:	40 e2       	ldi	r20, 0x20	; 32
     c0c:	51 e4       	ldi	r21, 0x41	; 65
     c0e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     c12:	dc 01       	movw	r26, r24
     c14:	cb 01       	movw	r24, r22
     c16:	8e 01       	movw	r16, r28
     c18:	05 5b       	subi	r16, 0xB5	; 181
     c1a:	1f 4f       	sbci	r17, 0xFF	; 255
     c1c:	bc 01       	movw	r22, r24
     c1e:	cd 01       	movw	r24, r26
     c20:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     c24:	dc 01       	movw	r26, r24
     c26:	cb 01       	movw	r24, r22
     c28:	f8 01       	movw	r30, r16
     c2a:	91 83       	std	Z+1, r25	; 0x01
     c2c:	80 83       	st	Z, r24
     c2e:	1f c0       	rjmp	.+62     	; 0xc6e <LCD_Send_Command+0x138>
     c30:	fe 01       	movw	r30, r28
     c32:	e7 5b       	subi	r30, 0xB7	; 183
     c34:	ff 4f       	sbci	r31, 0xFF	; 255
     c36:	88 ec       	ldi	r24, 0xC8	; 200
     c38:	90 e0       	ldi	r25, 0x00	; 0
     c3a:	91 83       	std	Z+1, r25	; 0x01
     c3c:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c3e:	fe 01       	movw	r30, r28
     c40:	e7 5b       	subi	r30, 0xB7	; 183
     c42:	ff 4f       	sbci	r31, 0xFF	; 255
     c44:	80 81       	ld	r24, Z
     c46:	91 81       	ldd	r25, Z+1	; 0x01
     c48:	01 97       	sbiw	r24, 0x01	; 1
     c4a:	f1 f7       	brne	.-4      	; 0xc48 <LCD_Send_Command+0x112>
     c4c:	fe 01       	movw	r30, r28
     c4e:	e7 5b       	subi	r30, 0xB7	; 183
     c50:	ff 4f       	sbci	r31, 0xFF	; 255
     c52:	91 83       	std	Z+1, r25	; 0x01
     c54:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c56:	de 01       	movw	r26, r28
     c58:	a5 5b       	subi	r26, 0xB5	; 181
     c5a:	bf 4f       	sbci	r27, 0xFF	; 255
     c5c:	fe 01       	movw	r30, r28
     c5e:	e5 5b       	subi	r30, 0xB5	; 181
     c60:	ff 4f       	sbci	r31, 0xFF	; 255
     c62:	80 81       	ld	r24, Z
     c64:	91 81       	ldd	r25, Z+1	; 0x01
     c66:	01 97       	sbiw	r24, 0x01	; 1
     c68:	11 96       	adiw	r26, 0x01	; 1
     c6a:	9c 93       	st	X, r25
     c6c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c6e:	fe 01       	movw	r30, r28
     c70:	e5 5b       	subi	r30, 0xB5	; 181
     c72:	ff 4f       	sbci	r31, 0xFF	; 255
     c74:	80 81       	ld	r24, Z
     c76:	91 81       	ldd	r25, Z+1	; 0x01
     c78:	00 97       	sbiw	r24, 0x00	; 0
     c7a:	d1 f6       	brne	.-76     	; 0xc30 <LCD_Send_Command+0xfa>
     c7c:	27 c0       	rjmp	.+78     	; 0xccc <LCD_Send_Command+0x196>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c7e:	8e 01       	movw	r16, r28
     c80:	05 5b       	subi	r16, 0xB5	; 181
     c82:	1f 4f       	sbci	r17, 0xFF	; 255
     c84:	fe 01       	movw	r30, r28
     c86:	e3 5b       	subi	r30, 0xB3	; 179
     c88:	ff 4f       	sbci	r31, 0xFF	; 255
     c8a:	60 81       	ld	r22, Z
     c8c:	71 81       	ldd	r23, Z+1	; 0x01
     c8e:	82 81       	ldd	r24, Z+2	; 0x02
     c90:	93 81       	ldd	r25, Z+3	; 0x03
     c92:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     c96:	dc 01       	movw	r26, r24
     c98:	cb 01       	movw	r24, r22
     c9a:	f8 01       	movw	r30, r16
     c9c:	91 83       	std	Z+1, r25	; 0x01
     c9e:	80 83       	st	Z, r24
     ca0:	de 01       	movw	r26, r28
     ca2:	a9 5b       	subi	r26, 0xB9	; 185
     ca4:	bf 4f       	sbci	r27, 0xFF	; 255
     ca6:	fe 01       	movw	r30, r28
     ca8:	e5 5b       	subi	r30, 0xB5	; 181
     caa:	ff 4f       	sbci	r31, 0xFF	; 255
     cac:	80 81       	ld	r24, Z
     cae:	91 81       	ldd	r25, Z+1	; 0x01
     cb0:	8d 93       	st	X+, r24
     cb2:	9c 93       	st	X, r25
     cb4:	fe 01       	movw	r30, r28
     cb6:	e9 5b       	subi	r30, 0xB9	; 185
     cb8:	ff 4f       	sbci	r31, 0xFF	; 255
     cba:	80 81       	ld	r24, Z
     cbc:	91 81       	ldd	r25, Z+1	; 0x01
     cbe:	01 97       	sbiw	r24, 0x01	; 1
     cc0:	f1 f7       	brne	.-4      	; 0xcbe <LCD_Send_Command+0x188>
     cc2:	fe 01       	movw	r30, r28
     cc4:	e9 5b       	subi	r30, 0xB9	; 185
     cc6:	ff 4f       	sbci	r31, 0xFF	; 255
     cc8:	91 83       	std	Z+1, r25	; 0x01
     cca:	80 83       	st	Z, r24
			_delay_ms(1) ;
			LCD_CTRL_PORT |= (1<<E) ;
     ccc:	ab e3       	ldi	r26, 0x3B	; 59
     cce:	b0 e0       	ldi	r27, 0x00	; 0
     cd0:	eb e3       	ldi	r30, 0x3B	; 59
     cd2:	f0 e0       	ldi	r31, 0x00	; 0
     cd4:	80 81       	ld	r24, Z
     cd6:	82 60       	ori	r24, 0x02	; 2
     cd8:	8c 93       	st	X, r24
     cda:	fe 01       	movw	r30, r28
     cdc:	ed 5b       	subi	r30, 0xBD	; 189
     cde:	ff 4f       	sbci	r31, 0xFF	; 255
     ce0:	80 e0       	ldi	r24, 0x00	; 0
     ce2:	90 e0       	ldi	r25, 0x00	; 0
     ce4:	a0 e8       	ldi	r26, 0x80	; 128
     ce6:	bf e3       	ldi	r27, 0x3F	; 63
     ce8:	80 83       	st	Z, r24
     cea:	91 83       	std	Z+1, r25	; 0x01
     cec:	a2 83       	std	Z+2, r26	; 0x02
     cee:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     cf0:	8e 01       	movw	r16, r28
     cf2:	01 5c       	subi	r16, 0xC1	; 193
     cf4:	1f 4f       	sbci	r17, 0xFF	; 255
     cf6:	fe 01       	movw	r30, r28
     cf8:	ed 5b       	subi	r30, 0xBD	; 189
     cfa:	ff 4f       	sbci	r31, 0xFF	; 255
     cfc:	60 81       	ld	r22, Z
     cfe:	71 81       	ldd	r23, Z+1	; 0x01
     d00:	82 81       	ldd	r24, Z+2	; 0x02
     d02:	93 81       	ldd	r25, Z+3	; 0x03
     d04:	20 e0       	ldi	r18, 0x00	; 0
     d06:	30 e0       	ldi	r19, 0x00	; 0
     d08:	4a ef       	ldi	r20, 0xFA	; 250
     d0a:	54 e4       	ldi	r21, 0x44	; 68
     d0c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     d10:	dc 01       	movw	r26, r24
     d12:	cb 01       	movw	r24, r22
     d14:	f8 01       	movw	r30, r16
     d16:	80 83       	st	Z, r24
     d18:	91 83       	std	Z+1, r25	; 0x01
     d1a:	a2 83       	std	Z+2, r26	; 0x02
     d1c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     d1e:	fe 01       	movw	r30, r28
     d20:	ff 96       	adiw	r30, 0x3f	; 63
     d22:	60 81       	ld	r22, Z
     d24:	71 81       	ldd	r23, Z+1	; 0x01
     d26:	82 81       	ldd	r24, Z+2	; 0x02
     d28:	93 81       	ldd	r25, Z+3	; 0x03
     d2a:	20 e0       	ldi	r18, 0x00	; 0
     d2c:	30 e0       	ldi	r19, 0x00	; 0
     d2e:	40 e8       	ldi	r20, 0x80	; 128
     d30:	5f e3       	ldi	r21, 0x3F	; 63
     d32:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     d36:	88 23       	and	r24, r24
     d38:	2c f4       	brge	.+10     	; 0xd44 <LCD_Send_Command+0x20e>
		__ticks = 1;
     d3a:	81 e0       	ldi	r24, 0x01	; 1
     d3c:	90 e0       	ldi	r25, 0x00	; 0
     d3e:	9e af       	std	Y+62, r25	; 0x3e
     d40:	8d af       	std	Y+61, r24	; 0x3d
     d42:	46 c0       	rjmp	.+140    	; 0xdd0 <LCD_Send_Command+0x29a>
	else if (__tmp > 65535)
     d44:	fe 01       	movw	r30, r28
     d46:	ff 96       	adiw	r30, 0x3f	; 63
     d48:	60 81       	ld	r22, Z
     d4a:	71 81       	ldd	r23, Z+1	; 0x01
     d4c:	82 81       	ldd	r24, Z+2	; 0x02
     d4e:	93 81       	ldd	r25, Z+3	; 0x03
     d50:	20 e0       	ldi	r18, 0x00	; 0
     d52:	3f ef       	ldi	r19, 0xFF	; 255
     d54:	4f e7       	ldi	r20, 0x7F	; 127
     d56:	57 e4       	ldi	r21, 0x47	; 71
     d58:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     d5c:	18 16       	cp	r1, r24
     d5e:	64 f5       	brge	.+88     	; 0xdb8 <LCD_Send_Command+0x282>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d60:	fe 01       	movw	r30, r28
     d62:	ed 5b       	subi	r30, 0xBD	; 189
     d64:	ff 4f       	sbci	r31, 0xFF	; 255
     d66:	60 81       	ld	r22, Z
     d68:	71 81       	ldd	r23, Z+1	; 0x01
     d6a:	82 81       	ldd	r24, Z+2	; 0x02
     d6c:	93 81       	ldd	r25, Z+3	; 0x03
     d6e:	20 e0       	ldi	r18, 0x00	; 0
     d70:	30 e0       	ldi	r19, 0x00	; 0
     d72:	40 e2       	ldi	r20, 0x20	; 32
     d74:	51 e4       	ldi	r21, 0x41	; 65
     d76:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     d7a:	dc 01       	movw	r26, r24
     d7c:	cb 01       	movw	r24, r22
     d7e:	bc 01       	movw	r22, r24
     d80:	cd 01       	movw	r24, r26
     d82:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     d86:	dc 01       	movw	r26, r24
     d88:	cb 01       	movw	r24, r22
     d8a:	9e af       	std	Y+62, r25	; 0x3e
     d8c:	8d af       	std	Y+61, r24	; 0x3d
     d8e:	0f c0       	rjmp	.+30     	; 0xdae <LCD_Send_Command+0x278>
     d90:	88 ec       	ldi	r24, 0xC8	; 200
     d92:	90 e0       	ldi	r25, 0x00	; 0
     d94:	9c af       	std	Y+60, r25	; 0x3c
     d96:	8b af       	std	Y+59, r24	; 0x3b
     d98:	8b ad       	ldd	r24, Y+59	; 0x3b
     d9a:	9c ad       	ldd	r25, Y+60	; 0x3c
     d9c:	01 97       	sbiw	r24, 0x01	; 1
     d9e:	f1 f7       	brne	.-4      	; 0xd9c <LCD_Send_Command+0x266>
     da0:	9c af       	std	Y+60, r25	; 0x3c
     da2:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     da4:	8d ad       	ldd	r24, Y+61	; 0x3d
     da6:	9e ad       	ldd	r25, Y+62	; 0x3e
     da8:	01 97       	sbiw	r24, 0x01	; 1
     daa:	9e af       	std	Y+62, r25	; 0x3e
     dac:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     dae:	8d ad       	ldd	r24, Y+61	; 0x3d
     db0:	9e ad       	ldd	r25, Y+62	; 0x3e
     db2:	00 97       	sbiw	r24, 0x00	; 0
     db4:	69 f7       	brne	.-38     	; 0xd90 <LCD_Send_Command+0x25a>
     db6:	16 c0       	rjmp	.+44     	; 0xde4 <LCD_Send_Command+0x2ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     db8:	fe 01       	movw	r30, r28
     dba:	ff 96       	adiw	r30, 0x3f	; 63
     dbc:	60 81       	ld	r22, Z
     dbe:	71 81       	ldd	r23, Z+1	; 0x01
     dc0:	82 81       	ldd	r24, Z+2	; 0x02
     dc2:	93 81       	ldd	r25, Z+3	; 0x03
     dc4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     dc8:	dc 01       	movw	r26, r24
     dca:	cb 01       	movw	r24, r22
     dcc:	9e af       	std	Y+62, r25	; 0x3e
     dce:	8d af       	std	Y+61, r24	; 0x3d
     dd0:	8d ad       	ldd	r24, Y+61	; 0x3d
     dd2:	9e ad       	ldd	r25, Y+62	; 0x3e
     dd4:	9a af       	std	Y+58, r25	; 0x3a
     dd6:	89 af       	std	Y+57, r24	; 0x39
     dd8:	89 ad       	ldd	r24, Y+57	; 0x39
     dda:	9a ad       	ldd	r25, Y+58	; 0x3a
     ddc:	01 97       	sbiw	r24, 0x01	; 1
     dde:	f1 f7       	brne	.-4      	; 0xddc <LCD_Send_Command+0x2a6>
     de0:	9a af       	std	Y+58, r25	; 0x3a
     de2:	89 af       	std	Y+57, r24	; 0x39
			_delay_ms(1) ;
			LCD_DATA_PORT = command & 0xF0 ;  /* Writing the high nibble */
     de4:	a5 e3       	ldi	r26, 0x35	; 53
     de6:	b0 e0       	ldi	r27, 0x00	; 0
     de8:	fe 01       	movw	r30, r28
     dea:	eb 5a       	subi	r30, 0xAB	; 171
     dec:	ff 4f       	sbci	r31, 0xFF	; 255
     dee:	80 81       	ld	r24, Z
     df0:	80 7f       	andi	r24, 0xF0	; 240
     df2:	8c 93       	st	X, r24
			LCD_CTRL_PORT &= ~(1<<E) ;
     df4:	ab e3       	ldi	r26, 0x3B	; 59
     df6:	b0 e0       	ldi	r27, 0x00	; 0
     df8:	eb e3       	ldi	r30, 0x3B	; 59
     dfa:	f0 e0       	ldi	r31, 0x00	; 0
     dfc:	80 81       	ld	r24, Z
     dfe:	8d 7f       	andi	r24, 0xFD	; 253
     e00:	8c 93       	st	X, r24
     e02:	80 e0       	ldi	r24, 0x00	; 0
     e04:	90 e0       	ldi	r25, 0x00	; 0
     e06:	a0 e8       	ldi	r26, 0x80	; 128
     e08:	bf e3       	ldi	r27, 0x3F	; 63
     e0a:	8d ab       	std	Y+53, r24	; 0x35
     e0c:	9e ab       	std	Y+54, r25	; 0x36
     e0e:	af ab       	std	Y+55, r26	; 0x37
     e10:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e12:	6d a9       	ldd	r22, Y+53	; 0x35
     e14:	7e a9       	ldd	r23, Y+54	; 0x36
     e16:	8f a9       	ldd	r24, Y+55	; 0x37
     e18:	98 ad       	ldd	r25, Y+56	; 0x38
     e1a:	20 e0       	ldi	r18, 0x00	; 0
     e1c:	30 e0       	ldi	r19, 0x00	; 0
     e1e:	4a ef       	ldi	r20, 0xFA	; 250
     e20:	54 e4       	ldi	r21, 0x44	; 68
     e22:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     e26:	dc 01       	movw	r26, r24
     e28:	cb 01       	movw	r24, r22
     e2a:	89 ab       	std	Y+49, r24	; 0x31
     e2c:	9a ab       	std	Y+50, r25	; 0x32
     e2e:	ab ab       	std	Y+51, r26	; 0x33
     e30:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     e32:	69 a9       	ldd	r22, Y+49	; 0x31
     e34:	7a a9       	ldd	r23, Y+50	; 0x32
     e36:	8b a9       	ldd	r24, Y+51	; 0x33
     e38:	9c a9       	ldd	r25, Y+52	; 0x34
     e3a:	20 e0       	ldi	r18, 0x00	; 0
     e3c:	30 e0       	ldi	r19, 0x00	; 0
     e3e:	40 e8       	ldi	r20, 0x80	; 128
     e40:	5f e3       	ldi	r21, 0x3F	; 63
     e42:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     e46:	88 23       	and	r24, r24
     e48:	2c f4       	brge	.+10     	; 0xe54 <LCD_Send_Command+0x31e>
		__ticks = 1;
     e4a:	81 e0       	ldi	r24, 0x01	; 1
     e4c:	90 e0       	ldi	r25, 0x00	; 0
     e4e:	98 ab       	std	Y+48, r25	; 0x30
     e50:	8f a7       	std	Y+47, r24	; 0x2f
     e52:	3f c0       	rjmp	.+126    	; 0xed2 <LCD_Send_Command+0x39c>
	else if (__tmp > 65535)
     e54:	69 a9       	ldd	r22, Y+49	; 0x31
     e56:	7a a9       	ldd	r23, Y+50	; 0x32
     e58:	8b a9       	ldd	r24, Y+51	; 0x33
     e5a:	9c a9       	ldd	r25, Y+52	; 0x34
     e5c:	20 e0       	ldi	r18, 0x00	; 0
     e5e:	3f ef       	ldi	r19, 0xFF	; 255
     e60:	4f e7       	ldi	r20, 0x7F	; 127
     e62:	57 e4       	ldi	r21, 0x47	; 71
     e64:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     e68:	18 16       	cp	r1, r24
     e6a:	4c f5       	brge	.+82     	; 0xebe <LCD_Send_Command+0x388>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e6c:	6d a9       	ldd	r22, Y+53	; 0x35
     e6e:	7e a9       	ldd	r23, Y+54	; 0x36
     e70:	8f a9       	ldd	r24, Y+55	; 0x37
     e72:	98 ad       	ldd	r25, Y+56	; 0x38
     e74:	20 e0       	ldi	r18, 0x00	; 0
     e76:	30 e0       	ldi	r19, 0x00	; 0
     e78:	40 e2       	ldi	r20, 0x20	; 32
     e7a:	51 e4       	ldi	r21, 0x41	; 65
     e7c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     e80:	dc 01       	movw	r26, r24
     e82:	cb 01       	movw	r24, r22
     e84:	bc 01       	movw	r22, r24
     e86:	cd 01       	movw	r24, r26
     e88:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     e8c:	dc 01       	movw	r26, r24
     e8e:	cb 01       	movw	r24, r22
     e90:	98 ab       	std	Y+48, r25	; 0x30
     e92:	8f a7       	std	Y+47, r24	; 0x2f
     e94:	0f c0       	rjmp	.+30     	; 0xeb4 <LCD_Send_Command+0x37e>
     e96:	88 ec       	ldi	r24, 0xC8	; 200
     e98:	90 e0       	ldi	r25, 0x00	; 0
     e9a:	9e a7       	std	Y+46, r25	; 0x2e
     e9c:	8d a7       	std	Y+45, r24	; 0x2d
     e9e:	8d a5       	ldd	r24, Y+45	; 0x2d
     ea0:	9e a5       	ldd	r25, Y+46	; 0x2e
     ea2:	01 97       	sbiw	r24, 0x01	; 1
     ea4:	f1 f7       	brne	.-4      	; 0xea2 <LCD_Send_Command+0x36c>
     ea6:	9e a7       	std	Y+46, r25	; 0x2e
     ea8:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     eaa:	8f a5       	ldd	r24, Y+47	; 0x2f
     eac:	98 a9       	ldd	r25, Y+48	; 0x30
     eae:	01 97       	sbiw	r24, 0x01	; 1
     eb0:	98 ab       	std	Y+48, r25	; 0x30
     eb2:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     eb4:	8f a5       	ldd	r24, Y+47	; 0x2f
     eb6:	98 a9       	ldd	r25, Y+48	; 0x30
     eb8:	00 97       	sbiw	r24, 0x00	; 0
     eba:	69 f7       	brne	.-38     	; 0xe96 <LCD_Send_Command+0x360>
     ebc:	14 c0       	rjmp	.+40     	; 0xee6 <LCD_Send_Command+0x3b0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ebe:	69 a9       	ldd	r22, Y+49	; 0x31
     ec0:	7a a9       	ldd	r23, Y+50	; 0x32
     ec2:	8b a9       	ldd	r24, Y+51	; 0x33
     ec4:	9c a9       	ldd	r25, Y+52	; 0x34
     ec6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     eca:	dc 01       	movw	r26, r24
     ecc:	cb 01       	movw	r24, r22
     ece:	98 ab       	std	Y+48, r25	; 0x30
     ed0:	8f a7       	std	Y+47, r24	; 0x2f
     ed2:	8f a5       	ldd	r24, Y+47	; 0x2f
     ed4:	98 a9       	ldd	r25, Y+48	; 0x30
     ed6:	9c a7       	std	Y+44, r25	; 0x2c
     ed8:	8b a7       	std	Y+43, r24	; 0x2b
     eda:	8b a5       	ldd	r24, Y+43	; 0x2b
     edc:	9c a5       	ldd	r25, Y+44	; 0x2c
     ede:	01 97       	sbiw	r24, 0x01	; 1
     ee0:	f1 f7       	brne	.-4      	; 0xede <LCD_Send_Command+0x3a8>
     ee2:	9c a7       	std	Y+44, r25	; 0x2c
     ee4:	8b a7       	std	Y+43, r24	; 0x2b
			_delay_ms(1) ;

			 LCD_CTRL_PORT &= ~(1<<RS) ;  /* Select IR Register */
     ee6:	ab e3       	ldi	r26, 0x3B	; 59
     ee8:	b0 e0       	ldi	r27, 0x00	; 0
     eea:	eb e3       	ldi	r30, 0x3B	; 59
     eec:	f0 e0       	ldi	r31, 0x00	; 0
     eee:	80 81       	ld	r24, Z
     ef0:	8e 7f       	andi	r24, 0xFE	; 254
     ef2:	8c 93       	st	X, r24
     ef4:	80 e0       	ldi	r24, 0x00	; 0
     ef6:	90 e0       	ldi	r25, 0x00	; 0
     ef8:	a0 e8       	ldi	r26, 0x80	; 128
     efa:	bf e3       	ldi	r27, 0x3F	; 63
     efc:	8f a3       	std	Y+39, r24	; 0x27
     efe:	98 a7       	std	Y+40, r25	; 0x28
     f00:	a9 a7       	std	Y+41, r26	; 0x29
     f02:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f04:	6f a1       	ldd	r22, Y+39	; 0x27
     f06:	78 a5       	ldd	r23, Y+40	; 0x28
     f08:	89 a5       	ldd	r24, Y+41	; 0x29
     f0a:	9a a5       	ldd	r25, Y+42	; 0x2a
     f0c:	20 e0       	ldi	r18, 0x00	; 0
     f0e:	30 e0       	ldi	r19, 0x00	; 0
     f10:	4a ef       	ldi	r20, 0xFA	; 250
     f12:	54 e4       	ldi	r21, 0x44	; 68
     f14:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     f18:	dc 01       	movw	r26, r24
     f1a:	cb 01       	movw	r24, r22
     f1c:	8b a3       	std	Y+35, r24	; 0x23
     f1e:	9c a3       	std	Y+36, r25	; 0x24
     f20:	ad a3       	std	Y+37, r26	; 0x25
     f22:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     f24:	6b a1       	ldd	r22, Y+35	; 0x23
     f26:	7c a1       	ldd	r23, Y+36	; 0x24
     f28:	8d a1       	ldd	r24, Y+37	; 0x25
     f2a:	9e a1       	ldd	r25, Y+38	; 0x26
     f2c:	20 e0       	ldi	r18, 0x00	; 0
     f2e:	30 e0       	ldi	r19, 0x00	; 0
     f30:	40 e8       	ldi	r20, 0x80	; 128
     f32:	5f e3       	ldi	r21, 0x3F	; 63
     f34:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     f38:	88 23       	and	r24, r24
     f3a:	2c f4       	brge	.+10     	; 0xf46 <LCD_Send_Command+0x410>
		__ticks = 1;
     f3c:	81 e0       	ldi	r24, 0x01	; 1
     f3e:	90 e0       	ldi	r25, 0x00	; 0
     f40:	9a a3       	std	Y+34, r25	; 0x22
     f42:	89 a3       	std	Y+33, r24	; 0x21
     f44:	3f c0       	rjmp	.+126    	; 0xfc4 <LCD_Send_Command+0x48e>
	else if (__tmp > 65535)
     f46:	6b a1       	ldd	r22, Y+35	; 0x23
     f48:	7c a1       	ldd	r23, Y+36	; 0x24
     f4a:	8d a1       	ldd	r24, Y+37	; 0x25
     f4c:	9e a1       	ldd	r25, Y+38	; 0x26
     f4e:	20 e0       	ldi	r18, 0x00	; 0
     f50:	3f ef       	ldi	r19, 0xFF	; 255
     f52:	4f e7       	ldi	r20, 0x7F	; 127
     f54:	57 e4       	ldi	r21, 0x47	; 71
     f56:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     f5a:	18 16       	cp	r1, r24
     f5c:	4c f5       	brge	.+82     	; 0xfb0 <LCD_Send_Command+0x47a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f5e:	6f a1       	ldd	r22, Y+39	; 0x27
     f60:	78 a5       	ldd	r23, Y+40	; 0x28
     f62:	89 a5       	ldd	r24, Y+41	; 0x29
     f64:	9a a5       	ldd	r25, Y+42	; 0x2a
     f66:	20 e0       	ldi	r18, 0x00	; 0
     f68:	30 e0       	ldi	r19, 0x00	; 0
     f6a:	40 e2       	ldi	r20, 0x20	; 32
     f6c:	51 e4       	ldi	r21, 0x41	; 65
     f6e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     f72:	dc 01       	movw	r26, r24
     f74:	cb 01       	movw	r24, r22
     f76:	bc 01       	movw	r22, r24
     f78:	cd 01       	movw	r24, r26
     f7a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     f7e:	dc 01       	movw	r26, r24
     f80:	cb 01       	movw	r24, r22
     f82:	9a a3       	std	Y+34, r25	; 0x22
     f84:	89 a3       	std	Y+33, r24	; 0x21
     f86:	0f c0       	rjmp	.+30     	; 0xfa6 <LCD_Send_Command+0x470>
     f88:	88 ec       	ldi	r24, 0xC8	; 200
     f8a:	90 e0       	ldi	r25, 0x00	; 0
     f8c:	98 a3       	std	Y+32, r25	; 0x20
     f8e:	8f 8f       	std	Y+31, r24	; 0x1f
     f90:	8f 8d       	ldd	r24, Y+31	; 0x1f
     f92:	98 a1       	ldd	r25, Y+32	; 0x20
     f94:	01 97       	sbiw	r24, 0x01	; 1
     f96:	f1 f7       	brne	.-4      	; 0xf94 <LCD_Send_Command+0x45e>
     f98:	98 a3       	std	Y+32, r25	; 0x20
     f9a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f9c:	89 a1       	ldd	r24, Y+33	; 0x21
     f9e:	9a a1       	ldd	r25, Y+34	; 0x22
     fa0:	01 97       	sbiw	r24, 0x01	; 1
     fa2:	9a a3       	std	Y+34, r25	; 0x22
     fa4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fa6:	89 a1       	ldd	r24, Y+33	; 0x21
     fa8:	9a a1       	ldd	r25, Y+34	; 0x22
     faa:	00 97       	sbiw	r24, 0x00	; 0
     fac:	69 f7       	brne	.-38     	; 0xf88 <LCD_Send_Command+0x452>
     fae:	14 c0       	rjmp	.+40     	; 0xfd8 <LCD_Send_Command+0x4a2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     fb0:	6b a1       	ldd	r22, Y+35	; 0x23
     fb2:	7c a1       	ldd	r23, Y+36	; 0x24
     fb4:	8d a1       	ldd	r24, Y+37	; 0x25
     fb6:	9e a1       	ldd	r25, Y+38	; 0x26
     fb8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     fbc:	dc 01       	movw	r26, r24
     fbe:	cb 01       	movw	r24, r22
     fc0:	9a a3       	std	Y+34, r25	; 0x22
     fc2:	89 a3       	std	Y+33, r24	; 0x21
     fc4:	89 a1       	ldd	r24, Y+33	; 0x21
     fc6:	9a a1       	ldd	r25, Y+34	; 0x22
     fc8:	9e 8f       	std	Y+30, r25	; 0x1e
     fca:	8d 8f       	std	Y+29, r24	; 0x1d
     fcc:	8d 8d       	ldd	r24, Y+29	; 0x1d
     fce:	9e 8d       	ldd	r25, Y+30	; 0x1e
     fd0:	01 97       	sbiw	r24, 0x01	; 1
     fd2:	f1 f7       	brne	.-4      	; 0xfd0 <LCD_Send_Command+0x49a>
     fd4:	9e 8f       	std	Y+30, r25	; 0x1e
     fd6:	8d 8f       	std	Y+29, r24	; 0x1d
	        _delay_ms(1) ;
			LCD_CTRL_PORT |= (1<<E) ;
     fd8:	ab e3       	ldi	r26, 0x3B	; 59
     fda:	b0 e0       	ldi	r27, 0x00	; 0
     fdc:	eb e3       	ldi	r30, 0x3B	; 59
     fde:	f0 e0       	ldi	r31, 0x00	; 0
     fe0:	80 81       	ld	r24, Z
     fe2:	82 60       	ori	r24, 0x02	; 2
     fe4:	8c 93       	st	X, r24
     fe6:	80 e0       	ldi	r24, 0x00	; 0
     fe8:	90 e0       	ldi	r25, 0x00	; 0
     fea:	a0 e8       	ldi	r26, 0x80	; 128
     fec:	bf e3       	ldi	r27, 0x3F	; 63
     fee:	89 8f       	std	Y+25, r24	; 0x19
     ff0:	9a 8f       	std	Y+26, r25	; 0x1a
     ff2:	ab 8f       	std	Y+27, r26	; 0x1b
     ff4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ff6:	69 8d       	ldd	r22, Y+25	; 0x19
     ff8:	7a 8d       	ldd	r23, Y+26	; 0x1a
     ffa:	8b 8d       	ldd	r24, Y+27	; 0x1b
     ffc:	9c 8d       	ldd	r25, Y+28	; 0x1c
     ffe:	20 e0       	ldi	r18, 0x00	; 0
    1000:	30 e0       	ldi	r19, 0x00	; 0
    1002:	4a ef       	ldi	r20, 0xFA	; 250
    1004:	54 e4       	ldi	r21, 0x44	; 68
    1006:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    100a:	dc 01       	movw	r26, r24
    100c:	cb 01       	movw	r24, r22
    100e:	8d 8b       	std	Y+21, r24	; 0x15
    1010:	9e 8b       	std	Y+22, r25	; 0x16
    1012:	af 8b       	std	Y+23, r26	; 0x17
    1014:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1016:	6d 89       	ldd	r22, Y+21	; 0x15
    1018:	7e 89       	ldd	r23, Y+22	; 0x16
    101a:	8f 89       	ldd	r24, Y+23	; 0x17
    101c:	98 8d       	ldd	r25, Y+24	; 0x18
    101e:	20 e0       	ldi	r18, 0x00	; 0
    1020:	30 e0       	ldi	r19, 0x00	; 0
    1022:	40 e8       	ldi	r20, 0x80	; 128
    1024:	5f e3       	ldi	r21, 0x3F	; 63
    1026:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    102a:	88 23       	and	r24, r24
    102c:	2c f4       	brge	.+10     	; 0x1038 <LCD_Send_Command+0x502>
		__ticks = 1;
    102e:	81 e0       	ldi	r24, 0x01	; 1
    1030:	90 e0       	ldi	r25, 0x00	; 0
    1032:	9c 8b       	std	Y+20, r25	; 0x14
    1034:	8b 8b       	std	Y+19, r24	; 0x13
    1036:	3f c0       	rjmp	.+126    	; 0x10b6 <LCD_Send_Command+0x580>
	else if (__tmp > 65535)
    1038:	6d 89       	ldd	r22, Y+21	; 0x15
    103a:	7e 89       	ldd	r23, Y+22	; 0x16
    103c:	8f 89       	ldd	r24, Y+23	; 0x17
    103e:	98 8d       	ldd	r25, Y+24	; 0x18
    1040:	20 e0       	ldi	r18, 0x00	; 0
    1042:	3f ef       	ldi	r19, 0xFF	; 255
    1044:	4f e7       	ldi	r20, 0x7F	; 127
    1046:	57 e4       	ldi	r21, 0x47	; 71
    1048:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    104c:	18 16       	cp	r1, r24
    104e:	4c f5       	brge	.+82     	; 0x10a2 <LCD_Send_Command+0x56c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1050:	69 8d       	ldd	r22, Y+25	; 0x19
    1052:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1054:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1056:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1058:	20 e0       	ldi	r18, 0x00	; 0
    105a:	30 e0       	ldi	r19, 0x00	; 0
    105c:	40 e2       	ldi	r20, 0x20	; 32
    105e:	51 e4       	ldi	r21, 0x41	; 65
    1060:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1064:	dc 01       	movw	r26, r24
    1066:	cb 01       	movw	r24, r22
    1068:	bc 01       	movw	r22, r24
    106a:	cd 01       	movw	r24, r26
    106c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1070:	dc 01       	movw	r26, r24
    1072:	cb 01       	movw	r24, r22
    1074:	9c 8b       	std	Y+20, r25	; 0x14
    1076:	8b 8b       	std	Y+19, r24	; 0x13
    1078:	0f c0       	rjmp	.+30     	; 0x1098 <LCD_Send_Command+0x562>
    107a:	88 ec       	ldi	r24, 0xC8	; 200
    107c:	90 e0       	ldi	r25, 0x00	; 0
    107e:	9a 8b       	std	Y+18, r25	; 0x12
    1080:	89 8b       	std	Y+17, r24	; 0x11
    1082:	89 89       	ldd	r24, Y+17	; 0x11
    1084:	9a 89       	ldd	r25, Y+18	; 0x12
    1086:	01 97       	sbiw	r24, 0x01	; 1
    1088:	f1 f7       	brne	.-4      	; 0x1086 <LCD_Send_Command+0x550>
    108a:	9a 8b       	std	Y+18, r25	; 0x12
    108c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    108e:	8b 89       	ldd	r24, Y+19	; 0x13
    1090:	9c 89       	ldd	r25, Y+20	; 0x14
    1092:	01 97       	sbiw	r24, 0x01	; 1
    1094:	9c 8b       	std	Y+20, r25	; 0x14
    1096:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1098:	8b 89       	ldd	r24, Y+19	; 0x13
    109a:	9c 89       	ldd	r25, Y+20	; 0x14
    109c:	00 97       	sbiw	r24, 0x00	; 0
    109e:	69 f7       	brne	.-38     	; 0x107a <LCD_Send_Command+0x544>
    10a0:	14 c0       	rjmp	.+40     	; 0x10ca <LCD_Send_Command+0x594>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10a2:	6d 89       	ldd	r22, Y+21	; 0x15
    10a4:	7e 89       	ldd	r23, Y+22	; 0x16
    10a6:	8f 89       	ldd	r24, Y+23	; 0x17
    10a8:	98 8d       	ldd	r25, Y+24	; 0x18
    10aa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    10ae:	dc 01       	movw	r26, r24
    10b0:	cb 01       	movw	r24, r22
    10b2:	9c 8b       	std	Y+20, r25	; 0x14
    10b4:	8b 8b       	std	Y+19, r24	; 0x13
    10b6:	8b 89       	ldd	r24, Y+19	; 0x13
    10b8:	9c 89       	ldd	r25, Y+20	; 0x14
    10ba:	98 8b       	std	Y+16, r25	; 0x10
    10bc:	8f 87       	std	Y+15, r24	; 0x0f
    10be:	8f 85       	ldd	r24, Y+15	; 0x0f
    10c0:	98 89       	ldd	r25, Y+16	; 0x10
    10c2:	01 97       	sbiw	r24, 0x01	; 1
    10c4:	f1 f7       	brne	.-4      	; 0x10c2 <LCD_Send_Command+0x58c>
    10c6:	98 8b       	std	Y+16, r25	; 0x10
    10c8:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(1) ;
			LCD_DATA_PORT = (command<<4)    ;  /* Writing the Low Nibble to D4 ~ D7 */
    10ca:	a5 e3       	ldi	r26, 0x35	; 53
    10cc:	b0 e0       	ldi	r27, 0x00	; 0
    10ce:	fe 01       	movw	r30, r28
    10d0:	eb 5a       	subi	r30, 0xAB	; 171
    10d2:	ff 4f       	sbci	r31, 0xFF	; 255
    10d4:	80 81       	ld	r24, Z
    10d6:	82 95       	swap	r24
    10d8:	80 7f       	andi	r24, 0xF0	; 240
    10da:	8c 93       	st	X, r24
			LCD_CTRL_PORT &= ~(1<<E) ;
    10dc:	ab e3       	ldi	r26, 0x3B	; 59
    10de:	b0 e0       	ldi	r27, 0x00	; 0
    10e0:	eb e3       	ldi	r30, 0x3B	; 59
    10e2:	f0 e0       	ldi	r31, 0x00	; 0
    10e4:	80 81       	ld	r24, Z
    10e6:	8d 7f       	andi	r24, 0xFD	; 253
    10e8:	8c 93       	st	X, r24
    10ea:	80 e0       	ldi	r24, 0x00	; 0
    10ec:	90 e0       	ldi	r25, 0x00	; 0
    10ee:	a0 e8       	ldi	r26, 0x80	; 128
    10f0:	bf e3       	ldi	r27, 0x3F	; 63
    10f2:	8b 87       	std	Y+11, r24	; 0x0b
    10f4:	9c 87       	std	Y+12, r25	; 0x0c
    10f6:	ad 87       	std	Y+13, r26	; 0x0d
    10f8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10fa:	6b 85       	ldd	r22, Y+11	; 0x0b
    10fc:	7c 85       	ldd	r23, Y+12	; 0x0c
    10fe:	8d 85       	ldd	r24, Y+13	; 0x0d
    1100:	9e 85       	ldd	r25, Y+14	; 0x0e
    1102:	20 e0       	ldi	r18, 0x00	; 0
    1104:	30 e0       	ldi	r19, 0x00	; 0
    1106:	4a ef       	ldi	r20, 0xFA	; 250
    1108:	54 e4       	ldi	r21, 0x44	; 68
    110a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    110e:	dc 01       	movw	r26, r24
    1110:	cb 01       	movw	r24, r22
    1112:	8f 83       	std	Y+7, r24	; 0x07
    1114:	98 87       	std	Y+8, r25	; 0x08
    1116:	a9 87       	std	Y+9, r26	; 0x09
    1118:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    111a:	6f 81       	ldd	r22, Y+7	; 0x07
    111c:	78 85       	ldd	r23, Y+8	; 0x08
    111e:	89 85       	ldd	r24, Y+9	; 0x09
    1120:	9a 85       	ldd	r25, Y+10	; 0x0a
    1122:	20 e0       	ldi	r18, 0x00	; 0
    1124:	30 e0       	ldi	r19, 0x00	; 0
    1126:	40 e8       	ldi	r20, 0x80	; 128
    1128:	5f e3       	ldi	r21, 0x3F	; 63
    112a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    112e:	88 23       	and	r24, r24
    1130:	2c f4       	brge	.+10     	; 0x113c <LCD_Send_Command+0x606>
		__ticks = 1;
    1132:	81 e0       	ldi	r24, 0x01	; 1
    1134:	90 e0       	ldi	r25, 0x00	; 0
    1136:	9e 83       	std	Y+6, r25	; 0x06
    1138:	8d 83       	std	Y+5, r24	; 0x05
    113a:	3f c0       	rjmp	.+126    	; 0x11ba <LCD_Send_Command+0x684>
	else if (__tmp > 65535)
    113c:	6f 81       	ldd	r22, Y+7	; 0x07
    113e:	78 85       	ldd	r23, Y+8	; 0x08
    1140:	89 85       	ldd	r24, Y+9	; 0x09
    1142:	9a 85       	ldd	r25, Y+10	; 0x0a
    1144:	20 e0       	ldi	r18, 0x00	; 0
    1146:	3f ef       	ldi	r19, 0xFF	; 255
    1148:	4f e7       	ldi	r20, 0x7F	; 127
    114a:	57 e4       	ldi	r21, 0x47	; 71
    114c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1150:	18 16       	cp	r1, r24
    1152:	4c f5       	brge	.+82     	; 0x11a6 <LCD_Send_Command+0x670>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1154:	6b 85       	ldd	r22, Y+11	; 0x0b
    1156:	7c 85       	ldd	r23, Y+12	; 0x0c
    1158:	8d 85       	ldd	r24, Y+13	; 0x0d
    115a:	9e 85       	ldd	r25, Y+14	; 0x0e
    115c:	20 e0       	ldi	r18, 0x00	; 0
    115e:	30 e0       	ldi	r19, 0x00	; 0
    1160:	40 e2       	ldi	r20, 0x20	; 32
    1162:	51 e4       	ldi	r21, 0x41	; 65
    1164:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1168:	dc 01       	movw	r26, r24
    116a:	cb 01       	movw	r24, r22
    116c:	bc 01       	movw	r22, r24
    116e:	cd 01       	movw	r24, r26
    1170:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1174:	dc 01       	movw	r26, r24
    1176:	cb 01       	movw	r24, r22
    1178:	9e 83       	std	Y+6, r25	; 0x06
    117a:	8d 83       	std	Y+5, r24	; 0x05
    117c:	0f c0       	rjmp	.+30     	; 0x119c <LCD_Send_Command+0x666>
    117e:	88 ec       	ldi	r24, 0xC8	; 200
    1180:	90 e0       	ldi	r25, 0x00	; 0
    1182:	9c 83       	std	Y+4, r25	; 0x04
    1184:	8b 83       	std	Y+3, r24	; 0x03
    1186:	8b 81       	ldd	r24, Y+3	; 0x03
    1188:	9c 81       	ldd	r25, Y+4	; 0x04
    118a:	01 97       	sbiw	r24, 0x01	; 1
    118c:	f1 f7       	brne	.-4      	; 0x118a <LCD_Send_Command+0x654>
    118e:	9c 83       	std	Y+4, r25	; 0x04
    1190:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1192:	8d 81       	ldd	r24, Y+5	; 0x05
    1194:	9e 81       	ldd	r25, Y+6	; 0x06
    1196:	01 97       	sbiw	r24, 0x01	; 1
    1198:	9e 83       	std	Y+6, r25	; 0x06
    119a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    119c:	8d 81       	ldd	r24, Y+5	; 0x05
    119e:	9e 81       	ldd	r25, Y+6	; 0x06
    11a0:	00 97       	sbiw	r24, 0x00	; 0
    11a2:	69 f7       	brne	.-38     	; 0x117e <LCD_Send_Command+0x648>
    11a4:	14 c0       	rjmp	.+40     	; 0x11ce <LCD_Send_Command+0x698>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11a6:	6f 81       	ldd	r22, Y+7	; 0x07
    11a8:	78 85       	ldd	r23, Y+8	; 0x08
    11aa:	89 85       	ldd	r24, Y+9	; 0x09
    11ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    11ae:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    11b2:	dc 01       	movw	r26, r24
    11b4:	cb 01       	movw	r24, r22
    11b6:	9e 83       	std	Y+6, r25	; 0x06
    11b8:	8d 83       	std	Y+5, r24	; 0x05
    11ba:	8d 81       	ldd	r24, Y+5	; 0x05
    11bc:	9e 81       	ldd	r25, Y+6	; 0x06
    11be:	9a 83       	std	Y+2, r25	; 0x02
    11c0:	89 83       	std	Y+1, r24	; 0x01
    11c2:	89 81       	ldd	r24, Y+1	; 0x01
    11c4:	9a 81       	ldd	r25, Y+2	; 0x02
    11c6:	01 97       	sbiw	r24, 0x01	; 1
    11c8:	f1 f7       	brne	.-4      	; 0x11c6 <LCD_Send_Command+0x690>
    11ca:	9a 83       	std	Y+2, r25	; 0x02
    11cc:	89 83       	std	Y+1, r24	; 0x01


#endif

return ;
}
    11ce:	cb 5a       	subi	r28, 0xAB	; 171
    11d0:	df 4f       	sbci	r29, 0xFF	; 255
    11d2:	0f b6       	in	r0, 0x3f	; 63
    11d4:	f8 94       	cli
    11d6:	de bf       	out	0x3e, r29	; 62
    11d8:	0f be       	out	0x3f, r0	; 63
    11da:	cd bf       	out	0x3d, r28	; 61
    11dc:	cf 91       	pop	r28
    11de:	df 91       	pop	r29
    11e0:	1f 91       	pop	r17
    11e2:	0f 91       	pop	r16
    11e4:	08 95       	ret

000011e6 <LCD_Init>:
 * LCD Initialization
 * Input:  Nothing
 * Output: Nothing
 */
void LCD_Init(void)
{
    11e6:	df 93       	push	r29
    11e8:	cf 93       	push	r28
    11ea:	cd b7       	in	r28, 0x3d	; 61
    11ec:	de b7       	in	r29, 0x3e	; 62
    11ee:	e8 97       	sbiw	r28, 0x38	; 56
    11f0:	0f b6       	in	r0, 0x3f	; 63
    11f2:	f8 94       	cli
    11f4:	de bf       	out	0x3e, r29	; 62
    11f6:	0f be       	out	0x3f, r0	; 63
    11f8:	cd bf       	out	0x3d, r28	; 61
    11fa:	80 e0       	ldi	r24, 0x00	; 0
    11fc:	90 e0       	ldi	r25, 0x00	; 0
    11fe:	a8 e4       	ldi	r26, 0x48	; 72
    1200:	b2 e4       	ldi	r27, 0x42	; 66
    1202:	8d ab       	std	Y+53, r24	; 0x35
    1204:	9e ab       	std	Y+54, r25	; 0x36
    1206:	af ab       	std	Y+55, r26	; 0x37
    1208:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    120a:	6d a9       	ldd	r22, Y+53	; 0x35
    120c:	7e a9       	ldd	r23, Y+54	; 0x36
    120e:	8f a9       	ldd	r24, Y+55	; 0x37
    1210:	98 ad       	ldd	r25, Y+56	; 0x38
    1212:	20 e0       	ldi	r18, 0x00	; 0
    1214:	30 e0       	ldi	r19, 0x00	; 0
    1216:	4a ef       	ldi	r20, 0xFA	; 250
    1218:	54 e4       	ldi	r21, 0x44	; 68
    121a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    121e:	dc 01       	movw	r26, r24
    1220:	cb 01       	movw	r24, r22
    1222:	89 ab       	std	Y+49, r24	; 0x31
    1224:	9a ab       	std	Y+50, r25	; 0x32
    1226:	ab ab       	std	Y+51, r26	; 0x33
    1228:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    122a:	69 a9       	ldd	r22, Y+49	; 0x31
    122c:	7a a9       	ldd	r23, Y+50	; 0x32
    122e:	8b a9       	ldd	r24, Y+51	; 0x33
    1230:	9c a9       	ldd	r25, Y+52	; 0x34
    1232:	20 e0       	ldi	r18, 0x00	; 0
    1234:	30 e0       	ldi	r19, 0x00	; 0
    1236:	40 e8       	ldi	r20, 0x80	; 128
    1238:	5f e3       	ldi	r21, 0x3F	; 63
    123a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    123e:	88 23       	and	r24, r24
    1240:	2c f4       	brge	.+10     	; 0x124c <LCD_Init+0x66>
		__ticks = 1;
    1242:	81 e0       	ldi	r24, 0x01	; 1
    1244:	90 e0       	ldi	r25, 0x00	; 0
    1246:	98 ab       	std	Y+48, r25	; 0x30
    1248:	8f a7       	std	Y+47, r24	; 0x2f
    124a:	3f c0       	rjmp	.+126    	; 0x12ca <LCD_Init+0xe4>
	else if (__tmp > 65535)
    124c:	69 a9       	ldd	r22, Y+49	; 0x31
    124e:	7a a9       	ldd	r23, Y+50	; 0x32
    1250:	8b a9       	ldd	r24, Y+51	; 0x33
    1252:	9c a9       	ldd	r25, Y+52	; 0x34
    1254:	20 e0       	ldi	r18, 0x00	; 0
    1256:	3f ef       	ldi	r19, 0xFF	; 255
    1258:	4f e7       	ldi	r20, 0x7F	; 127
    125a:	57 e4       	ldi	r21, 0x47	; 71
    125c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1260:	18 16       	cp	r1, r24
    1262:	4c f5       	brge	.+82     	; 0x12b6 <LCD_Init+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1264:	6d a9       	ldd	r22, Y+53	; 0x35
    1266:	7e a9       	ldd	r23, Y+54	; 0x36
    1268:	8f a9       	ldd	r24, Y+55	; 0x37
    126a:	98 ad       	ldd	r25, Y+56	; 0x38
    126c:	20 e0       	ldi	r18, 0x00	; 0
    126e:	30 e0       	ldi	r19, 0x00	; 0
    1270:	40 e2       	ldi	r20, 0x20	; 32
    1272:	51 e4       	ldi	r21, 0x41	; 65
    1274:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1278:	dc 01       	movw	r26, r24
    127a:	cb 01       	movw	r24, r22
    127c:	bc 01       	movw	r22, r24
    127e:	cd 01       	movw	r24, r26
    1280:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1284:	dc 01       	movw	r26, r24
    1286:	cb 01       	movw	r24, r22
    1288:	98 ab       	std	Y+48, r25	; 0x30
    128a:	8f a7       	std	Y+47, r24	; 0x2f
    128c:	0f c0       	rjmp	.+30     	; 0x12ac <LCD_Init+0xc6>
    128e:	88 ec       	ldi	r24, 0xC8	; 200
    1290:	90 e0       	ldi	r25, 0x00	; 0
    1292:	9e a7       	std	Y+46, r25	; 0x2e
    1294:	8d a7       	std	Y+45, r24	; 0x2d
    1296:	8d a5       	ldd	r24, Y+45	; 0x2d
    1298:	9e a5       	ldd	r25, Y+46	; 0x2e
    129a:	01 97       	sbiw	r24, 0x01	; 1
    129c:	f1 f7       	brne	.-4      	; 0x129a <LCD_Init+0xb4>
    129e:	9e a7       	std	Y+46, r25	; 0x2e
    12a0:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12a2:	8f a5       	ldd	r24, Y+47	; 0x2f
    12a4:	98 a9       	ldd	r25, Y+48	; 0x30
    12a6:	01 97       	sbiw	r24, 0x01	; 1
    12a8:	98 ab       	std	Y+48, r25	; 0x30
    12aa:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12ac:	8f a5       	ldd	r24, Y+47	; 0x2f
    12ae:	98 a9       	ldd	r25, Y+48	; 0x30
    12b0:	00 97       	sbiw	r24, 0x00	; 0
    12b2:	69 f7       	brne	.-38     	; 0x128e <LCD_Init+0xa8>
    12b4:	14 c0       	rjmp	.+40     	; 0x12de <LCD_Init+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12b6:	69 a9       	ldd	r22, Y+49	; 0x31
    12b8:	7a a9       	ldd	r23, Y+50	; 0x32
    12ba:	8b a9       	ldd	r24, Y+51	; 0x33
    12bc:	9c a9       	ldd	r25, Y+52	; 0x34
    12be:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    12c2:	dc 01       	movw	r26, r24
    12c4:	cb 01       	movw	r24, r22
    12c6:	98 ab       	std	Y+48, r25	; 0x30
    12c8:	8f a7       	std	Y+47, r24	; 0x2f
    12ca:	8f a5       	ldd	r24, Y+47	; 0x2f
    12cc:	98 a9       	ldd	r25, Y+48	; 0x30
    12ce:	9c a7       	std	Y+44, r25	; 0x2c
    12d0:	8b a7       	std	Y+43, r24	; 0x2b
    12d2:	8b a5       	ldd	r24, Y+43	; 0x2b
    12d4:	9c a5       	ldd	r25, Y+44	; 0x2c
    12d6:	01 97       	sbiw	r24, 0x01	; 1
    12d8:	f1 f7       	brne	.-4      	; 0x12d6 <LCD_Init+0xf0>
    12da:	9c a7       	std	Y+44, r25	; 0x2c
    12dc:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(50) ;

     LCD_CTRL_DDR  = 0xFF ; /*Specify the Direction of the Control Pins of LCD */
    12de:	ea e3       	ldi	r30, 0x3A	; 58
    12e0:	f0 e0       	ldi	r31, 0x00	; 0
    12e2:	8f ef       	ldi	r24, 0xFF	; 255
    12e4:	80 83       	st	Z, r24
     LCD_CTRL_PORT = 0x00 ; /*Clear all Control pins of LCD */
    12e6:	eb e3       	ldi	r30, 0x3B	; 59
    12e8:	f0 e0       	ldi	r31, 0x00	; 0
    12ea:	10 82       	st	Z, r1
	 _delay_ms(1);



#elif LCD_BIT_MODE == 4
	  LCD_DATA_DDR |= 0xF0 ;
    12ec:	a4 e3       	ldi	r26, 0x34	; 52
    12ee:	b0 e0       	ldi	r27, 0x00	; 0
    12f0:	e4 e3       	ldi	r30, 0x34	; 52
    12f2:	f0 e0       	ldi	r31, 0x00	; 0
    12f4:	80 81       	ld	r24, Z
    12f6:	80 6f       	ori	r24, 0xF0	; 240
    12f8:	8c 93       	st	X, r24
	  LCD_Send_Command(LCD_RETURN_HOME);
    12fa:	82 e0       	ldi	r24, 0x02	; 2
    12fc:	0e 94 9b 05 	call	0xb36	; 0xb36 <LCD_Send_Command>
	  LCD_Send_Command(LCD_FUN_SET_4BIT_2LINE) ;
    1300:	88 e2       	ldi	r24, 0x28	; 40
    1302:	0e 94 9b 05 	call	0xb36	; 0xb36 <LCD_Send_Command>
    1306:	80 e0       	ldi	r24, 0x00	; 0
    1308:	90 e0       	ldi	r25, 0x00	; 0
    130a:	a0 e8       	ldi	r26, 0x80	; 128
    130c:	bf e3       	ldi	r27, 0x3F	; 63
    130e:	8f a3       	std	Y+39, r24	; 0x27
    1310:	98 a7       	std	Y+40, r25	; 0x28
    1312:	a9 a7       	std	Y+41, r26	; 0x29
    1314:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1316:	6f a1       	ldd	r22, Y+39	; 0x27
    1318:	78 a5       	ldd	r23, Y+40	; 0x28
    131a:	89 a5       	ldd	r24, Y+41	; 0x29
    131c:	9a a5       	ldd	r25, Y+42	; 0x2a
    131e:	20 e0       	ldi	r18, 0x00	; 0
    1320:	30 e0       	ldi	r19, 0x00	; 0
    1322:	4a ef       	ldi	r20, 0xFA	; 250
    1324:	54 e4       	ldi	r21, 0x44	; 68
    1326:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    132a:	dc 01       	movw	r26, r24
    132c:	cb 01       	movw	r24, r22
    132e:	8b a3       	std	Y+35, r24	; 0x23
    1330:	9c a3       	std	Y+36, r25	; 0x24
    1332:	ad a3       	std	Y+37, r26	; 0x25
    1334:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1336:	6b a1       	ldd	r22, Y+35	; 0x23
    1338:	7c a1       	ldd	r23, Y+36	; 0x24
    133a:	8d a1       	ldd	r24, Y+37	; 0x25
    133c:	9e a1       	ldd	r25, Y+38	; 0x26
    133e:	20 e0       	ldi	r18, 0x00	; 0
    1340:	30 e0       	ldi	r19, 0x00	; 0
    1342:	40 e8       	ldi	r20, 0x80	; 128
    1344:	5f e3       	ldi	r21, 0x3F	; 63
    1346:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    134a:	88 23       	and	r24, r24
    134c:	2c f4       	brge	.+10     	; 0x1358 <LCD_Init+0x172>
		__ticks = 1;
    134e:	81 e0       	ldi	r24, 0x01	; 1
    1350:	90 e0       	ldi	r25, 0x00	; 0
    1352:	9a a3       	std	Y+34, r25	; 0x22
    1354:	89 a3       	std	Y+33, r24	; 0x21
    1356:	3f c0       	rjmp	.+126    	; 0x13d6 <LCD_Init+0x1f0>
	else if (__tmp > 65535)
    1358:	6b a1       	ldd	r22, Y+35	; 0x23
    135a:	7c a1       	ldd	r23, Y+36	; 0x24
    135c:	8d a1       	ldd	r24, Y+37	; 0x25
    135e:	9e a1       	ldd	r25, Y+38	; 0x26
    1360:	20 e0       	ldi	r18, 0x00	; 0
    1362:	3f ef       	ldi	r19, 0xFF	; 255
    1364:	4f e7       	ldi	r20, 0x7F	; 127
    1366:	57 e4       	ldi	r21, 0x47	; 71
    1368:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    136c:	18 16       	cp	r1, r24
    136e:	4c f5       	brge	.+82     	; 0x13c2 <LCD_Init+0x1dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1370:	6f a1       	ldd	r22, Y+39	; 0x27
    1372:	78 a5       	ldd	r23, Y+40	; 0x28
    1374:	89 a5       	ldd	r24, Y+41	; 0x29
    1376:	9a a5       	ldd	r25, Y+42	; 0x2a
    1378:	20 e0       	ldi	r18, 0x00	; 0
    137a:	30 e0       	ldi	r19, 0x00	; 0
    137c:	40 e2       	ldi	r20, 0x20	; 32
    137e:	51 e4       	ldi	r21, 0x41	; 65
    1380:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1384:	dc 01       	movw	r26, r24
    1386:	cb 01       	movw	r24, r22
    1388:	bc 01       	movw	r22, r24
    138a:	cd 01       	movw	r24, r26
    138c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1390:	dc 01       	movw	r26, r24
    1392:	cb 01       	movw	r24, r22
    1394:	9a a3       	std	Y+34, r25	; 0x22
    1396:	89 a3       	std	Y+33, r24	; 0x21
    1398:	0f c0       	rjmp	.+30     	; 0x13b8 <LCD_Init+0x1d2>
    139a:	88 ec       	ldi	r24, 0xC8	; 200
    139c:	90 e0       	ldi	r25, 0x00	; 0
    139e:	98 a3       	std	Y+32, r25	; 0x20
    13a0:	8f 8f       	std	Y+31, r24	; 0x1f
    13a2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    13a4:	98 a1       	ldd	r25, Y+32	; 0x20
    13a6:	01 97       	sbiw	r24, 0x01	; 1
    13a8:	f1 f7       	brne	.-4      	; 0x13a6 <LCD_Init+0x1c0>
    13aa:	98 a3       	std	Y+32, r25	; 0x20
    13ac:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13ae:	89 a1       	ldd	r24, Y+33	; 0x21
    13b0:	9a a1       	ldd	r25, Y+34	; 0x22
    13b2:	01 97       	sbiw	r24, 0x01	; 1
    13b4:	9a a3       	std	Y+34, r25	; 0x22
    13b6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13b8:	89 a1       	ldd	r24, Y+33	; 0x21
    13ba:	9a a1       	ldd	r25, Y+34	; 0x22
    13bc:	00 97       	sbiw	r24, 0x00	; 0
    13be:	69 f7       	brne	.-38     	; 0x139a <LCD_Init+0x1b4>
    13c0:	14 c0       	rjmp	.+40     	; 0x13ea <LCD_Init+0x204>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13c2:	6b a1       	ldd	r22, Y+35	; 0x23
    13c4:	7c a1       	ldd	r23, Y+36	; 0x24
    13c6:	8d a1       	ldd	r24, Y+37	; 0x25
    13c8:	9e a1       	ldd	r25, Y+38	; 0x26
    13ca:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    13ce:	dc 01       	movw	r26, r24
    13d0:	cb 01       	movw	r24, r22
    13d2:	9a a3       	std	Y+34, r25	; 0x22
    13d4:	89 a3       	std	Y+33, r24	; 0x21
    13d6:	89 a1       	ldd	r24, Y+33	; 0x21
    13d8:	9a a1       	ldd	r25, Y+34	; 0x22
    13da:	9e 8f       	std	Y+30, r25	; 0x1e
    13dc:	8d 8f       	std	Y+29, r24	; 0x1d
    13de:	8d 8d       	ldd	r24, Y+29	; 0x1d
    13e0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    13e2:	01 97       	sbiw	r24, 0x01	; 1
    13e4:	f1 f7       	brne	.-4      	; 0x13e2 <LCD_Init+0x1fc>
    13e6:	9e 8f       	std	Y+30, r25	; 0x1e
    13e8:	8d 8f       	std	Y+29, r24	; 0x1d
	 _delay_ms(1);
#endif

	  LCD_Send_Command(LCD_DISPLAY_ON_CURSOR_OFF) ;
    13ea:	8c e0       	ldi	r24, 0x0C	; 12
    13ec:	0e 94 9b 05 	call	0xb36	; 0xb36 <LCD_Send_Command>
    13f0:	80 e0       	ldi	r24, 0x00	; 0
    13f2:	90 e0       	ldi	r25, 0x00	; 0
    13f4:	a0 e8       	ldi	r26, 0x80	; 128
    13f6:	bf e3       	ldi	r27, 0x3F	; 63
    13f8:	89 8f       	std	Y+25, r24	; 0x19
    13fa:	9a 8f       	std	Y+26, r25	; 0x1a
    13fc:	ab 8f       	std	Y+27, r26	; 0x1b
    13fe:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1400:	69 8d       	ldd	r22, Y+25	; 0x19
    1402:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1404:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1406:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1408:	20 e0       	ldi	r18, 0x00	; 0
    140a:	30 e0       	ldi	r19, 0x00	; 0
    140c:	4a ef       	ldi	r20, 0xFA	; 250
    140e:	54 e4       	ldi	r21, 0x44	; 68
    1410:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1414:	dc 01       	movw	r26, r24
    1416:	cb 01       	movw	r24, r22
    1418:	8d 8b       	std	Y+21, r24	; 0x15
    141a:	9e 8b       	std	Y+22, r25	; 0x16
    141c:	af 8b       	std	Y+23, r26	; 0x17
    141e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1420:	6d 89       	ldd	r22, Y+21	; 0x15
    1422:	7e 89       	ldd	r23, Y+22	; 0x16
    1424:	8f 89       	ldd	r24, Y+23	; 0x17
    1426:	98 8d       	ldd	r25, Y+24	; 0x18
    1428:	20 e0       	ldi	r18, 0x00	; 0
    142a:	30 e0       	ldi	r19, 0x00	; 0
    142c:	40 e8       	ldi	r20, 0x80	; 128
    142e:	5f e3       	ldi	r21, 0x3F	; 63
    1430:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1434:	88 23       	and	r24, r24
    1436:	2c f4       	brge	.+10     	; 0x1442 <LCD_Init+0x25c>
		__ticks = 1;
    1438:	81 e0       	ldi	r24, 0x01	; 1
    143a:	90 e0       	ldi	r25, 0x00	; 0
    143c:	9c 8b       	std	Y+20, r25	; 0x14
    143e:	8b 8b       	std	Y+19, r24	; 0x13
    1440:	3f c0       	rjmp	.+126    	; 0x14c0 <LCD_Init+0x2da>
	else if (__tmp > 65535)
    1442:	6d 89       	ldd	r22, Y+21	; 0x15
    1444:	7e 89       	ldd	r23, Y+22	; 0x16
    1446:	8f 89       	ldd	r24, Y+23	; 0x17
    1448:	98 8d       	ldd	r25, Y+24	; 0x18
    144a:	20 e0       	ldi	r18, 0x00	; 0
    144c:	3f ef       	ldi	r19, 0xFF	; 255
    144e:	4f e7       	ldi	r20, 0x7F	; 127
    1450:	57 e4       	ldi	r21, 0x47	; 71
    1452:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1456:	18 16       	cp	r1, r24
    1458:	4c f5       	brge	.+82     	; 0x14ac <LCD_Init+0x2c6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    145a:	69 8d       	ldd	r22, Y+25	; 0x19
    145c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    145e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1460:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1462:	20 e0       	ldi	r18, 0x00	; 0
    1464:	30 e0       	ldi	r19, 0x00	; 0
    1466:	40 e2       	ldi	r20, 0x20	; 32
    1468:	51 e4       	ldi	r21, 0x41	; 65
    146a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    146e:	dc 01       	movw	r26, r24
    1470:	cb 01       	movw	r24, r22
    1472:	bc 01       	movw	r22, r24
    1474:	cd 01       	movw	r24, r26
    1476:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    147a:	dc 01       	movw	r26, r24
    147c:	cb 01       	movw	r24, r22
    147e:	9c 8b       	std	Y+20, r25	; 0x14
    1480:	8b 8b       	std	Y+19, r24	; 0x13
    1482:	0f c0       	rjmp	.+30     	; 0x14a2 <LCD_Init+0x2bc>
    1484:	88 ec       	ldi	r24, 0xC8	; 200
    1486:	90 e0       	ldi	r25, 0x00	; 0
    1488:	9a 8b       	std	Y+18, r25	; 0x12
    148a:	89 8b       	std	Y+17, r24	; 0x11
    148c:	89 89       	ldd	r24, Y+17	; 0x11
    148e:	9a 89       	ldd	r25, Y+18	; 0x12
    1490:	01 97       	sbiw	r24, 0x01	; 1
    1492:	f1 f7       	brne	.-4      	; 0x1490 <LCD_Init+0x2aa>
    1494:	9a 8b       	std	Y+18, r25	; 0x12
    1496:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1498:	8b 89       	ldd	r24, Y+19	; 0x13
    149a:	9c 89       	ldd	r25, Y+20	; 0x14
    149c:	01 97       	sbiw	r24, 0x01	; 1
    149e:	9c 8b       	std	Y+20, r25	; 0x14
    14a0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14a2:	8b 89       	ldd	r24, Y+19	; 0x13
    14a4:	9c 89       	ldd	r25, Y+20	; 0x14
    14a6:	00 97       	sbiw	r24, 0x00	; 0
    14a8:	69 f7       	brne	.-38     	; 0x1484 <LCD_Init+0x29e>
    14aa:	14 c0       	rjmp	.+40     	; 0x14d4 <LCD_Init+0x2ee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14ac:	6d 89       	ldd	r22, Y+21	; 0x15
    14ae:	7e 89       	ldd	r23, Y+22	; 0x16
    14b0:	8f 89       	ldd	r24, Y+23	; 0x17
    14b2:	98 8d       	ldd	r25, Y+24	; 0x18
    14b4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    14b8:	dc 01       	movw	r26, r24
    14ba:	cb 01       	movw	r24, r22
    14bc:	9c 8b       	std	Y+20, r25	; 0x14
    14be:	8b 8b       	std	Y+19, r24	; 0x13
    14c0:	8b 89       	ldd	r24, Y+19	; 0x13
    14c2:	9c 89       	ldd	r25, Y+20	; 0x14
    14c4:	98 8b       	std	Y+16, r25	; 0x10
    14c6:	8f 87       	std	Y+15, r24	; 0x0f
    14c8:	8f 85       	ldd	r24, Y+15	; 0x0f
    14ca:	98 89       	ldd	r25, Y+16	; 0x10
    14cc:	01 97       	sbiw	r24, 0x01	; 1
    14ce:	f1 f7       	brne	.-4      	; 0x14cc <LCD_Init+0x2e6>
    14d0:	98 8b       	std	Y+16, r25	; 0x10
    14d2:	8f 87       	std	Y+15, r24	; 0x0f
	  _delay_ms(1);
	  LCD_Send_Command(LCD_CLEAR) ;
    14d4:	81 e0       	ldi	r24, 0x01	; 1
    14d6:	0e 94 9b 05 	call	0xb36	; 0xb36 <LCD_Send_Command>
    14da:	80 e0       	ldi	r24, 0x00	; 0
    14dc:	90 e0       	ldi	r25, 0x00	; 0
    14de:	a0 ea       	ldi	r26, 0xA0	; 160
    14e0:	b0 e4       	ldi	r27, 0x40	; 64
    14e2:	8b 87       	std	Y+11, r24	; 0x0b
    14e4:	9c 87       	std	Y+12, r25	; 0x0c
    14e6:	ad 87       	std	Y+13, r26	; 0x0d
    14e8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14ea:	6b 85       	ldd	r22, Y+11	; 0x0b
    14ec:	7c 85       	ldd	r23, Y+12	; 0x0c
    14ee:	8d 85       	ldd	r24, Y+13	; 0x0d
    14f0:	9e 85       	ldd	r25, Y+14	; 0x0e
    14f2:	20 e0       	ldi	r18, 0x00	; 0
    14f4:	30 e0       	ldi	r19, 0x00	; 0
    14f6:	4a ef       	ldi	r20, 0xFA	; 250
    14f8:	54 e4       	ldi	r21, 0x44	; 68
    14fa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    14fe:	dc 01       	movw	r26, r24
    1500:	cb 01       	movw	r24, r22
    1502:	8f 83       	std	Y+7, r24	; 0x07
    1504:	98 87       	std	Y+8, r25	; 0x08
    1506:	a9 87       	std	Y+9, r26	; 0x09
    1508:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    150a:	6f 81       	ldd	r22, Y+7	; 0x07
    150c:	78 85       	ldd	r23, Y+8	; 0x08
    150e:	89 85       	ldd	r24, Y+9	; 0x09
    1510:	9a 85       	ldd	r25, Y+10	; 0x0a
    1512:	20 e0       	ldi	r18, 0x00	; 0
    1514:	30 e0       	ldi	r19, 0x00	; 0
    1516:	40 e8       	ldi	r20, 0x80	; 128
    1518:	5f e3       	ldi	r21, 0x3F	; 63
    151a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    151e:	88 23       	and	r24, r24
    1520:	2c f4       	brge	.+10     	; 0x152c <LCD_Init+0x346>
		__ticks = 1;
    1522:	81 e0       	ldi	r24, 0x01	; 1
    1524:	90 e0       	ldi	r25, 0x00	; 0
    1526:	9e 83       	std	Y+6, r25	; 0x06
    1528:	8d 83       	std	Y+5, r24	; 0x05
    152a:	3f c0       	rjmp	.+126    	; 0x15aa <LCD_Init+0x3c4>
	else if (__tmp > 65535)
    152c:	6f 81       	ldd	r22, Y+7	; 0x07
    152e:	78 85       	ldd	r23, Y+8	; 0x08
    1530:	89 85       	ldd	r24, Y+9	; 0x09
    1532:	9a 85       	ldd	r25, Y+10	; 0x0a
    1534:	20 e0       	ldi	r18, 0x00	; 0
    1536:	3f ef       	ldi	r19, 0xFF	; 255
    1538:	4f e7       	ldi	r20, 0x7F	; 127
    153a:	57 e4       	ldi	r21, 0x47	; 71
    153c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1540:	18 16       	cp	r1, r24
    1542:	4c f5       	brge	.+82     	; 0x1596 <LCD_Init+0x3b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1544:	6b 85       	ldd	r22, Y+11	; 0x0b
    1546:	7c 85       	ldd	r23, Y+12	; 0x0c
    1548:	8d 85       	ldd	r24, Y+13	; 0x0d
    154a:	9e 85       	ldd	r25, Y+14	; 0x0e
    154c:	20 e0       	ldi	r18, 0x00	; 0
    154e:	30 e0       	ldi	r19, 0x00	; 0
    1550:	40 e2       	ldi	r20, 0x20	; 32
    1552:	51 e4       	ldi	r21, 0x41	; 65
    1554:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1558:	dc 01       	movw	r26, r24
    155a:	cb 01       	movw	r24, r22
    155c:	bc 01       	movw	r22, r24
    155e:	cd 01       	movw	r24, r26
    1560:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1564:	dc 01       	movw	r26, r24
    1566:	cb 01       	movw	r24, r22
    1568:	9e 83       	std	Y+6, r25	; 0x06
    156a:	8d 83       	std	Y+5, r24	; 0x05
    156c:	0f c0       	rjmp	.+30     	; 0x158c <LCD_Init+0x3a6>
    156e:	88 ec       	ldi	r24, 0xC8	; 200
    1570:	90 e0       	ldi	r25, 0x00	; 0
    1572:	9c 83       	std	Y+4, r25	; 0x04
    1574:	8b 83       	std	Y+3, r24	; 0x03
    1576:	8b 81       	ldd	r24, Y+3	; 0x03
    1578:	9c 81       	ldd	r25, Y+4	; 0x04
    157a:	01 97       	sbiw	r24, 0x01	; 1
    157c:	f1 f7       	brne	.-4      	; 0x157a <LCD_Init+0x394>
    157e:	9c 83       	std	Y+4, r25	; 0x04
    1580:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1582:	8d 81       	ldd	r24, Y+5	; 0x05
    1584:	9e 81       	ldd	r25, Y+6	; 0x06
    1586:	01 97       	sbiw	r24, 0x01	; 1
    1588:	9e 83       	std	Y+6, r25	; 0x06
    158a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    158c:	8d 81       	ldd	r24, Y+5	; 0x05
    158e:	9e 81       	ldd	r25, Y+6	; 0x06
    1590:	00 97       	sbiw	r24, 0x00	; 0
    1592:	69 f7       	brne	.-38     	; 0x156e <LCD_Init+0x388>
    1594:	14 c0       	rjmp	.+40     	; 0x15be <LCD_Init+0x3d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1596:	6f 81       	ldd	r22, Y+7	; 0x07
    1598:	78 85       	ldd	r23, Y+8	; 0x08
    159a:	89 85       	ldd	r24, Y+9	; 0x09
    159c:	9a 85       	ldd	r25, Y+10	; 0x0a
    159e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    15a2:	dc 01       	movw	r26, r24
    15a4:	cb 01       	movw	r24, r22
    15a6:	9e 83       	std	Y+6, r25	; 0x06
    15a8:	8d 83       	std	Y+5, r24	; 0x05
    15aa:	8d 81       	ldd	r24, Y+5	; 0x05
    15ac:	9e 81       	ldd	r25, Y+6	; 0x06
    15ae:	9a 83       	std	Y+2, r25	; 0x02
    15b0:	89 83       	std	Y+1, r24	; 0x01
    15b2:	89 81       	ldd	r24, Y+1	; 0x01
    15b4:	9a 81       	ldd	r25, Y+2	; 0x02
    15b6:	01 97       	sbiw	r24, 0x01	; 1
    15b8:	f1 f7       	brne	.-4      	; 0x15b6 <LCD_Init+0x3d0>
    15ba:	9a 83       	std	Y+2, r25	; 0x02
    15bc:	89 83       	std	Y+1, r24	; 0x01
	  _delay_ms(5) ;
   LCD_Send_Command(LCD_SHIFT_CURSOR_RIGHT); /* Entry Set Mode */
    15be:	86 e0       	ldi	r24, 0x06	; 6
    15c0:	0e 94 9b 05 	call	0xb36	; 0xb36 <LCD_Send_Command>

return ;
}
    15c4:	e8 96       	adiw	r28, 0x38	; 56
    15c6:	0f b6       	in	r0, 0x3f	; 63
    15c8:	f8 94       	cli
    15ca:	de bf       	out	0x3e, r29	; 62
    15cc:	0f be       	out	0x3f, r0	; 63
    15ce:	cd bf       	out	0x3d, r28	; 61
    15d0:	cf 91       	pop	r28
    15d2:	df 91       	pop	r29
    15d4:	08 95       	ret

000015d6 <LCD_Send_Char_Cp>:
 * Input: Required Character
 * Output:Nothing
 *
 */
void LCD_Send_Char_Cp(u8 data)
{
    15d6:	0f 93       	push	r16
    15d8:	1f 93       	push	r17
    15da:	df 93       	push	r29
    15dc:	cf 93       	push	r28
    15de:	cd b7       	in	r28, 0x3d	; 61
    15e0:	de b7       	in	r29, 0x3e	; 62
    15e2:	c5 55       	subi	r28, 0x55	; 85
    15e4:	d0 40       	sbci	r29, 0x00	; 0
    15e6:	0f b6       	in	r0, 0x3f	; 63
    15e8:	f8 94       	cli
    15ea:	de bf       	out	0x3e, r29	; 62
    15ec:	0f be       	out	0x3f, r0	; 63
    15ee:	cd bf       	out	0x3d, r28	; 61
    15f0:	fe 01       	movw	r30, r28
    15f2:	eb 5a       	subi	r30, 0xAB	; 171
    15f4:	ff 4f       	sbci	r31, 0xFF	; 255
    15f6:	80 83       	st	Z, r24
			LCD_DATA_PORT =data  ;
			LCD_CTRL_PORT &= ~(1<<E) ;
			_delay_ms(1) ;

#elif LCD_BIT_MODE == 4
		    LCD_CTRL_PORT |= (1<<RS) ;  /* Select IR Register */
    15f8:	ab e3       	ldi	r26, 0x3B	; 59
    15fa:	b0 e0       	ldi	r27, 0x00	; 0
    15fc:	eb e3       	ldi	r30, 0x3B	; 59
    15fe:	f0 e0       	ldi	r31, 0x00	; 0
    1600:	80 81       	ld	r24, Z
    1602:	81 60       	ori	r24, 0x01	; 1
    1604:	8c 93       	st	X, r24
    1606:	fe 01       	movw	r30, r28
    1608:	ef 5a       	subi	r30, 0xAF	; 175
    160a:	ff 4f       	sbci	r31, 0xFF	; 255
    160c:	80 e0       	ldi	r24, 0x00	; 0
    160e:	90 e0       	ldi	r25, 0x00	; 0
    1610:	a0 e8       	ldi	r26, 0x80	; 128
    1612:	bf e3       	ldi	r27, 0x3F	; 63
    1614:	80 83       	st	Z, r24
    1616:	91 83       	std	Z+1, r25	; 0x01
    1618:	a2 83       	std	Z+2, r26	; 0x02
    161a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    161c:	8e 01       	movw	r16, r28
    161e:	03 5b       	subi	r16, 0xB3	; 179
    1620:	1f 4f       	sbci	r17, 0xFF	; 255
    1622:	fe 01       	movw	r30, r28
    1624:	ef 5a       	subi	r30, 0xAF	; 175
    1626:	ff 4f       	sbci	r31, 0xFF	; 255
    1628:	60 81       	ld	r22, Z
    162a:	71 81       	ldd	r23, Z+1	; 0x01
    162c:	82 81       	ldd	r24, Z+2	; 0x02
    162e:	93 81       	ldd	r25, Z+3	; 0x03
    1630:	20 e0       	ldi	r18, 0x00	; 0
    1632:	30 e0       	ldi	r19, 0x00	; 0
    1634:	4a ef       	ldi	r20, 0xFA	; 250
    1636:	54 e4       	ldi	r21, 0x44	; 68
    1638:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    163c:	dc 01       	movw	r26, r24
    163e:	cb 01       	movw	r24, r22
    1640:	f8 01       	movw	r30, r16
    1642:	80 83       	st	Z, r24
    1644:	91 83       	std	Z+1, r25	; 0x01
    1646:	a2 83       	std	Z+2, r26	; 0x02
    1648:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    164a:	fe 01       	movw	r30, r28
    164c:	e3 5b       	subi	r30, 0xB3	; 179
    164e:	ff 4f       	sbci	r31, 0xFF	; 255
    1650:	60 81       	ld	r22, Z
    1652:	71 81       	ldd	r23, Z+1	; 0x01
    1654:	82 81       	ldd	r24, Z+2	; 0x02
    1656:	93 81       	ldd	r25, Z+3	; 0x03
    1658:	20 e0       	ldi	r18, 0x00	; 0
    165a:	30 e0       	ldi	r19, 0x00	; 0
    165c:	40 e8       	ldi	r20, 0x80	; 128
    165e:	5f e3       	ldi	r21, 0x3F	; 63
    1660:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1664:	88 23       	and	r24, r24
    1666:	44 f4       	brge	.+16     	; 0x1678 <LCD_Send_Char_Cp+0xa2>
		__ticks = 1;
    1668:	fe 01       	movw	r30, r28
    166a:	e5 5b       	subi	r30, 0xB5	; 181
    166c:	ff 4f       	sbci	r31, 0xFF	; 255
    166e:	81 e0       	ldi	r24, 0x01	; 1
    1670:	90 e0       	ldi	r25, 0x00	; 0
    1672:	91 83       	std	Z+1, r25	; 0x01
    1674:	80 83       	st	Z, r24
    1676:	64 c0       	rjmp	.+200    	; 0x1740 <LCD_Send_Char_Cp+0x16a>
	else if (__tmp > 65535)
    1678:	fe 01       	movw	r30, r28
    167a:	e3 5b       	subi	r30, 0xB3	; 179
    167c:	ff 4f       	sbci	r31, 0xFF	; 255
    167e:	60 81       	ld	r22, Z
    1680:	71 81       	ldd	r23, Z+1	; 0x01
    1682:	82 81       	ldd	r24, Z+2	; 0x02
    1684:	93 81       	ldd	r25, Z+3	; 0x03
    1686:	20 e0       	ldi	r18, 0x00	; 0
    1688:	3f ef       	ldi	r19, 0xFF	; 255
    168a:	4f e7       	ldi	r20, 0x7F	; 127
    168c:	57 e4       	ldi	r21, 0x47	; 71
    168e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1692:	18 16       	cp	r1, r24
    1694:	0c f0       	brlt	.+2      	; 0x1698 <LCD_Send_Char_Cp+0xc2>
    1696:	43 c0       	rjmp	.+134    	; 0x171e <LCD_Send_Char_Cp+0x148>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1698:	fe 01       	movw	r30, r28
    169a:	ef 5a       	subi	r30, 0xAF	; 175
    169c:	ff 4f       	sbci	r31, 0xFF	; 255
    169e:	60 81       	ld	r22, Z
    16a0:	71 81       	ldd	r23, Z+1	; 0x01
    16a2:	82 81       	ldd	r24, Z+2	; 0x02
    16a4:	93 81       	ldd	r25, Z+3	; 0x03
    16a6:	20 e0       	ldi	r18, 0x00	; 0
    16a8:	30 e0       	ldi	r19, 0x00	; 0
    16aa:	40 e2       	ldi	r20, 0x20	; 32
    16ac:	51 e4       	ldi	r21, 0x41	; 65
    16ae:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    16b2:	dc 01       	movw	r26, r24
    16b4:	cb 01       	movw	r24, r22
    16b6:	8e 01       	movw	r16, r28
    16b8:	05 5b       	subi	r16, 0xB5	; 181
    16ba:	1f 4f       	sbci	r17, 0xFF	; 255
    16bc:	bc 01       	movw	r22, r24
    16be:	cd 01       	movw	r24, r26
    16c0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    16c4:	dc 01       	movw	r26, r24
    16c6:	cb 01       	movw	r24, r22
    16c8:	f8 01       	movw	r30, r16
    16ca:	91 83       	std	Z+1, r25	; 0x01
    16cc:	80 83       	st	Z, r24
    16ce:	1f c0       	rjmp	.+62     	; 0x170e <LCD_Send_Char_Cp+0x138>
    16d0:	fe 01       	movw	r30, r28
    16d2:	e7 5b       	subi	r30, 0xB7	; 183
    16d4:	ff 4f       	sbci	r31, 0xFF	; 255
    16d6:	88 ec       	ldi	r24, 0xC8	; 200
    16d8:	90 e0       	ldi	r25, 0x00	; 0
    16da:	91 83       	std	Z+1, r25	; 0x01
    16dc:	80 83       	st	Z, r24
    16de:	fe 01       	movw	r30, r28
    16e0:	e7 5b       	subi	r30, 0xB7	; 183
    16e2:	ff 4f       	sbci	r31, 0xFF	; 255
    16e4:	80 81       	ld	r24, Z
    16e6:	91 81       	ldd	r25, Z+1	; 0x01
    16e8:	01 97       	sbiw	r24, 0x01	; 1
    16ea:	f1 f7       	brne	.-4      	; 0x16e8 <LCD_Send_Char_Cp+0x112>
    16ec:	fe 01       	movw	r30, r28
    16ee:	e7 5b       	subi	r30, 0xB7	; 183
    16f0:	ff 4f       	sbci	r31, 0xFF	; 255
    16f2:	91 83       	std	Z+1, r25	; 0x01
    16f4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16f6:	de 01       	movw	r26, r28
    16f8:	a5 5b       	subi	r26, 0xB5	; 181
    16fa:	bf 4f       	sbci	r27, 0xFF	; 255
    16fc:	fe 01       	movw	r30, r28
    16fe:	e5 5b       	subi	r30, 0xB5	; 181
    1700:	ff 4f       	sbci	r31, 0xFF	; 255
    1702:	80 81       	ld	r24, Z
    1704:	91 81       	ldd	r25, Z+1	; 0x01
    1706:	01 97       	sbiw	r24, 0x01	; 1
    1708:	11 96       	adiw	r26, 0x01	; 1
    170a:	9c 93       	st	X, r25
    170c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    170e:	fe 01       	movw	r30, r28
    1710:	e5 5b       	subi	r30, 0xB5	; 181
    1712:	ff 4f       	sbci	r31, 0xFF	; 255
    1714:	80 81       	ld	r24, Z
    1716:	91 81       	ldd	r25, Z+1	; 0x01
    1718:	00 97       	sbiw	r24, 0x00	; 0
    171a:	d1 f6       	brne	.-76     	; 0x16d0 <LCD_Send_Char_Cp+0xfa>
    171c:	27 c0       	rjmp	.+78     	; 0x176c <LCD_Send_Char_Cp+0x196>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    171e:	8e 01       	movw	r16, r28
    1720:	05 5b       	subi	r16, 0xB5	; 181
    1722:	1f 4f       	sbci	r17, 0xFF	; 255
    1724:	fe 01       	movw	r30, r28
    1726:	e3 5b       	subi	r30, 0xB3	; 179
    1728:	ff 4f       	sbci	r31, 0xFF	; 255
    172a:	60 81       	ld	r22, Z
    172c:	71 81       	ldd	r23, Z+1	; 0x01
    172e:	82 81       	ldd	r24, Z+2	; 0x02
    1730:	93 81       	ldd	r25, Z+3	; 0x03
    1732:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1736:	dc 01       	movw	r26, r24
    1738:	cb 01       	movw	r24, r22
    173a:	f8 01       	movw	r30, r16
    173c:	91 83       	std	Z+1, r25	; 0x01
    173e:	80 83       	st	Z, r24
    1740:	de 01       	movw	r26, r28
    1742:	a9 5b       	subi	r26, 0xB9	; 185
    1744:	bf 4f       	sbci	r27, 0xFF	; 255
    1746:	fe 01       	movw	r30, r28
    1748:	e5 5b       	subi	r30, 0xB5	; 181
    174a:	ff 4f       	sbci	r31, 0xFF	; 255
    174c:	80 81       	ld	r24, Z
    174e:	91 81       	ldd	r25, Z+1	; 0x01
    1750:	8d 93       	st	X+, r24
    1752:	9c 93       	st	X, r25
    1754:	fe 01       	movw	r30, r28
    1756:	e9 5b       	subi	r30, 0xB9	; 185
    1758:	ff 4f       	sbci	r31, 0xFF	; 255
    175a:	80 81       	ld	r24, Z
    175c:	91 81       	ldd	r25, Z+1	; 0x01
    175e:	01 97       	sbiw	r24, 0x01	; 1
    1760:	f1 f7       	brne	.-4      	; 0x175e <LCD_Send_Char_Cp+0x188>
    1762:	fe 01       	movw	r30, r28
    1764:	e9 5b       	subi	r30, 0xB9	; 185
    1766:	ff 4f       	sbci	r31, 0xFF	; 255
    1768:	91 83       	std	Z+1, r25	; 0x01
    176a:	80 83       	st	Z, r24
			_delay_ms(1) ;
			LCD_CTRL_PORT |= (1<<E) ;
    176c:	ab e3       	ldi	r26, 0x3B	; 59
    176e:	b0 e0       	ldi	r27, 0x00	; 0
    1770:	eb e3       	ldi	r30, 0x3B	; 59
    1772:	f0 e0       	ldi	r31, 0x00	; 0
    1774:	80 81       	ld	r24, Z
    1776:	82 60       	ori	r24, 0x02	; 2
    1778:	8c 93       	st	X, r24
    177a:	fe 01       	movw	r30, r28
    177c:	ed 5b       	subi	r30, 0xBD	; 189
    177e:	ff 4f       	sbci	r31, 0xFF	; 255
    1780:	80 e0       	ldi	r24, 0x00	; 0
    1782:	90 e0       	ldi	r25, 0x00	; 0
    1784:	a0 e8       	ldi	r26, 0x80	; 128
    1786:	bf e3       	ldi	r27, 0x3F	; 63
    1788:	80 83       	st	Z, r24
    178a:	91 83       	std	Z+1, r25	; 0x01
    178c:	a2 83       	std	Z+2, r26	; 0x02
    178e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1790:	8e 01       	movw	r16, r28
    1792:	01 5c       	subi	r16, 0xC1	; 193
    1794:	1f 4f       	sbci	r17, 0xFF	; 255
    1796:	fe 01       	movw	r30, r28
    1798:	ed 5b       	subi	r30, 0xBD	; 189
    179a:	ff 4f       	sbci	r31, 0xFF	; 255
    179c:	60 81       	ld	r22, Z
    179e:	71 81       	ldd	r23, Z+1	; 0x01
    17a0:	82 81       	ldd	r24, Z+2	; 0x02
    17a2:	93 81       	ldd	r25, Z+3	; 0x03
    17a4:	20 e0       	ldi	r18, 0x00	; 0
    17a6:	30 e0       	ldi	r19, 0x00	; 0
    17a8:	4a ef       	ldi	r20, 0xFA	; 250
    17aa:	54 e4       	ldi	r21, 0x44	; 68
    17ac:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    17b0:	dc 01       	movw	r26, r24
    17b2:	cb 01       	movw	r24, r22
    17b4:	f8 01       	movw	r30, r16
    17b6:	80 83       	st	Z, r24
    17b8:	91 83       	std	Z+1, r25	; 0x01
    17ba:	a2 83       	std	Z+2, r26	; 0x02
    17bc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    17be:	fe 01       	movw	r30, r28
    17c0:	ff 96       	adiw	r30, 0x3f	; 63
    17c2:	60 81       	ld	r22, Z
    17c4:	71 81       	ldd	r23, Z+1	; 0x01
    17c6:	82 81       	ldd	r24, Z+2	; 0x02
    17c8:	93 81       	ldd	r25, Z+3	; 0x03
    17ca:	20 e0       	ldi	r18, 0x00	; 0
    17cc:	30 e0       	ldi	r19, 0x00	; 0
    17ce:	40 e8       	ldi	r20, 0x80	; 128
    17d0:	5f e3       	ldi	r21, 0x3F	; 63
    17d2:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    17d6:	88 23       	and	r24, r24
    17d8:	2c f4       	brge	.+10     	; 0x17e4 <LCD_Send_Char_Cp+0x20e>
		__ticks = 1;
    17da:	81 e0       	ldi	r24, 0x01	; 1
    17dc:	90 e0       	ldi	r25, 0x00	; 0
    17de:	9e af       	std	Y+62, r25	; 0x3e
    17e0:	8d af       	std	Y+61, r24	; 0x3d
    17e2:	46 c0       	rjmp	.+140    	; 0x1870 <LCD_Send_Char_Cp+0x29a>
	else if (__tmp > 65535)
    17e4:	fe 01       	movw	r30, r28
    17e6:	ff 96       	adiw	r30, 0x3f	; 63
    17e8:	60 81       	ld	r22, Z
    17ea:	71 81       	ldd	r23, Z+1	; 0x01
    17ec:	82 81       	ldd	r24, Z+2	; 0x02
    17ee:	93 81       	ldd	r25, Z+3	; 0x03
    17f0:	20 e0       	ldi	r18, 0x00	; 0
    17f2:	3f ef       	ldi	r19, 0xFF	; 255
    17f4:	4f e7       	ldi	r20, 0x7F	; 127
    17f6:	57 e4       	ldi	r21, 0x47	; 71
    17f8:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    17fc:	18 16       	cp	r1, r24
    17fe:	64 f5       	brge	.+88     	; 0x1858 <LCD_Send_Char_Cp+0x282>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1800:	fe 01       	movw	r30, r28
    1802:	ed 5b       	subi	r30, 0xBD	; 189
    1804:	ff 4f       	sbci	r31, 0xFF	; 255
    1806:	60 81       	ld	r22, Z
    1808:	71 81       	ldd	r23, Z+1	; 0x01
    180a:	82 81       	ldd	r24, Z+2	; 0x02
    180c:	93 81       	ldd	r25, Z+3	; 0x03
    180e:	20 e0       	ldi	r18, 0x00	; 0
    1810:	30 e0       	ldi	r19, 0x00	; 0
    1812:	40 e2       	ldi	r20, 0x20	; 32
    1814:	51 e4       	ldi	r21, 0x41	; 65
    1816:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    181a:	dc 01       	movw	r26, r24
    181c:	cb 01       	movw	r24, r22
    181e:	bc 01       	movw	r22, r24
    1820:	cd 01       	movw	r24, r26
    1822:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1826:	dc 01       	movw	r26, r24
    1828:	cb 01       	movw	r24, r22
    182a:	9e af       	std	Y+62, r25	; 0x3e
    182c:	8d af       	std	Y+61, r24	; 0x3d
    182e:	0f c0       	rjmp	.+30     	; 0x184e <LCD_Send_Char_Cp+0x278>
    1830:	88 ec       	ldi	r24, 0xC8	; 200
    1832:	90 e0       	ldi	r25, 0x00	; 0
    1834:	9c af       	std	Y+60, r25	; 0x3c
    1836:	8b af       	std	Y+59, r24	; 0x3b
    1838:	8b ad       	ldd	r24, Y+59	; 0x3b
    183a:	9c ad       	ldd	r25, Y+60	; 0x3c
    183c:	01 97       	sbiw	r24, 0x01	; 1
    183e:	f1 f7       	brne	.-4      	; 0x183c <LCD_Send_Char_Cp+0x266>
    1840:	9c af       	std	Y+60, r25	; 0x3c
    1842:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1844:	8d ad       	ldd	r24, Y+61	; 0x3d
    1846:	9e ad       	ldd	r25, Y+62	; 0x3e
    1848:	01 97       	sbiw	r24, 0x01	; 1
    184a:	9e af       	std	Y+62, r25	; 0x3e
    184c:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    184e:	8d ad       	ldd	r24, Y+61	; 0x3d
    1850:	9e ad       	ldd	r25, Y+62	; 0x3e
    1852:	00 97       	sbiw	r24, 0x00	; 0
    1854:	69 f7       	brne	.-38     	; 0x1830 <LCD_Send_Char_Cp+0x25a>
    1856:	16 c0       	rjmp	.+44     	; 0x1884 <LCD_Send_Char_Cp+0x2ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1858:	fe 01       	movw	r30, r28
    185a:	ff 96       	adiw	r30, 0x3f	; 63
    185c:	60 81       	ld	r22, Z
    185e:	71 81       	ldd	r23, Z+1	; 0x01
    1860:	82 81       	ldd	r24, Z+2	; 0x02
    1862:	93 81       	ldd	r25, Z+3	; 0x03
    1864:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1868:	dc 01       	movw	r26, r24
    186a:	cb 01       	movw	r24, r22
    186c:	9e af       	std	Y+62, r25	; 0x3e
    186e:	8d af       	std	Y+61, r24	; 0x3d
    1870:	8d ad       	ldd	r24, Y+61	; 0x3d
    1872:	9e ad       	ldd	r25, Y+62	; 0x3e
    1874:	9a af       	std	Y+58, r25	; 0x3a
    1876:	89 af       	std	Y+57, r24	; 0x39
    1878:	89 ad       	ldd	r24, Y+57	; 0x39
    187a:	9a ad       	ldd	r25, Y+58	; 0x3a
    187c:	01 97       	sbiw	r24, 0x01	; 1
    187e:	f1 f7       	brne	.-4      	; 0x187c <LCD_Send_Char_Cp+0x2a6>
    1880:	9a af       	std	Y+58, r25	; 0x3a
    1882:	89 af       	std	Y+57, r24	; 0x39
			_delay_ms(1) ;
			LCD_DATA_PORT = data & 0xF0 ;  /* Writing the high nibble */
    1884:	a5 e3       	ldi	r26, 0x35	; 53
    1886:	b0 e0       	ldi	r27, 0x00	; 0
    1888:	fe 01       	movw	r30, r28
    188a:	eb 5a       	subi	r30, 0xAB	; 171
    188c:	ff 4f       	sbci	r31, 0xFF	; 255
    188e:	80 81       	ld	r24, Z
    1890:	80 7f       	andi	r24, 0xF0	; 240
    1892:	8c 93       	st	X, r24
			LCD_CTRL_PORT &= ~(1<<E) ;
    1894:	ab e3       	ldi	r26, 0x3B	; 59
    1896:	b0 e0       	ldi	r27, 0x00	; 0
    1898:	eb e3       	ldi	r30, 0x3B	; 59
    189a:	f0 e0       	ldi	r31, 0x00	; 0
    189c:	80 81       	ld	r24, Z
    189e:	8d 7f       	andi	r24, 0xFD	; 253
    18a0:	8c 93       	st	X, r24
    18a2:	80 e0       	ldi	r24, 0x00	; 0
    18a4:	90 e0       	ldi	r25, 0x00	; 0
    18a6:	a0 e8       	ldi	r26, 0x80	; 128
    18a8:	bf e3       	ldi	r27, 0x3F	; 63
    18aa:	8d ab       	std	Y+53, r24	; 0x35
    18ac:	9e ab       	std	Y+54, r25	; 0x36
    18ae:	af ab       	std	Y+55, r26	; 0x37
    18b0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18b2:	6d a9       	ldd	r22, Y+53	; 0x35
    18b4:	7e a9       	ldd	r23, Y+54	; 0x36
    18b6:	8f a9       	ldd	r24, Y+55	; 0x37
    18b8:	98 ad       	ldd	r25, Y+56	; 0x38
    18ba:	20 e0       	ldi	r18, 0x00	; 0
    18bc:	30 e0       	ldi	r19, 0x00	; 0
    18be:	4a ef       	ldi	r20, 0xFA	; 250
    18c0:	54 e4       	ldi	r21, 0x44	; 68
    18c2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    18c6:	dc 01       	movw	r26, r24
    18c8:	cb 01       	movw	r24, r22
    18ca:	89 ab       	std	Y+49, r24	; 0x31
    18cc:	9a ab       	std	Y+50, r25	; 0x32
    18ce:	ab ab       	std	Y+51, r26	; 0x33
    18d0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    18d2:	69 a9       	ldd	r22, Y+49	; 0x31
    18d4:	7a a9       	ldd	r23, Y+50	; 0x32
    18d6:	8b a9       	ldd	r24, Y+51	; 0x33
    18d8:	9c a9       	ldd	r25, Y+52	; 0x34
    18da:	20 e0       	ldi	r18, 0x00	; 0
    18dc:	30 e0       	ldi	r19, 0x00	; 0
    18de:	40 e8       	ldi	r20, 0x80	; 128
    18e0:	5f e3       	ldi	r21, 0x3F	; 63
    18e2:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    18e6:	88 23       	and	r24, r24
    18e8:	2c f4       	brge	.+10     	; 0x18f4 <LCD_Send_Char_Cp+0x31e>
		__ticks = 1;
    18ea:	81 e0       	ldi	r24, 0x01	; 1
    18ec:	90 e0       	ldi	r25, 0x00	; 0
    18ee:	98 ab       	std	Y+48, r25	; 0x30
    18f0:	8f a7       	std	Y+47, r24	; 0x2f
    18f2:	3f c0       	rjmp	.+126    	; 0x1972 <LCD_Send_Char_Cp+0x39c>
	else if (__tmp > 65535)
    18f4:	69 a9       	ldd	r22, Y+49	; 0x31
    18f6:	7a a9       	ldd	r23, Y+50	; 0x32
    18f8:	8b a9       	ldd	r24, Y+51	; 0x33
    18fa:	9c a9       	ldd	r25, Y+52	; 0x34
    18fc:	20 e0       	ldi	r18, 0x00	; 0
    18fe:	3f ef       	ldi	r19, 0xFF	; 255
    1900:	4f e7       	ldi	r20, 0x7F	; 127
    1902:	57 e4       	ldi	r21, 0x47	; 71
    1904:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1908:	18 16       	cp	r1, r24
    190a:	4c f5       	brge	.+82     	; 0x195e <LCD_Send_Char_Cp+0x388>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    190c:	6d a9       	ldd	r22, Y+53	; 0x35
    190e:	7e a9       	ldd	r23, Y+54	; 0x36
    1910:	8f a9       	ldd	r24, Y+55	; 0x37
    1912:	98 ad       	ldd	r25, Y+56	; 0x38
    1914:	20 e0       	ldi	r18, 0x00	; 0
    1916:	30 e0       	ldi	r19, 0x00	; 0
    1918:	40 e2       	ldi	r20, 0x20	; 32
    191a:	51 e4       	ldi	r21, 0x41	; 65
    191c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1920:	dc 01       	movw	r26, r24
    1922:	cb 01       	movw	r24, r22
    1924:	bc 01       	movw	r22, r24
    1926:	cd 01       	movw	r24, r26
    1928:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    192c:	dc 01       	movw	r26, r24
    192e:	cb 01       	movw	r24, r22
    1930:	98 ab       	std	Y+48, r25	; 0x30
    1932:	8f a7       	std	Y+47, r24	; 0x2f
    1934:	0f c0       	rjmp	.+30     	; 0x1954 <LCD_Send_Char_Cp+0x37e>
    1936:	88 ec       	ldi	r24, 0xC8	; 200
    1938:	90 e0       	ldi	r25, 0x00	; 0
    193a:	9e a7       	std	Y+46, r25	; 0x2e
    193c:	8d a7       	std	Y+45, r24	; 0x2d
    193e:	8d a5       	ldd	r24, Y+45	; 0x2d
    1940:	9e a5       	ldd	r25, Y+46	; 0x2e
    1942:	01 97       	sbiw	r24, 0x01	; 1
    1944:	f1 f7       	brne	.-4      	; 0x1942 <LCD_Send_Char_Cp+0x36c>
    1946:	9e a7       	std	Y+46, r25	; 0x2e
    1948:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    194a:	8f a5       	ldd	r24, Y+47	; 0x2f
    194c:	98 a9       	ldd	r25, Y+48	; 0x30
    194e:	01 97       	sbiw	r24, 0x01	; 1
    1950:	98 ab       	std	Y+48, r25	; 0x30
    1952:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1954:	8f a5       	ldd	r24, Y+47	; 0x2f
    1956:	98 a9       	ldd	r25, Y+48	; 0x30
    1958:	00 97       	sbiw	r24, 0x00	; 0
    195a:	69 f7       	brne	.-38     	; 0x1936 <LCD_Send_Char_Cp+0x360>
    195c:	14 c0       	rjmp	.+40     	; 0x1986 <LCD_Send_Char_Cp+0x3b0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    195e:	69 a9       	ldd	r22, Y+49	; 0x31
    1960:	7a a9       	ldd	r23, Y+50	; 0x32
    1962:	8b a9       	ldd	r24, Y+51	; 0x33
    1964:	9c a9       	ldd	r25, Y+52	; 0x34
    1966:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    196a:	dc 01       	movw	r26, r24
    196c:	cb 01       	movw	r24, r22
    196e:	98 ab       	std	Y+48, r25	; 0x30
    1970:	8f a7       	std	Y+47, r24	; 0x2f
    1972:	8f a5       	ldd	r24, Y+47	; 0x2f
    1974:	98 a9       	ldd	r25, Y+48	; 0x30
    1976:	9c a7       	std	Y+44, r25	; 0x2c
    1978:	8b a7       	std	Y+43, r24	; 0x2b
    197a:	8b a5       	ldd	r24, Y+43	; 0x2b
    197c:	9c a5       	ldd	r25, Y+44	; 0x2c
    197e:	01 97       	sbiw	r24, 0x01	; 1
    1980:	f1 f7       	brne	.-4      	; 0x197e <LCD_Send_Char_Cp+0x3a8>
    1982:	9c a7       	std	Y+44, r25	; 0x2c
    1984:	8b a7       	std	Y+43, r24	; 0x2b
			_delay_ms(1) ;

			 LCD_CTRL_PORT |= (1<<RS) ;  /* Select IR Register */
    1986:	ab e3       	ldi	r26, 0x3B	; 59
    1988:	b0 e0       	ldi	r27, 0x00	; 0
    198a:	eb e3       	ldi	r30, 0x3B	; 59
    198c:	f0 e0       	ldi	r31, 0x00	; 0
    198e:	80 81       	ld	r24, Z
    1990:	81 60       	ori	r24, 0x01	; 1
    1992:	8c 93       	st	X, r24
    1994:	80 e0       	ldi	r24, 0x00	; 0
    1996:	90 e0       	ldi	r25, 0x00	; 0
    1998:	a0 e8       	ldi	r26, 0x80	; 128
    199a:	bf e3       	ldi	r27, 0x3F	; 63
    199c:	8f a3       	std	Y+39, r24	; 0x27
    199e:	98 a7       	std	Y+40, r25	; 0x28
    19a0:	a9 a7       	std	Y+41, r26	; 0x29
    19a2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19a4:	6f a1       	ldd	r22, Y+39	; 0x27
    19a6:	78 a5       	ldd	r23, Y+40	; 0x28
    19a8:	89 a5       	ldd	r24, Y+41	; 0x29
    19aa:	9a a5       	ldd	r25, Y+42	; 0x2a
    19ac:	20 e0       	ldi	r18, 0x00	; 0
    19ae:	30 e0       	ldi	r19, 0x00	; 0
    19b0:	4a ef       	ldi	r20, 0xFA	; 250
    19b2:	54 e4       	ldi	r21, 0x44	; 68
    19b4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    19b8:	dc 01       	movw	r26, r24
    19ba:	cb 01       	movw	r24, r22
    19bc:	8b a3       	std	Y+35, r24	; 0x23
    19be:	9c a3       	std	Y+36, r25	; 0x24
    19c0:	ad a3       	std	Y+37, r26	; 0x25
    19c2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    19c4:	6b a1       	ldd	r22, Y+35	; 0x23
    19c6:	7c a1       	ldd	r23, Y+36	; 0x24
    19c8:	8d a1       	ldd	r24, Y+37	; 0x25
    19ca:	9e a1       	ldd	r25, Y+38	; 0x26
    19cc:	20 e0       	ldi	r18, 0x00	; 0
    19ce:	30 e0       	ldi	r19, 0x00	; 0
    19d0:	40 e8       	ldi	r20, 0x80	; 128
    19d2:	5f e3       	ldi	r21, 0x3F	; 63
    19d4:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    19d8:	88 23       	and	r24, r24
    19da:	2c f4       	brge	.+10     	; 0x19e6 <LCD_Send_Char_Cp+0x410>
		__ticks = 1;
    19dc:	81 e0       	ldi	r24, 0x01	; 1
    19de:	90 e0       	ldi	r25, 0x00	; 0
    19e0:	9a a3       	std	Y+34, r25	; 0x22
    19e2:	89 a3       	std	Y+33, r24	; 0x21
    19e4:	3f c0       	rjmp	.+126    	; 0x1a64 <LCD_Send_Char_Cp+0x48e>
	else if (__tmp > 65535)
    19e6:	6b a1       	ldd	r22, Y+35	; 0x23
    19e8:	7c a1       	ldd	r23, Y+36	; 0x24
    19ea:	8d a1       	ldd	r24, Y+37	; 0x25
    19ec:	9e a1       	ldd	r25, Y+38	; 0x26
    19ee:	20 e0       	ldi	r18, 0x00	; 0
    19f0:	3f ef       	ldi	r19, 0xFF	; 255
    19f2:	4f e7       	ldi	r20, 0x7F	; 127
    19f4:	57 e4       	ldi	r21, 0x47	; 71
    19f6:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    19fa:	18 16       	cp	r1, r24
    19fc:	4c f5       	brge	.+82     	; 0x1a50 <LCD_Send_Char_Cp+0x47a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19fe:	6f a1       	ldd	r22, Y+39	; 0x27
    1a00:	78 a5       	ldd	r23, Y+40	; 0x28
    1a02:	89 a5       	ldd	r24, Y+41	; 0x29
    1a04:	9a a5       	ldd	r25, Y+42	; 0x2a
    1a06:	20 e0       	ldi	r18, 0x00	; 0
    1a08:	30 e0       	ldi	r19, 0x00	; 0
    1a0a:	40 e2       	ldi	r20, 0x20	; 32
    1a0c:	51 e4       	ldi	r21, 0x41	; 65
    1a0e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a12:	dc 01       	movw	r26, r24
    1a14:	cb 01       	movw	r24, r22
    1a16:	bc 01       	movw	r22, r24
    1a18:	cd 01       	movw	r24, r26
    1a1a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a1e:	dc 01       	movw	r26, r24
    1a20:	cb 01       	movw	r24, r22
    1a22:	9a a3       	std	Y+34, r25	; 0x22
    1a24:	89 a3       	std	Y+33, r24	; 0x21
    1a26:	0f c0       	rjmp	.+30     	; 0x1a46 <LCD_Send_Char_Cp+0x470>
    1a28:	88 ec       	ldi	r24, 0xC8	; 200
    1a2a:	90 e0       	ldi	r25, 0x00	; 0
    1a2c:	98 a3       	std	Y+32, r25	; 0x20
    1a2e:	8f 8f       	std	Y+31, r24	; 0x1f
    1a30:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1a32:	98 a1       	ldd	r25, Y+32	; 0x20
    1a34:	01 97       	sbiw	r24, 0x01	; 1
    1a36:	f1 f7       	brne	.-4      	; 0x1a34 <LCD_Send_Char_Cp+0x45e>
    1a38:	98 a3       	std	Y+32, r25	; 0x20
    1a3a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a3c:	89 a1       	ldd	r24, Y+33	; 0x21
    1a3e:	9a a1       	ldd	r25, Y+34	; 0x22
    1a40:	01 97       	sbiw	r24, 0x01	; 1
    1a42:	9a a3       	std	Y+34, r25	; 0x22
    1a44:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a46:	89 a1       	ldd	r24, Y+33	; 0x21
    1a48:	9a a1       	ldd	r25, Y+34	; 0x22
    1a4a:	00 97       	sbiw	r24, 0x00	; 0
    1a4c:	69 f7       	brne	.-38     	; 0x1a28 <LCD_Send_Char_Cp+0x452>
    1a4e:	14 c0       	rjmp	.+40     	; 0x1a78 <LCD_Send_Char_Cp+0x4a2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a50:	6b a1       	ldd	r22, Y+35	; 0x23
    1a52:	7c a1       	ldd	r23, Y+36	; 0x24
    1a54:	8d a1       	ldd	r24, Y+37	; 0x25
    1a56:	9e a1       	ldd	r25, Y+38	; 0x26
    1a58:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a5c:	dc 01       	movw	r26, r24
    1a5e:	cb 01       	movw	r24, r22
    1a60:	9a a3       	std	Y+34, r25	; 0x22
    1a62:	89 a3       	std	Y+33, r24	; 0x21
    1a64:	89 a1       	ldd	r24, Y+33	; 0x21
    1a66:	9a a1       	ldd	r25, Y+34	; 0x22
    1a68:	9e 8f       	std	Y+30, r25	; 0x1e
    1a6a:	8d 8f       	std	Y+29, r24	; 0x1d
    1a6c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1a6e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1a70:	01 97       	sbiw	r24, 0x01	; 1
    1a72:	f1 f7       	brne	.-4      	; 0x1a70 <LCD_Send_Char_Cp+0x49a>
    1a74:	9e 8f       	std	Y+30, r25	; 0x1e
    1a76:	8d 8f       	std	Y+29, r24	; 0x1d
	        _delay_ms(1) ;
			LCD_CTRL_PORT |= (1<<E) ;
    1a78:	ab e3       	ldi	r26, 0x3B	; 59
    1a7a:	b0 e0       	ldi	r27, 0x00	; 0
    1a7c:	eb e3       	ldi	r30, 0x3B	; 59
    1a7e:	f0 e0       	ldi	r31, 0x00	; 0
    1a80:	80 81       	ld	r24, Z
    1a82:	82 60       	ori	r24, 0x02	; 2
    1a84:	8c 93       	st	X, r24
    1a86:	80 e0       	ldi	r24, 0x00	; 0
    1a88:	90 e0       	ldi	r25, 0x00	; 0
    1a8a:	a0 e8       	ldi	r26, 0x80	; 128
    1a8c:	bf e3       	ldi	r27, 0x3F	; 63
    1a8e:	89 8f       	std	Y+25, r24	; 0x19
    1a90:	9a 8f       	std	Y+26, r25	; 0x1a
    1a92:	ab 8f       	std	Y+27, r26	; 0x1b
    1a94:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a96:	69 8d       	ldd	r22, Y+25	; 0x19
    1a98:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a9a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a9c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a9e:	20 e0       	ldi	r18, 0x00	; 0
    1aa0:	30 e0       	ldi	r19, 0x00	; 0
    1aa2:	4a ef       	ldi	r20, 0xFA	; 250
    1aa4:	54 e4       	ldi	r21, 0x44	; 68
    1aa6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1aaa:	dc 01       	movw	r26, r24
    1aac:	cb 01       	movw	r24, r22
    1aae:	8d 8b       	std	Y+21, r24	; 0x15
    1ab0:	9e 8b       	std	Y+22, r25	; 0x16
    1ab2:	af 8b       	std	Y+23, r26	; 0x17
    1ab4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1ab6:	6d 89       	ldd	r22, Y+21	; 0x15
    1ab8:	7e 89       	ldd	r23, Y+22	; 0x16
    1aba:	8f 89       	ldd	r24, Y+23	; 0x17
    1abc:	98 8d       	ldd	r25, Y+24	; 0x18
    1abe:	20 e0       	ldi	r18, 0x00	; 0
    1ac0:	30 e0       	ldi	r19, 0x00	; 0
    1ac2:	40 e8       	ldi	r20, 0x80	; 128
    1ac4:	5f e3       	ldi	r21, 0x3F	; 63
    1ac6:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1aca:	88 23       	and	r24, r24
    1acc:	2c f4       	brge	.+10     	; 0x1ad8 <LCD_Send_Char_Cp+0x502>
		__ticks = 1;
    1ace:	81 e0       	ldi	r24, 0x01	; 1
    1ad0:	90 e0       	ldi	r25, 0x00	; 0
    1ad2:	9c 8b       	std	Y+20, r25	; 0x14
    1ad4:	8b 8b       	std	Y+19, r24	; 0x13
    1ad6:	3f c0       	rjmp	.+126    	; 0x1b56 <LCD_Send_Char_Cp+0x580>
	else if (__tmp > 65535)
    1ad8:	6d 89       	ldd	r22, Y+21	; 0x15
    1ada:	7e 89       	ldd	r23, Y+22	; 0x16
    1adc:	8f 89       	ldd	r24, Y+23	; 0x17
    1ade:	98 8d       	ldd	r25, Y+24	; 0x18
    1ae0:	20 e0       	ldi	r18, 0x00	; 0
    1ae2:	3f ef       	ldi	r19, 0xFF	; 255
    1ae4:	4f e7       	ldi	r20, 0x7F	; 127
    1ae6:	57 e4       	ldi	r21, 0x47	; 71
    1ae8:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1aec:	18 16       	cp	r1, r24
    1aee:	4c f5       	brge	.+82     	; 0x1b42 <LCD_Send_Char_Cp+0x56c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1af0:	69 8d       	ldd	r22, Y+25	; 0x19
    1af2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1af4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1af6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1af8:	20 e0       	ldi	r18, 0x00	; 0
    1afa:	30 e0       	ldi	r19, 0x00	; 0
    1afc:	40 e2       	ldi	r20, 0x20	; 32
    1afe:	51 e4       	ldi	r21, 0x41	; 65
    1b00:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b04:	dc 01       	movw	r26, r24
    1b06:	cb 01       	movw	r24, r22
    1b08:	bc 01       	movw	r22, r24
    1b0a:	cd 01       	movw	r24, r26
    1b0c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b10:	dc 01       	movw	r26, r24
    1b12:	cb 01       	movw	r24, r22
    1b14:	9c 8b       	std	Y+20, r25	; 0x14
    1b16:	8b 8b       	std	Y+19, r24	; 0x13
    1b18:	0f c0       	rjmp	.+30     	; 0x1b38 <LCD_Send_Char_Cp+0x562>
    1b1a:	88 ec       	ldi	r24, 0xC8	; 200
    1b1c:	90 e0       	ldi	r25, 0x00	; 0
    1b1e:	9a 8b       	std	Y+18, r25	; 0x12
    1b20:	89 8b       	std	Y+17, r24	; 0x11
    1b22:	89 89       	ldd	r24, Y+17	; 0x11
    1b24:	9a 89       	ldd	r25, Y+18	; 0x12
    1b26:	01 97       	sbiw	r24, 0x01	; 1
    1b28:	f1 f7       	brne	.-4      	; 0x1b26 <LCD_Send_Char_Cp+0x550>
    1b2a:	9a 8b       	std	Y+18, r25	; 0x12
    1b2c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b2e:	8b 89       	ldd	r24, Y+19	; 0x13
    1b30:	9c 89       	ldd	r25, Y+20	; 0x14
    1b32:	01 97       	sbiw	r24, 0x01	; 1
    1b34:	9c 8b       	std	Y+20, r25	; 0x14
    1b36:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b38:	8b 89       	ldd	r24, Y+19	; 0x13
    1b3a:	9c 89       	ldd	r25, Y+20	; 0x14
    1b3c:	00 97       	sbiw	r24, 0x00	; 0
    1b3e:	69 f7       	brne	.-38     	; 0x1b1a <LCD_Send_Char_Cp+0x544>
    1b40:	14 c0       	rjmp	.+40     	; 0x1b6a <LCD_Send_Char_Cp+0x594>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b42:	6d 89       	ldd	r22, Y+21	; 0x15
    1b44:	7e 89       	ldd	r23, Y+22	; 0x16
    1b46:	8f 89       	ldd	r24, Y+23	; 0x17
    1b48:	98 8d       	ldd	r25, Y+24	; 0x18
    1b4a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b4e:	dc 01       	movw	r26, r24
    1b50:	cb 01       	movw	r24, r22
    1b52:	9c 8b       	std	Y+20, r25	; 0x14
    1b54:	8b 8b       	std	Y+19, r24	; 0x13
    1b56:	8b 89       	ldd	r24, Y+19	; 0x13
    1b58:	9c 89       	ldd	r25, Y+20	; 0x14
    1b5a:	98 8b       	std	Y+16, r25	; 0x10
    1b5c:	8f 87       	std	Y+15, r24	; 0x0f
    1b5e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b60:	98 89       	ldd	r25, Y+16	; 0x10
    1b62:	01 97       	sbiw	r24, 0x01	; 1
    1b64:	f1 f7       	brne	.-4      	; 0x1b62 <LCD_Send_Char_Cp+0x58c>
    1b66:	98 8b       	std	Y+16, r25	; 0x10
    1b68:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(1) ;
			LCD_DATA_PORT = (data<<4)   ;  /* Writing the Low Nibble to D4 ~ D7 */
    1b6a:	a5 e3       	ldi	r26, 0x35	; 53
    1b6c:	b0 e0       	ldi	r27, 0x00	; 0
    1b6e:	fe 01       	movw	r30, r28
    1b70:	eb 5a       	subi	r30, 0xAB	; 171
    1b72:	ff 4f       	sbci	r31, 0xFF	; 255
    1b74:	80 81       	ld	r24, Z
    1b76:	82 95       	swap	r24
    1b78:	80 7f       	andi	r24, 0xF0	; 240
    1b7a:	8c 93       	st	X, r24
			LCD_CTRL_PORT &= ~(1<<E) ;
    1b7c:	ab e3       	ldi	r26, 0x3B	; 59
    1b7e:	b0 e0       	ldi	r27, 0x00	; 0
    1b80:	eb e3       	ldi	r30, 0x3B	; 59
    1b82:	f0 e0       	ldi	r31, 0x00	; 0
    1b84:	80 81       	ld	r24, Z
    1b86:	8d 7f       	andi	r24, 0xFD	; 253
    1b88:	8c 93       	st	X, r24
    1b8a:	80 e0       	ldi	r24, 0x00	; 0
    1b8c:	90 e0       	ldi	r25, 0x00	; 0
    1b8e:	a0 e8       	ldi	r26, 0x80	; 128
    1b90:	bf e3       	ldi	r27, 0x3F	; 63
    1b92:	8b 87       	std	Y+11, r24	; 0x0b
    1b94:	9c 87       	std	Y+12, r25	; 0x0c
    1b96:	ad 87       	std	Y+13, r26	; 0x0d
    1b98:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b9a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b9c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b9e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ba0:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ba2:	20 e0       	ldi	r18, 0x00	; 0
    1ba4:	30 e0       	ldi	r19, 0x00	; 0
    1ba6:	4a ef       	ldi	r20, 0xFA	; 250
    1ba8:	54 e4       	ldi	r21, 0x44	; 68
    1baa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1bae:	dc 01       	movw	r26, r24
    1bb0:	cb 01       	movw	r24, r22
    1bb2:	8f 83       	std	Y+7, r24	; 0x07
    1bb4:	98 87       	std	Y+8, r25	; 0x08
    1bb6:	a9 87       	std	Y+9, r26	; 0x09
    1bb8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1bba:	6f 81       	ldd	r22, Y+7	; 0x07
    1bbc:	78 85       	ldd	r23, Y+8	; 0x08
    1bbe:	89 85       	ldd	r24, Y+9	; 0x09
    1bc0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bc2:	20 e0       	ldi	r18, 0x00	; 0
    1bc4:	30 e0       	ldi	r19, 0x00	; 0
    1bc6:	40 e8       	ldi	r20, 0x80	; 128
    1bc8:	5f e3       	ldi	r21, 0x3F	; 63
    1bca:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1bce:	88 23       	and	r24, r24
    1bd0:	2c f4       	brge	.+10     	; 0x1bdc <LCD_Send_Char_Cp+0x606>
		__ticks = 1;
    1bd2:	81 e0       	ldi	r24, 0x01	; 1
    1bd4:	90 e0       	ldi	r25, 0x00	; 0
    1bd6:	9e 83       	std	Y+6, r25	; 0x06
    1bd8:	8d 83       	std	Y+5, r24	; 0x05
    1bda:	3f c0       	rjmp	.+126    	; 0x1c5a <LCD_Send_Char_Cp+0x684>
	else if (__tmp > 65535)
    1bdc:	6f 81       	ldd	r22, Y+7	; 0x07
    1bde:	78 85       	ldd	r23, Y+8	; 0x08
    1be0:	89 85       	ldd	r24, Y+9	; 0x09
    1be2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1be4:	20 e0       	ldi	r18, 0x00	; 0
    1be6:	3f ef       	ldi	r19, 0xFF	; 255
    1be8:	4f e7       	ldi	r20, 0x7F	; 127
    1bea:	57 e4       	ldi	r21, 0x47	; 71
    1bec:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1bf0:	18 16       	cp	r1, r24
    1bf2:	4c f5       	brge	.+82     	; 0x1c46 <LCD_Send_Char_Cp+0x670>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bf4:	6b 85       	ldd	r22, Y+11	; 0x0b
    1bf6:	7c 85       	ldd	r23, Y+12	; 0x0c
    1bf8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bfa:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bfc:	20 e0       	ldi	r18, 0x00	; 0
    1bfe:	30 e0       	ldi	r19, 0x00	; 0
    1c00:	40 e2       	ldi	r20, 0x20	; 32
    1c02:	51 e4       	ldi	r21, 0x41	; 65
    1c04:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c08:	dc 01       	movw	r26, r24
    1c0a:	cb 01       	movw	r24, r22
    1c0c:	bc 01       	movw	r22, r24
    1c0e:	cd 01       	movw	r24, r26
    1c10:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c14:	dc 01       	movw	r26, r24
    1c16:	cb 01       	movw	r24, r22
    1c18:	9e 83       	std	Y+6, r25	; 0x06
    1c1a:	8d 83       	std	Y+5, r24	; 0x05
    1c1c:	0f c0       	rjmp	.+30     	; 0x1c3c <LCD_Send_Char_Cp+0x666>
    1c1e:	88 ec       	ldi	r24, 0xC8	; 200
    1c20:	90 e0       	ldi	r25, 0x00	; 0
    1c22:	9c 83       	std	Y+4, r25	; 0x04
    1c24:	8b 83       	std	Y+3, r24	; 0x03
    1c26:	8b 81       	ldd	r24, Y+3	; 0x03
    1c28:	9c 81       	ldd	r25, Y+4	; 0x04
    1c2a:	01 97       	sbiw	r24, 0x01	; 1
    1c2c:	f1 f7       	brne	.-4      	; 0x1c2a <LCD_Send_Char_Cp+0x654>
    1c2e:	9c 83       	std	Y+4, r25	; 0x04
    1c30:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c32:	8d 81       	ldd	r24, Y+5	; 0x05
    1c34:	9e 81       	ldd	r25, Y+6	; 0x06
    1c36:	01 97       	sbiw	r24, 0x01	; 1
    1c38:	9e 83       	std	Y+6, r25	; 0x06
    1c3a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c3c:	8d 81       	ldd	r24, Y+5	; 0x05
    1c3e:	9e 81       	ldd	r25, Y+6	; 0x06
    1c40:	00 97       	sbiw	r24, 0x00	; 0
    1c42:	69 f7       	brne	.-38     	; 0x1c1e <LCD_Send_Char_Cp+0x648>
    1c44:	14 c0       	rjmp	.+40     	; 0x1c6e <LCD_Send_Char_Cp+0x698>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c46:	6f 81       	ldd	r22, Y+7	; 0x07
    1c48:	78 85       	ldd	r23, Y+8	; 0x08
    1c4a:	89 85       	ldd	r24, Y+9	; 0x09
    1c4c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c4e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c52:	dc 01       	movw	r26, r24
    1c54:	cb 01       	movw	r24, r22
    1c56:	9e 83       	std	Y+6, r25	; 0x06
    1c58:	8d 83       	std	Y+5, r24	; 0x05
    1c5a:	8d 81       	ldd	r24, Y+5	; 0x05
    1c5c:	9e 81       	ldd	r25, Y+6	; 0x06
    1c5e:	9a 83       	std	Y+2, r25	; 0x02
    1c60:	89 83       	std	Y+1, r24	; 0x01
    1c62:	89 81       	ldd	r24, Y+1	; 0x01
    1c64:	9a 81       	ldd	r25, Y+2	; 0x02
    1c66:	01 97       	sbiw	r24, 0x01	; 1
    1c68:	f1 f7       	brne	.-4      	; 0x1c66 <LCD_Send_Char_Cp+0x690>
    1c6a:	9a 83       	std	Y+2, r25	; 0x02
    1c6c:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(1) ;
#endif
}
    1c6e:	cb 5a       	subi	r28, 0xAB	; 171
    1c70:	df 4f       	sbci	r29, 0xFF	; 255
    1c72:	0f b6       	in	r0, 0x3f	; 63
    1c74:	f8 94       	cli
    1c76:	de bf       	out	0x3e, r29	; 62
    1c78:	0f be       	out	0x3f, r0	; 63
    1c7a:	cd bf       	out	0x3d, r28	; 61
    1c7c:	cf 91       	pop	r28
    1c7e:	df 91       	pop	r29
    1c80:	1f 91       	pop	r17
    1c82:	0f 91       	pop	r16
    1c84:	08 95       	ret

00001c86 <LCD_Send_Text_Cp>:
 * Input: Array Of Character
 * Output:Nothing
 *
 */
void LCD_Send_Text_Cp(u8 *String)
{
    1c86:	df 93       	push	r29
    1c88:	cf 93       	push	r28
    1c8a:	00 d0       	rcall	.+0      	; 0x1c8c <LCD_Send_Text_Cp+0x6>
    1c8c:	0f 92       	push	r0
    1c8e:	cd b7       	in	r28, 0x3d	; 61
    1c90:	de b7       	in	r29, 0x3e	; 62
    1c92:	9b 83       	std	Y+3, r25	; 0x03
    1c94:	8a 83       	std	Y+2, r24	; 0x02
	 u8 i = 0 ;
    1c96:	19 82       	std	Y+1, r1	; 0x01
    1c98:	0f c0       	rjmp	.+30     	; 0x1cb8 <LCD_Send_Text_Cp+0x32>
	while(String[i] != '\0' )
	{

	 LCD_Send_Char_Cp(String[i++]) ;
    1c9a:	89 81       	ldd	r24, Y+1	; 0x01
    1c9c:	28 2f       	mov	r18, r24
    1c9e:	30 e0       	ldi	r19, 0x00	; 0
    1ca0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ca2:	9b 81       	ldd	r25, Y+3	; 0x03
    1ca4:	fc 01       	movw	r30, r24
    1ca6:	e2 0f       	add	r30, r18
    1ca8:	f3 1f       	adc	r31, r19
    1caa:	90 81       	ld	r25, Z
    1cac:	89 81       	ldd	r24, Y+1	; 0x01
    1cae:	8f 5f       	subi	r24, 0xFF	; 255
    1cb0:	89 83       	std	Y+1, r24	; 0x01
    1cb2:	89 2f       	mov	r24, r25
    1cb4:	0e 94 eb 0a 	call	0x15d6	; 0x15d6 <LCD_Send_Char_Cp>
 *
 */
void LCD_Send_Text_Cp(u8 *String)
{
	 u8 i = 0 ;
	while(String[i] != '\0' )
    1cb8:	89 81       	ldd	r24, Y+1	; 0x01
    1cba:	28 2f       	mov	r18, r24
    1cbc:	30 e0       	ldi	r19, 0x00	; 0
    1cbe:	8a 81       	ldd	r24, Y+2	; 0x02
    1cc0:	9b 81       	ldd	r25, Y+3	; 0x03
    1cc2:	fc 01       	movw	r30, r24
    1cc4:	e2 0f       	add	r30, r18
    1cc6:	f3 1f       	adc	r31, r19
    1cc8:	80 81       	ld	r24, Z
    1cca:	88 23       	and	r24, r24
    1ccc:	31 f7       	brne	.-52     	; 0x1c9a <LCD_Send_Text_Cp+0x14>

	}


 return ;
}
    1cce:	0f 90       	pop	r0
    1cd0:	0f 90       	pop	r0
    1cd2:	0f 90       	pop	r0
    1cd4:	cf 91       	pop	r28
    1cd6:	df 91       	pop	r29
    1cd8:	08 95       	ret

00001cda <LCD_GotoX_Y>:
 * Input: X Row , Y Column
 * Output:Nothing
 *
 */
void LCD_GotoX_Y(u8 Row , u8 Column)
{
    1cda:	df 93       	push	r29
    1cdc:	cf 93       	push	r28
    1cde:	00 d0       	rcall	.+0      	; 0x1ce0 <LCD_GotoX_Y+0x6>
    1ce0:	00 d0       	rcall	.+0      	; 0x1ce2 <LCD_GotoX_Y+0x8>
    1ce2:	00 d0       	rcall	.+0      	; 0x1ce4 <LCD_GotoX_Y+0xa>
    1ce4:	cd b7       	in	r28, 0x3d	; 61
    1ce6:	de b7       	in	r29, 0x3e	; 62
    1ce8:	8d 83       	std	Y+5, r24	; 0x05
    1cea:	6e 83       	std	Y+6, r22	; 0x06
	/* This Array contains the start address of each Row */
	u8 Rows_Start_Address[] = {0x80 , 0xC0 , 0x94 , 0xD4} ;
    1cec:	80 e8       	ldi	r24, 0x80	; 128
    1cee:	89 83       	std	Y+1, r24	; 0x01
    1cf0:	80 ec       	ldi	r24, 0xC0	; 192
    1cf2:	8a 83       	std	Y+2, r24	; 0x02
    1cf4:	84 e9       	ldi	r24, 0x94	; 148
    1cf6:	8b 83       	std	Y+3, r24	; 0x03
    1cf8:	84 ed       	ldi	r24, 0xD4	; 212
    1cfa:	8c 83       	std	Y+4, r24	; 0x04

	LCD_Send_Command(Rows_Start_Address[Row-1] + (Column-1)) ;
    1cfc:	8d 81       	ldd	r24, Y+5	; 0x05
    1cfe:	88 2f       	mov	r24, r24
    1d00:	90 e0       	ldi	r25, 0x00	; 0
    1d02:	9c 01       	movw	r18, r24
    1d04:	21 50       	subi	r18, 0x01	; 1
    1d06:	30 40       	sbci	r19, 0x00	; 0
    1d08:	ce 01       	movw	r24, r28
    1d0a:	01 96       	adiw	r24, 0x01	; 1
    1d0c:	fc 01       	movw	r30, r24
    1d0e:	e2 0f       	add	r30, r18
    1d10:	f3 1f       	adc	r31, r19
    1d12:	90 81       	ld	r25, Z
    1d14:	8e 81       	ldd	r24, Y+6	; 0x06
    1d16:	89 0f       	add	r24, r25
    1d18:	81 50       	subi	r24, 0x01	; 1
    1d1a:	0e 94 9b 05 	call	0xb36	; 0xb36 <LCD_Send_Command>


return ;
}
    1d1e:	26 96       	adiw	r28, 0x06	; 6
    1d20:	0f b6       	in	r0, 0x3f	; 63
    1d22:	f8 94       	cli
    1d24:	de bf       	out	0x3e, r29	; 62
    1d26:	0f be       	out	0x3f, r0	; 63
    1d28:	cd bf       	out	0x3d, r28	; 61
    1d2a:	cf 91       	pop	r28
    1d2c:	df 91       	pop	r29
    1d2e:	08 95       	ret

00001d30 <LCD_Send_Char>:
 * Input: Required Character
 * Output:Nothing
 *
 */
void LCD_Send_Char(u8 Row , u8 Column , u8 data)
{
    1d30:	df 93       	push	r29
    1d32:	cf 93       	push	r28
    1d34:	00 d0       	rcall	.+0      	; 0x1d36 <LCD_Send_Char+0x6>
    1d36:	0f 92       	push	r0
    1d38:	cd b7       	in	r28, 0x3d	; 61
    1d3a:	de b7       	in	r29, 0x3e	; 62
    1d3c:	89 83       	std	Y+1, r24	; 0x01
    1d3e:	6a 83       	std	Y+2, r22	; 0x02
    1d40:	4b 83       	std	Y+3, r20	; 0x03
	LCD_GotoX_Y(Row,Column) ;
    1d42:	89 81       	ldd	r24, Y+1	; 0x01
    1d44:	6a 81       	ldd	r22, Y+2	; 0x02
    1d46:	0e 94 6d 0e 	call	0x1cda	; 0x1cda <LCD_GotoX_Y>
	LCD_Send_Char_Cp(data) ;
    1d4a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d4c:	0e 94 eb 0a 	call	0x15d6	; 0x15d6 <LCD_Send_Char_Cp>


return ;
}
    1d50:	0f 90       	pop	r0
    1d52:	0f 90       	pop	r0
    1d54:	0f 90       	pop	r0
    1d56:	cf 91       	pop	r28
    1d58:	df 91       	pop	r29
    1d5a:	08 95       	ret

00001d5c <LCD_Send_Text>:
 * Input: Array Of Character
 * Output:Nothing
 *
 */
void LCD_Send_Text(u8 Row , u8 Column , u8* data)
{
    1d5c:	df 93       	push	r29
    1d5e:	cf 93       	push	r28
    1d60:	00 d0       	rcall	.+0      	; 0x1d62 <LCD_Send_Text+0x6>
    1d62:	00 d0       	rcall	.+0      	; 0x1d64 <LCD_Send_Text+0x8>
    1d64:	cd b7       	in	r28, 0x3d	; 61
    1d66:	de b7       	in	r29, 0x3e	; 62
    1d68:	89 83       	std	Y+1, r24	; 0x01
    1d6a:	6a 83       	std	Y+2, r22	; 0x02
    1d6c:	5c 83       	std	Y+4, r21	; 0x04
    1d6e:	4b 83       	std	Y+3, r20	; 0x03
	LCD_GotoX_Y(Row,Column) ;
    1d70:	89 81       	ldd	r24, Y+1	; 0x01
    1d72:	6a 81       	ldd	r22, Y+2	; 0x02
    1d74:	0e 94 6d 0e 	call	0x1cda	; 0x1cda <LCD_GotoX_Y>
	LCD_Send_Text_Cp(data) ;
    1d78:	8b 81       	ldd	r24, Y+3	; 0x03
    1d7a:	9c 81       	ldd	r25, Y+4	; 0x04
    1d7c:	0e 94 43 0e 	call	0x1c86	; 0x1c86 <LCD_Send_Text_Cp>

return ;
}
    1d80:	0f 90       	pop	r0
    1d82:	0f 90       	pop	r0
    1d84:	0f 90       	pop	r0
    1d86:	0f 90       	pop	r0
    1d88:	cf 91       	pop	r28
    1d8a:	df 91       	pop	r29
    1d8c:	08 95       	ret

00001d8e <LCD_Clear>:
 * Output:Nothing
 *
 */

void LCD_Clear(void)
{
    1d8e:	df 93       	push	r29
    1d90:	cf 93       	push	r28
    1d92:	cd b7       	in	r28, 0x3d	; 61
    1d94:	de b7       	in	r29, 0x3e	; 62
  LCD_Send_Command(LCD_CLEAR) ;
    1d96:	81 e0       	ldi	r24, 0x01	; 1
    1d98:	0e 94 9b 05 	call	0xb36	; 0xb36 <LCD_Send_Command>
  return ;
}
    1d9c:	cf 91       	pop	r28
    1d9e:	df 91       	pop	r29
    1da0:	08 95       	ret

00001da2 <CheckIfBusy>:
 * Input: Nothing
 * Output: 0 when it is not busy 1 when it is busy
 */

u8 CheckIfBusy(void)
{
    1da2:	df 93       	push	r29
    1da4:	cf 93       	push	r28
    1da6:	0f 92       	push	r0
    1da8:	cd b7       	in	r28, 0x3d	; 61
    1daa:	de b7       	in	r29, 0x3e	; 62
/*Pin7 is Input in LCD_PORT */
  LCD_DATA_DDR = 0x7F ;
    1dac:	e4 e3       	ldi	r30, 0x34	; 52
    1dae:	f0 e0       	ldi	r31, 0x00	; 0
    1db0:	8f e7       	ldi	r24, 0x7F	; 127
    1db2:	80 83       	st	Z, r24
  LCD_CTRL_PORT |= (1<<E) ;
    1db4:	ab e3       	ldi	r26, 0x3B	; 59
    1db6:	b0 e0       	ldi	r27, 0x00	; 0
    1db8:	eb e3       	ldi	r30, 0x3B	; 59
    1dba:	f0 e0       	ldi	r31, 0x00	; 0
    1dbc:	80 81       	ld	r24, Z
    1dbe:	82 60       	ori	r24, 0x02	; 2
    1dc0:	8c 93       	st	X, r24
  LCD_CTRL_PORT &= ~(1<<RS) ;
    1dc2:	ab e3       	ldi	r26, 0x3B	; 59
    1dc4:	b0 e0       	ldi	r27, 0x00	; 0
    1dc6:	eb e3       	ldi	r30, 0x3B	; 59
    1dc8:	f0 e0       	ldi	r31, 0x00	; 0
    1dca:	80 81       	ld	r24, Z
    1dcc:	8e 7f       	andi	r24, 0xFE	; 254
    1dce:	8c 93       	st	X, r24
  LCD_CTRL_PORT |=  (1<<RW) ;
    1dd0:	ab e3       	ldi	r26, 0x3B	; 59
    1dd2:	b0 e0       	ldi	r27, 0x00	; 0
    1dd4:	eb e3       	ldi	r30, 0x3B	; 59
    1dd6:	f0 e0       	ldi	r31, 0x00	; 0
    1dd8:	80 81       	ld	r24, Z
    1dda:	84 60       	ori	r24, 0x04	; 4
    1ddc:	8c 93       	st	X, r24
 u8 BusyFlag = (((LCD_DATA_PIN>>7)&&1) == 1) ? 1 : 0 ;
    1dde:	e3 e3       	ldi	r30, 0x33	; 51
    1de0:	f0 e0       	ldi	r31, 0x00	; 0
    1de2:	80 81       	ld	r24, Z
    1de4:	19 82       	std	Y+1, r1	; 0x01
    1de6:	88 23       	and	r24, r24
    1de8:	14 f4       	brge	.+4      	; 0x1dee <CheckIfBusy+0x4c>
    1dea:	81 e0       	ldi	r24, 0x01	; 1
    1dec:	89 83       	std	Y+1, r24	; 0x01

 return (BusyFlag) ;
    1dee:	89 81       	ldd	r24, Y+1	; 0x01
}
    1df0:	0f 90       	pop	r0
    1df2:	cf 91       	pop	r28
    1df4:	df 91       	pop	r29
    1df6:	08 95       	ret

00001df8 <LCD_Generate_Character>:
 * Generate_Character: This function enable the user to generate a custome character
 * Input: Array of character which contain the 7 rows of character pattern
 * output: Nothing
 */
void LCD_Generate_Character(u8 *Char_Rows , u8 Address)
{
    1df8:	df 93       	push	r29
    1dfa:	cf 93       	push	r28
    1dfc:	00 d0       	rcall	.+0      	; 0x1dfe <LCD_Generate_Character+0x6>
    1dfe:	00 d0       	rcall	.+0      	; 0x1e00 <LCD_Generate_Character+0x8>
    1e00:	cd b7       	in	r28, 0x3d	; 61
    1e02:	de b7       	in	r29, 0x3e	; 62
    1e04:	9b 83       	std	Y+3, r25	; 0x03
    1e06:	8a 83       	std	Y+2, r24	; 0x02
    1e08:	6c 83       	std	Y+4, r22	; 0x04
	    u8 i = 0 ;
    1e0a:	19 82       	std	Y+1, r1	; 0x01
	    LCD_CTRL_PORT &= ~(1<<RS) ;
    1e0c:	ab e3       	ldi	r26, 0x3B	; 59
    1e0e:	b0 e0       	ldi	r27, 0x00	; 0
    1e10:	eb e3       	ldi	r30, 0x3B	; 59
    1e12:	f0 e0       	ldi	r31, 0x00	; 0
    1e14:	80 81       	ld	r24, Z
    1e16:	8e 7f       	andi	r24, 0xFE	; 254
    1e18:	8c 93       	st	X, r24
	    LCD_CTRL_PORT &= ~(1<<RW) ;
    1e1a:	ab e3       	ldi	r26, 0x3B	; 59
    1e1c:	b0 e0       	ldi	r27, 0x00	; 0
    1e1e:	eb e3       	ldi	r30, 0x3B	; 59
    1e20:	f0 e0       	ldi	r31, 0x00	; 0
    1e22:	80 81       	ld	r24, Z
    1e24:	8b 7f       	andi	r24, 0xFB	; 251
    1e26:	8c 93       	st	X, r24

		 if(Address < 8 )
    1e28:	8c 81       	ldd	r24, Y+4	; 0x04
    1e2a:	88 30       	cpi	r24, 0x08	; 8
    1e2c:	60 f4       	brcc	.+24     	; 0x1e46 <LCD_Generate_Character+0x4e>
		 {
			 /*User will Send 0 , 1 , 2 .....*/
			LCD_Send_Command(0x40+Address*8) ;  /* From Datasheet Set CGRAM Address */
    1e2e:	8c 81       	ldd	r24, Y+4	; 0x04
    1e30:	88 2f       	mov	r24, r24
    1e32:	90 e0       	ldi	r25, 0x00	; 0
    1e34:	08 96       	adiw	r24, 0x08	; 8
    1e36:	88 0f       	add	r24, r24
    1e38:	99 1f       	adc	r25, r25
    1e3a:	88 0f       	add	r24, r24
    1e3c:	99 1f       	adc	r25, r25
    1e3e:	88 0f       	add	r24, r24
    1e40:	99 1f       	adc	r25, r25
    1e42:	0e 94 9b 05 	call	0xb36	; 0xb36 <LCD_Send_Command>

		 }

		 for(i = 0 ; i < 7 ; i++)
    1e46:	19 82       	std	Y+1, r1	; 0x01
    1e48:	0e c0       	rjmp	.+28     	; 0x1e66 <LCD_Generate_Character+0x6e>
		 {
			 LCD_Send_Char_Cp(Char_Rows[i]) ;
    1e4a:	89 81       	ldd	r24, Y+1	; 0x01
    1e4c:	28 2f       	mov	r18, r24
    1e4e:	30 e0       	ldi	r19, 0x00	; 0
    1e50:	8a 81       	ldd	r24, Y+2	; 0x02
    1e52:	9b 81       	ldd	r25, Y+3	; 0x03
    1e54:	fc 01       	movw	r30, r24
    1e56:	e2 0f       	add	r30, r18
    1e58:	f3 1f       	adc	r31, r19
    1e5a:	80 81       	ld	r24, Z
    1e5c:	0e 94 eb 0a 	call	0x15d6	; 0x15d6 <LCD_Send_Char_Cp>
			 /*User will Send 0 , 1 , 2 .....*/
			LCD_Send_Command(0x40+Address*8) ;  /* From Datasheet Set CGRAM Address */

		 }

		 for(i = 0 ; i < 7 ; i++)
    1e60:	89 81       	ldd	r24, Y+1	; 0x01
    1e62:	8f 5f       	subi	r24, 0xFF	; 255
    1e64:	89 83       	std	Y+1, r24	; 0x01
    1e66:	89 81       	ldd	r24, Y+1	; 0x01
    1e68:	87 30       	cpi	r24, 0x07	; 7
    1e6a:	78 f3       	brcs	.-34     	; 0x1e4a <LCD_Generate_Character+0x52>
		 {
			 LCD_Send_Char_Cp(Char_Rows[i]) ;
		 }
        /* After this step we define the passed character code */

       LCD_CTRL_PORT &= ~(1<<RS) ;
    1e6c:	ab e3       	ldi	r26, 0x3B	; 59
    1e6e:	b0 e0       	ldi	r27, 0x00	; 0
    1e70:	eb e3       	ldi	r30, 0x3B	; 59
    1e72:	f0 e0       	ldi	r31, 0x00	; 0
    1e74:	80 81       	ld	r24, Z
    1e76:	8e 7f       	andi	r24, 0xFE	; 254
    1e78:	8c 93       	st	X, r24
       LCD_CTRL_PORT &= ~(1<<RW) ;
    1e7a:	ab e3       	ldi	r26, 0x3B	; 59
    1e7c:	b0 e0       	ldi	r27, 0x00	; 0
    1e7e:	eb e3       	ldi	r30, 0x3B	; 59
    1e80:	f0 e0       	ldi	r31, 0x00	; 0
    1e82:	80 81       	ld	r24, Z
    1e84:	8b 7f       	andi	r24, 0xFB	; 251
    1e86:	8c 93       	st	X, r24

       LCD_Send_Command(0x80+Address) ; /*Set DDRAM Address */
    1e88:	8c 81       	ldd	r24, Y+4	; 0x04
    1e8a:	80 58       	subi	r24, 0x80	; 128
    1e8c:	0e 94 9b 05 	call	0xb36	; 0xb36 <LCD_Send_Command>

       LCD_CTRL_PORT |= (1<<RS) ;
    1e90:	ab e3       	ldi	r26, 0x3B	; 59
    1e92:	b0 e0       	ldi	r27, 0x00	; 0
    1e94:	eb e3       	ldi	r30, 0x3B	; 59
    1e96:	f0 e0       	ldi	r31, 0x00	; 0
    1e98:	80 81       	ld	r24, Z
    1e9a:	81 60       	ori	r24, 0x01	; 1
    1e9c:	8c 93       	st	X, r24
       LCD_CTRL_PORT &= ~(1<<RW) ;
    1e9e:	ab e3       	ldi	r26, 0x3B	; 59
    1ea0:	b0 e0       	ldi	r27, 0x00	; 0
    1ea2:	eb e3       	ldi	r30, 0x3B	; 59
    1ea4:	f0 e0       	ldi	r31, 0x00	; 0
    1ea6:	80 81       	ld	r24, Z
    1ea8:	8b 7f       	andi	r24, 0xFB	; 251
    1eaa:	8c 93       	st	X, r24

       /* Display the Generated character */
       LCD_Send_Char_Cp(Address) ;
    1eac:	8c 81       	ldd	r24, Y+4	; 0x04
    1eae:	0e 94 eb 0a 	call	0x15d6	; 0x15d6 <LCD_Send_Char_Cp>
return ;
}
    1eb2:	0f 90       	pop	r0
    1eb4:	0f 90       	pop	r0
    1eb6:	0f 90       	pop	r0
    1eb8:	0f 90       	pop	r0
    1eba:	cf 91       	pop	r28
    1ebc:	df 91       	pop	r29
    1ebe:	08 95       	ret

00001ec0 <LCD_Read_Byte>:
 * LCD Read: This Function Return a 8bit character from DDRAM or CGRAM
 * Input: Address of the byte you want to read
 * Output: The required character
 */
u8 LCD_Read_Byte(u8 Address)
{
    1ec0:	0f 93       	push	r16
    1ec2:	1f 93       	push	r17
    1ec4:	df 93       	push	r29
    1ec6:	cf 93       	push	r28
    1ec8:	cd b7       	in	r28, 0x3d	; 61
    1eca:	de b7       	in	r29, 0x3e	; 62
    1ecc:	c6 55       	subi	r28, 0x56	; 86
    1ece:	d0 40       	sbci	r29, 0x00	; 0
    1ed0:	0f b6       	in	r0, 0x3f	; 63
    1ed2:	f8 94       	cli
    1ed4:	de bf       	out	0x3e, r29	; 62
    1ed6:	0f be       	out	0x3f, r0	; 63
    1ed8:	cd bf       	out	0x3d, r28	; 61
    1eda:	fe 01       	movw	r30, r28
    1edc:	ea 5a       	subi	r30, 0xAA	; 170
    1ede:	ff 4f       	sbci	r31, 0xFF	; 255
    1ee0:	80 83       	st	Z, r24
	 LCD_DATA_DDR = 0x00 ; 	 /* LCD Port is Input */
    1ee2:	e4 e3       	ldi	r30, 0x34	; 52
    1ee4:	f0 e0       	ldi	r31, 0x00	; 0
    1ee6:	10 82       	st	Z, r1
      _delay_ms(1) ;
#endif


#if LCD_BIT_MODE == 4
	  LCD_CTRL_PORT |= (1<<RW) ;
    1ee8:	ab e3       	ldi	r26, 0x3B	; 59
    1eea:	b0 e0       	ldi	r27, 0x00	; 0
    1eec:	eb e3       	ldi	r30, 0x3B	; 59
    1eee:	f0 e0       	ldi	r31, 0x00	; 0
    1ef0:	80 81       	ld	r24, Z
    1ef2:	84 60       	ori	r24, 0x04	; 4
    1ef4:	8c 93       	st	X, r24
    1ef6:	fe 01       	movw	r30, r28
    1ef8:	ef 5a       	subi	r30, 0xAF	; 175
    1efa:	ff 4f       	sbci	r31, 0xFF	; 255
    1efc:	80 e0       	ldi	r24, 0x00	; 0
    1efe:	90 e0       	ldi	r25, 0x00	; 0
    1f00:	a0 e8       	ldi	r26, 0x80	; 128
    1f02:	bf e3       	ldi	r27, 0x3F	; 63
    1f04:	80 83       	st	Z, r24
    1f06:	91 83       	std	Z+1, r25	; 0x01
    1f08:	a2 83       	std	Z+2, r26	; 0x02
    1f0a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f0c:	8e 01       	movw	r16, r28
    1f0e:	03 5b       	subi	r16, 0xB3	; 179
    1f10:	1f 4f       	sbci	r17, 0xFF	; 255
    1f12:	fe 01       	movw	r30, r28
    1f14:	ef 5a       	subi	r30, 0xAF	; 175
    1f16:	ff 4f       	sbci	r31, 0xFF	; 255
    1f18:	60 81       	ld	r22, Z
    1f1a:	71 81       	ldd	r23, Z+1	; 0x01
    1f1c:	82 81       	ldd	r24, Z+2	; 0x02
    1f1e:	93 81       	ldd	r25, Z+3	; 0x03
    1f20:	20 e0       	ldi	r18, 0x00	; 0
    1f22:	30 e0       	ldi	r19, 0x00	; 0
    1f24:	4a ef       	ldi	r20, 0xFA	; 250
    1f26:	54 e4       	ldi	r21, 0x44	; 68
    1f28:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f2c:	dc 01       	movw	r26, r24
    1f2e:	cb 01       	movw	r24, r22
    1f30:	f8 01       	movw	r30, r16
    1f32:	80 83       	st	Z, r24
    1f34:	91 83       	std	Z+1, r25	; 0x01
    1f36:	a2 83       	std	Z+2, r26	; 0x02
    1f38:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1f3a:	fe 01       	movw	r30, r28
    1f3c:	e3 5b       	subi	r30, 0xB3	; 179
    1f3e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f40:	60 81       	ld	r22, Z
    1f42:	71 81       	ldd	r23, Z+1	; 0x01
    1f44:	82 81       	ldd	r24, Z+2	; 0x02
    1f46:	93 81       	ldd	r25, Z+3	; 0x03
    1f48:	20 e0       	ldi	r18, 0x00	; 0
    1f4a:	30 e0       	ldi	r19, 0x00	; 0
    1f4c:	40 e8       	ldi	r20, 0x80	; 128
    1f4e:	5f e3       	ldi	r21, 0x3F	; 63
    1f50:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1f54:	88 23       	and	r24, r24
    1f56:	44 f4       	brge	.+16     	; 0x1f68 <LCD_Read_Byte+0xa8>
		__ticks = 1;
    1f58:	fe 01       	movw	r30, r28
    1f5a:	e5 5b       	subi	r30, 0xB5	; 181
    1f5c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f5e:	81 e0       	ldi	r24, 0x01	; 1
    1f60:	90 e0       	ldi	r25, 0x00	; 0
    1f62:	91 83       	std	Z+1, r25	; 0x01
    1f64:	80 83       	st	Z, r24
    1f66:	64 c0       	rjmp	.+200    	; 0x2030 <LCD_Read_Byte+0x170>
	else if (__tmp > 65535)
    1f68:	fe 01       	movw	r30, r28
    1f6a:	e3 5b       	subi	r30, 0xB3	; 179
    1f6c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f6e:	60 81       	ld	r22, Z
    1f70:	71 81       	ldd	r23, Z+1	; 0x01
    1f72:	82 81       	ldd	r24, Z+2	; 0x02
    1f74:	93 81       	ldd	r25, Z+3	; 0x03
    1f76:	20 e0       	ldi	r18, 0x00	; 0
    1f78:	3f ef       	ldi	r19, 0xFF	; 255
    1f7a:	4f e7       	ldi	r20, 0x7F	; 127
    1f7c:	57 e4       	ldi	r21, 0x47	; 71
    1f7e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1f82:	18 16       	cp	r1, r24
    1f84:	0c f0       	brlt	.+2      	; 0x1f88 <LCD_Read_Byte+0xc8>
    1f86:	43 c0       	rjmp	.+134    	; 0x200e <LCD_Read_Byte+0x14e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f88:	fe 01       	movw	r30, r28
    1f8a:	ef 5a       	subi	r30, 0xAF	; 175
    1f8c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f8e:	60 81       	ld	r22, Z
    1f90:	71 81       	ldd	r23, Z+1	; 0x01
    1f92:	82 81       	ldd	r24, Z+2	; 0x02
    1f94:	93 81       	ldd	r25, Z+3	; 0x03
    1f96:	20 e0       	ldi	r18, 0x00	; 0
    1f98:	30 e0       	ldi	r19, 0x00	; 0
    1f9a:	40 e2       	ldi	r20, 0x20	; 32
    1f9c:	51 e4       	ldi	r21, 0x41	; 65
    1f9e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1fa2:	dc 01       	movw	r26, r24
    1fa4:	cb 01       	movw	r24, r22
    1fa6:	8e 01       	movw	r16, r28
    1fa8:	05 5b       	subi	r16, 0xB5	; 181
    1faa:	1f 4f       	sbci	r17, 0xFF	; 255
    1fac:	bc 01       	movw	r22, r24
    1fae:	cd 01       	movw	r24, r26
    1fb0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1fb4:	dc 01       	movw	r26, r24
    1fb6:	cb 01       	movw	r24, r22
    1fb8:	f8 01       	movw	r30, r16
    1fba:	91 83       	std	Z+1, r25	; 0x01
    1fbc:	80 83       	st	Z, r24
    1fbe:	1f c0       	rjmp	.+62     	; 0x1ffe <LCD_Read_Byte+0x13e>
    1fc0:	fe 01       	movw	r30, r28
    1fc2:	e7 5b       	subi	r30, 0xB7	; 183
    1fc4:	ff 4f       	sbci	r31, 0xFF	; 255
    1fc6:	88 ec       	ldi	r24, 0xC8	; 200
    1fc8:	90 e0       	ldi	r25, 0x00	; 0
    1fca:	91 83       	std	Z+1, r25	; 0x01
    1fcc:	80 83       	st	Z, r24
    1fce:	fe 01       	movw	r30, r28
    1fd0:	e7 5b       	subi	r30, 0xB7	; 183
    1fd2:	ff 4f       	sbci	r31, 0xFF	; 255
    1fd4:	80 81       	ld	r24, Z
    1fd6:	91 81       	ldd	r25, Z+1	; 0x01
    1fd8:	01 97       	sbiw	r24, 0x01	; 1
    1fda:	f1 f7       	brne	.-4      	; 0x1fd8 <LCD_Read_Byte+0x118>
    1fdc:	fe 01       	movw	r30, r28
    1fde:	e7 5b       	subi	r30, 0xB7	; 183
    1fe0:	ff 4f       	sbci	r31, 0xFF	; 255
    1fe2:	91 83       	std	Z+1, r25	; 0x01
    1fe4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fe6:	de 01       	movw	r26, r28
    1fe8:	a5 5b       	subi	r26, 0xB5	; 181
    1fea:	bf 4f       	sbci	r27, 0xFF	; 255
    1fec:	fe 01       	movw	r30, r28
    1fee:	e5 5b       	subi	r30, 0xB5	; 181
    1ff0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ff2:	80 81       	ld	r24, Z
    1ff4:	91 81       	ldd	r25, Z+1	; 0x01
    1ff6:	01 97       	sbiw	r24, 0x01	; 1
    1ff8:	11 96       	adiw	r26, 0x01	; 1
    1ffa:	9c 93       	st	X, r25
    1ffc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ffe:	fe 01       	movw	r30, r28
    2000:	e5 5b       	subi	r30, 0xB5	; 181
    2002:	ff 4f       	sbci	r31, 0xFF	; 255
    2004:	80 81       	ld	r24, Z
    2006:	91 81       	ldd	r25, Z+1	; 0x01
    2008:	00 97       	sbiw	r24, 0x00	; 0
    200a:	d1 f6       	brne	.-76     	; 0x1fc0 <LCD_Read_Byte+0x100>
    200c:	27 c0       	rjmp	.+78     	; 0x205c <LCD_Read_Byte+0x19c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    200e:	8e 01       	movw	r16, r28
    2010:	05 5b       	subi	r16, 0xB5	; 181
    2012:	1f 4f       	sbci	r17, 0xFF	; 255
    2014:	fe 01       	movw	r30, r28
    2016:	e3 5b       	subi	r30, 0xB3	; 179
    2018:	ff 4f       	sbci	r31, 0xFF	; 255
    201a:	60 81       	ld	r22, Z
    201c:	71 81       	ldd	r23, Z+1	; 0x01
    201e:	82 81       	ldd	r24, Z+2	; 0x02
    2020:	93 81       	ldd	r25, Z+3	; 0x03
    2022:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2026:	dc 01       	movw	r26, r24
    2028:	cb 01       	movw	r24, r22
    202a:	f8 01       	movw	r30, r16
    202c:	91 83       	std	Z+1, r25	; 0x01
    202e:	80 83       	st	Z, r24
    2030:	de 01       	movw	r26, r28
    2032:	a9 5b       	subi	r26, 0xB9	; 185
    2034:	bf 4f       	sbci	r27, 0xFF	; 255
    2036:	fe 01       	movw	r30, r28
    2038:	e5 5b       	subi	r30, 0xB5	; 181
    203a:	ff 4f       	sbci	r31, 0xFF	; 255
    203c:	80 81       	ld	r24, Z
    203e:	91 81       	ldd	r25, Z+1	; 0x01
    2040:	8d 93       	st	X+, r24
    2042:	9c 93       	st	X, r25
    2044:	fe 01       	movw	r30, r28
    2046:	e9 5b       	subi	r30, 0xB9	; 185
    2048:	ff 4f       	sbci	r31, 0xFF	; 255
    204a:	80 81       	ld	r24, Z
    204c:	91 81       	ldd	r25, Z+1	; 0x01
    204e:	01 97       	sbiw	r24, 0x01	; 1
    2050:	f1 f7       	brne	.-4      	; 0x204e <LCD_Read_Byte+0x18e>
    2052:	fe 01       	movw	r30, r28
    2054:	e9 5b       	subi	r30, 0xB9	; 185
    2056:	ff 4f       	sbci	r31, 0xFF	; 255
    2058:	91 83       	std	Z+1, r25	; 0x01
    205a:	80 83       	st	Z, r24
	  _delay_ms(1) ;
	  LCD_CTRL_PORT |= (1<<RS) ;
    205c:	ab e3       	ldi	r26, 0x3B	; 59
    205e:	b0 e0       	ldi	r27, 0x00	; 0
    2060:	eb e3       	ldi	r30, 0x3B	; 59
    2062:	f0 e0       	ldi	r31, 0x00	; 0
    2064:	80 81       	ld	r24, Z
    2066:	81 60       	ori	r24, 0x01	; 1
    2068:	8c 93       	st	X, r24
    206a:	fe 01       	movw	r30, r28
    206c:	ed 5b       	subi	r30, 0xBD	; 189
    206e:	ff 4f       	sbci	r31, 0xFF	; 255
    2070:	80 e0       	ldi	r24, 0x00	; 0
    2072:	90 e0       	ldi	r25, 0x00	; 0
    2074:	a0 e8       	ldi	r26, 0x80	; 128
    2076:	bf e3       	ldi	r27, 0x3F	; 63
    2078:	80 83       	st	Z, r24
    207a:	91 83       	std	Z+1, r25	; 0x01
    207c:	a2 83       	std	Z+2, r26	; 0x02
    207e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2080:	8e 01       	movw	r16, r28
    2082:	01 5c       	subi	r16, 0xC1	; 193
    2084:	1f 4f       	sbci	r17, 0xFF	; 255
    2086:	fe 01       	movw	r30, r28
    2088:	ed 5b       	subi	r30, 0xBD	; 189
    208a:	ff 4f       	sbci	r31, 0xFF	; 255
    208c:	60 81       	ld	r22, Z
    208e:	71 81       	ldd	r23, Z+1	; 0x01
    2090:	82 81       	ldd	r24, Z+2	; 0x02
    2092:	93 81       	ldd	r25, Z+3	; 0x03
    2094:	20 e0       	ldi	r18, 0x00	; 0
    2096:	30 e0       	ldi	r19, 0x00	; 0
    2098:	4a ef       	ldi	r20, 0xFA	; 250
    209a:	54 e4       	ldi	r21, 0x44	; 68
    209c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    20a0:	dc 01       	movw	r26, r24
    20a2:	cb 01       	movw	r24, r22
    20a4:	f8 01       	movw	r30, r16
    20a6:	80 83       	st	Z, r24
    20a8:	91 83       	std	Z+1, r25	; 0x01
    20aa:	a2 83       	std	Z+2, r26	; 0x02
    20ac:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    20ae:	fe 01       	movw	r30, r28
    20b0:	ff 96       	adiw	r30, 0x3f	; 63
    20b2:	60 81       	ld	r22, Z
    20b4:	71 81       	ldd	r23, Z+1	; 0x01
    20b6:	82 81       	ldd	r24, Z+2	; 0x02
    20b8:	93 81       	ldd	r25, Z+3	; 0x03
    20ba:	20 e0       	ldi	r18, 0x00	; 0
    20bc:	30 e0       	ldi	r19, 0x00	; 0
    20be:	40 e8       	ldi	r20, 0x80	; 128
    20c0:	5f e3       	ldi	r21, 0x3F	; 63
    20c2:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    20c6:	88 23       	and	r24, r24
    20c8:	2c f4       	brge	.+10     	; 0x20d4 <LCD_Read_Byte+0x214>
		__ticks = 1;
    20ca:	81 e0       	ldi	r24, 0x01	; 1
    20cc:	90 e0       	ldi	r25, 0x00	; 0
    20ce:	9e af       	std	Y+62, r25	; 0x3e
    20d0:	8d af       	std	Y+61, r24	; 0x3d
    20d2:	46 c0       	rjmp	.+140    	; 0x2160 <LCD_Read_Byte+0x2a0>
	else if (__tmp > 65535)
    20d4:	fe 01       	movw	r30, r28
    20d6:	ff 96       	adiw	r30, 0x3f	; 63
    20d8:	60 81       	ld	r22, Z
    20da:	71 81       	ldd	r23, Z+1	; 0x01
    20dc:	82 81       	ldd	r24, Z+2	; 0x02
    20de:	93 81       	ldd	r25, Z+3	; 0x03
    20e0:	20 e0       	ldi	r18, 0x00	; 0
    20e2:	3f ef       	ldi	r19, 0xFF	; 255
    20e4:	4f e7       	ldi	r20, 0x7F	; 127
    20e6:	57 e4       	ldi	r21, 0x47	; 71
    20e8:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    20ec:	18 16       	cp	r1, r24
    20ee:	64 f5       	brge	.+88     	; 0x2148 <LCD_Read_Byte+0x288>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20f0:	fe 01       	movw	r30, r28
    20f2:	ed 5b       	subi	r30, 0xBD	; 189
    20f4:	ff 4f       	sbci	r31, 0xFF	; 255
    20f6:	60 81       	ld	r22, Z
    20f8:	71 81       	ldd	r23, Z+1	; 0x01
    20fa:	82 81       	ldd	r24, Z+2	; 0x02
    20fc:	93 81       	ldd	r25, Z+3	; 0x03
    20fe:	20 e0       	ldi	r18, 0x00	; 0
    2100:	30 e0       	ldi	r19, 0x00	; 0
    2102:	40 e2       	ldi	r20, 0x20	; 32
    2104:	51 e4       	ldi	r21, 0x41	; 65
    2106:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    210a:	dc 01       	movw	r26, r24
    210c:	cb 01       	movw	r24, r22
    210e:	bc 01       	movw	r22, r24
    2110:	cd 01       	movw	r24, r26
    2112:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2116:	dc 01       	movw	r26, r24
    2118:	cb 01       	movw	r24, r22
    211a:	9e af       	std	Y+62, r25	; 0x3e
    211c:	8d af       	std	Y+61, r24	; 0x3d
    211e:	0f c0       	rjmp	.+30     	; 0x213e <LCD_Read_Byte+0x27e>
    2120:	88 ec       	ldi	r24, 0xC8	; 200
    2122:	90 e0       	ldi	r25, 0x00	; 0
    2124:	9c af       	std	Y+60, r25	; 0x3c
    2126:	8b af       	std	Y+59, r24	; 0x3b
    2128:	8b ad       	ldd	r24, Y+59	; 0x3b
    212a:	9c ad       	ldd	r25, Y+60	; 0x3c
    212c:	01 97       	sbiw	r24, 0x01	; 1
    212e:	f1 f7       	brne	.-4      	; 0x212c <LCD_Read_Byte+0x26c>
    2130:	9c af       	std	Y+60, r25	; 0x3c
    2132:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2134:	8d ad       	ldd	r24, Y+61	; 0x3d
    2136:	9e ad       	ldd	r25, Y+62	; 0x3e
    2138:	01 97       	sbiw	r24, 0x01	; 1
    213a:	9e af       	std	Y+62, r25	; 0x3e
    213c:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    213e:	8d ad       	ldd	r24, Y+61	; 0x3d
    2140:	9e ad       	ldd	r25, Y+62	; 0x3e
    2142:	00 97       	sbiw	r24, 0x00	; 0
    2144:	69 f7       	brne	.-38     	; 0x2120 <LCD_Read_Byte+0x260>
    2146:	16 c0       	rjmp	.+44     	; 0x2174 <LCD_Read_Byte+0x2b4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2148:	fe 01       	movw	r30, r28
    214a:	ff 96       	adiw	r30, 0x3f	; 63
    214c:	60 81       	ld	r22, Z
    214e:	71 81       	ldd	r23, Z+1	; 0x01
    2150:	82 81       	ldd	r24, Z+2	; 0x02
    2152:	93 81       	ldd	r25, Z+3	; 0x03
    2154:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2158:	dc 01       	movw	r26, r24
    215a:	cb 01       	movw	r24, r22
    215c:	9e af       	std	Y+62, r25	; 0x3e
    215e:	8d af       	std	Y+61, r24	; 0x3d
    2160:	8d ad       	ldd	r24, Y+61	; 0x3d
    2162:	9e ad       	ldd	r25, Y+62	; 0x3e
    2164:	9a af       	std	Y+58, r25	; 0x3a
    2166:	89 af       	std	Y+57, r24	; 0x39
    2168:	89 ad       	ldd	r24, Y+57	; 0x39
    216a:	9a ad       	ldd	r25, Y+58	; 0x3a
    216c:	01 97       	sbiw	r24, 0x01	; 1
    216e:	f1 f7       	brne	.-4      	; 0x216c <LCD_Read_Byte+0x2ac>
    2170:	9a af       	std	Y+58, r25	; 0x3a
    2172:	89 af       	std	Y+57, r24	; 0x39
	   _delay_ms(1) ;
	   LCD_Send_Command(Address);
    2174:	fe 01       	movw	r30, r28
    2176:	ea 5a       	subi	r30, 0xAA	; 170
    2178:	ff 4f       	sbci	r31, 0xFF	; 255
    217a:	80 81       	ld	r24, Z
    217c:	0e 94 9b 05 	call	0xb36	; 0xb36 <LCD_Send_Command>
	  LCD_CTRL_PORT |= (1<<E) ;
    2180:	ab e3       	ldi	r26, 0x3B	; 59
    2182:	b0 e0       	ldi	r27, 0x00	; 0
    2184:	eb e3       	ldi	r30, 0x3B	; 59
    2186:	f0 e0       	ldi	r31, 0x00	; 0
    2188:	80 81       	ld	r24, Z
    218a:	82 60       	ori	r24, 0x02	; 2
    218c:	8c 93       	st	X, r24
	  RetByte = (LCD_DATA_PIN >> 4) & 0x0F  ;
    218e:	e3 e3       	ldi	r30, 0x33	; 51
    2190:	f0 e0       	ldi	r31, 0x00	; 0
    2192:	80 81       	ld	r24, Z
    2194:	fe 01       	movw	r30, r28
    2196:	eb 5a       	subi	r30, 0xAB	; 171
    2198:	ff 4f       	sbci	r31, 0xFF	; 255
    219a:	82 95       	swap	r24
    219c:	8f 70       	andi	r24, 0x0F	; 15
    219e:	80 83       	st	Z, r24
	  LCD_CTRL_PORT &= ~(1<<E) ;
    21a0:	ab e3       	ldi	r26, 0x3B	; 59
    21a2:	b0 e0       	ldi	r27, 0x00	; 0
    21a4:	eb e3       	ldi	r30, 0x3B	; 59
    21a6:	f0 e0       	ldi	r31, 0x00	; 0
    21a8:	80 81       	ld	r24, Z
    21aa:	8d 7f       	andi	r24, 0xFD	; 253
    21ac:	8c 93       	st	X, r24
    21ae:	80 e0       	ldi	r24, 0x00	; 0
    21b0:	90 e0       	ldi	r25, 0x00	; 0
    21b2:	a0 e8       	ldi	r26, 0x80	; 128
    21b4:	bf e3       	ldi	r27, 0x3F	; 63
    21b6:	8d ab       	std	Y+53, r24	; 0x35
    21b8:	9e ab       	std	Y+54, r25	; 0x36
    21ba:	af ab       	std	Y+55, r26	; 0x37
    21bc:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21be:	6d a9       	ldd	r22, Y+53	; 0x35
    21c0:	7e a9       	ldd	r23, Y+54	; 0x36
    21c2:	8f a9       	ldd	r24, Y+55	; 0x37
    21c4:	98 ad       	ldd	r25, Y+56	; 0x38
    21c6:	20 e0       	ldi	r18, 0x00	; 0
    21c8:	30 e0       	ldi	r19, 0x00	; 0
    21ca:	4a ef       	ldi	r20, 0xFA	; 250
    21cc:	54 e4       	ldi	r21, 0x44	; 68
    21ce:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    21d2:	dc 01       	movw	r26, r24
    21d4:	cb 01       	movw	r24, r22
    21d6:	89 ab       	std	Y+49, r24	; 0x31
    21d8:	9a ab       	std	Y+50, r25	; 0x32
    21da:	ab ab       	std	Y+51, r26	; 0x33
    21dc:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    21de:	69 a9       	ldd	r22, Y+49	; 0x31
    21e0:	7a a9       	ldd	r23, Y+50	; 0x32
    21e2:	8b a9       	ldd	r24, Y+51	; 0x33
    21e4:	9c a9       	ldd	r25, Y+52	; 0x34
    21e6:	20 e0       	ldi	r18, 0x00	; 0
    21e8:	30 e0       	ldi	r19, 0x00	; 0
    21ea:	40 e8       	ldi	r20, 0x80	; 128
    21ec:	5f e3       	ldi	r21, 0x3F	; 63
    21ee:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    21f2:	88 23       	and	r24, r24
    21f4:	2c f4       	brge	.+10     	; 0x2200 <LCD_Read_Byte+0x340>
		__ticks = 1;
    21f6:	81 e0       	ldi	r24, 0x01	; 1
    21f8:	90 e0       	ldi	r25, 0x00	; 0
    21fa:	98 ab       	std	Y+48, r25	; 0x30
    21fc:	8f a7       	std	Y+47, r24	; 0x2f
    21fe:	3f c0       	rjmp	.+126    	; 0x227e <LCD_Read_Byte+0x3be>
	else if (__tmp > 65535)
    2200:	69 a9       	ldd	r22, Y+49	; 0x31
    2202:	7a a9       	ldd	r23, Y+50	; 0x32
    2204:	8b a9       	ldd	r24, Y+51	; 0x33
    2206:	9c a9       	ldd	r25, Y+52	; 0x34
    2208:	20 e0       	ldi	r18, 0x00	; 0
    220a:	3f ef       	ldi	r19, 0xFF	; 255
    220c:	4f e7       	ldi	r20, 0x7F	; 127
    220e:	57 e4       	ldi	r21, 0x47	; 71
    2210:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2214:	18 16       	cp	r1, r24
    2216:	4c f5       	brge	.+82     	; 0x226a <LCD_Read_Byte+0x3aa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2218:	6d a9       	ldd	r22, Y+53	; 0x35
    221a:	7e a9       	ldd	r23, Y+54	; 0x36
    221c:	8f a9       	ldd	r24, Y+55	; 0x37
    221e:	98 ad       	ldd	r25, Y+56	; 0x38
    2220:	20 e0       	ldi	r18, 0x00	; 0
    2222:	30 e0       	ldi	r19, 0x00	; 0
    2224:	40 e2       	ldi	r20, 0x20	; 32
    2226:	51 e4       	ldi	r21, 0x41	; 65
    2228:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    222c:	dc 01       	movw	r26, r24
    222e:	cb 01       	movw	r24, r22
    2230:	bc 01       	movw	r22, r24
    2232:	cd 01       	movw	r24, r26
    2234:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2238:	dc 01       	movw	r26, r24
    223a:	cb 01       	movw	r24, r22
    223c:	98 ab       	std	Y+48, r25	; 0x30
    223e:	8f a7       	std	Y+47, r24	; 0x2f
    2240:	0f c0       	rjmp	.+30     	; 0x2260 <LCD_Read_Byte+0x3a0>
    2242:	88 ec       	ldi	r24, 0xC8	; 200
    2244:	90 e0       	ldi	r25, 0x00	; 0
    2246:	9e a7       	std	Y+46, r25	; 0x2e
    2248:	8d a7       	std	Y+45, r24	; 0x2d
    224a:	8d a5       	ldd	r24, Y+45	; 0x2d
    224c:	9e a5       	ldd	r25, Y+46	; 0x2e
    224e:	01 97       	sbiw	r24, 0x01	; 1
    2250:	f1 f7       	brne	.-4      	; 0x224e <LCD_Read_Byte+0x38e>
    2252:	9e a7       	std	Y+46, r25	; 0x2e
    2254:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2256:	8f a5       	ldd	r24, Y+47	; 0x2f
    2258:	98 a9       	ldd	r25, Y+48	; 0x30
    225a:	01 97       	sbiw	r24, 0x01	; 1
    225c:	98 ab       	std	Y+48, r25	; 0x30
    225e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2260:	8f a5       	ldd	r24, Y+47	; 0x2f
    2262:	98 a9       	ldd	r25, Y+48	; 0x30
    2264:	00 97       	sbiw	r24, 0x00	; 0
    2266:	69 f7       	brne	.-38     	; 0x2242 <LCD_Read_Byte+0x382>
    2268:	14 c0       	rjmp	.+40     	; 0x2292 <LCD_Read_Byte+0x3d2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    226a:	69 a9       	ldd	r22, Y+49	; 0x31
    226c:	7a a9       	ldd	r23, Y+50	; 0x32
    226e:	8b a9       	ldd	r24, Y+51	; 0x33
    2270:	9c a9       	ldd	r25, Y+52	; 0x34
    2272:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2276:	dc 01       	movw	r26, r24
    2278:	cb 01       	movw	r24, r22
    227a:	98 ab       	std	Y+48, r25	; 0x30
    227c:	8f a7       	std	Y+47, r24	; 0x2f
    227e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2280:	98 a9       	ldd	r25, Y+48	; 0x30
    2282:	9c a7       	std	Y+44, r25	; 0x2c
    2284:	8b a7       	std	Y+43, r24	; 0x2b
    2286:	8b a5       	ldd	r24, Y+43	; 0x2b
    2288:	9c a5       	ldd	r25, Y+44	; 0x2c
    228a:	01 97       	sbiw	r24, 0x01	; 1
    228c:	f1 f7       	brne	.-4      	; 0x228a <LCD_Read_Byte+0x3ca>
    228e:	9c a7       	std	Y+44, r25	; 0x2c
    2290:	8b a7       	std	Y+43, r24	; 0x2b
      _delay_ms(1) ;

        LCD_CTRL_PORT |= (1<<RW) ;
    2292:	ab e3       	ldi	r26, 0x3B	; 59
    2294:	b0 e0       	ldi	r27, 0x00	; 0
    2296:	eb e3       	ldi	r30, 0x3B	; 59
    2298:	f0 e0       	ldi	r31, 0x00	; 0
    229a:	80 81       	ld	r24, Z
    229c:	84 60       	ori	r24, 0x04	; 4
    229e:	8c 93       	st	X, r24
    22a0:	80 e0       	ldi	r24, 0x00	; 0
    22a2:	90 e0       	ldi	r25, 0x00	; 0
    22a4:	a0 e8       	ldi	r26, 0x80	; 128
    22a6:	bf e3       	ldi	r27, 0x3F	; 63
    22a8:	8f a3       	std	Y+39, r24	; 0x27
    22aa:	98 a7       	std	Y+40, r25	; 0x28
    22ac:	a9 a7       	std	Y+41, r26	; 0x29
    22ae:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22b0:	6f a1       	ldd	r22, Y+39	; 0x27
    22b2:	78 a5       	ldd	r23, Y+40	; 0x28
    22b4:	89 a5       	ldd	r24, Y+41	; 0x29
    22b6:	9a a5       	ldd	r25, Y+42	; 0x2a
    22b8:	20 e0       	ldi	r18, 0x00	; 0
    22ba:	30 e0       	ldi	r19, 0x00	; 0
    22bc:	4a ef       	ldi	r20, 0xFA	; 250
    22be:	54 e4       	ldi	r21, 0x44	; 68
    22c0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    22c4:	dc 01       	movw	r26, r24
    22c6:	cb 01       	movw	r24, r22
    22c8:	8b a3       	std	Y+35, r24	; 0x23
    22ca:	9c a3       	std	Y+36, r25	; 0x24
    22cc:	ad a3       	std	Y+37, r26	; 0x25
    22ce:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    22d0:	6b a1       	ldd	r22, Y+35	; 0x23
    22d2:	7c a1       	ldd	r23, Y+36	; 0x24
    22d4:	8d a1       	ldd	r24, Y+37	; 0x25
    22d6:	9e a1       	ldd	r25, Y+38	; 0x26
    22d8:	20 e0       	ldi	r18, 0x00	; 0
    22da:	30 e0       	ldi	r19, 0x00	; 0
    22dc:	40 e8       	ldi	r20, 0x80	; 128
    22de:	5f e3       	ldi	r21, 0x3F	; 63
    22e0:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    22e4:	88 23       	and	r24, r24
    22e6:	2c f4       	brge	.+10     	; 0x22f2 <LCD_Read_Byte+0x432>
		__ticks = 1;
    22e8:	81 e0       	ldi	r24, 0x01	; 1
    22ea:	90 e0       	ldi	r25, 0x00	; 0
    22ec:	9a a3       	std	Y+34, r25	; 0x22
    22ee:	89 a3       	std	Y+33, r24	; 0x21
    22f0:	3f c0       	rjmp	.+126    	; 0x2370 <LCD_Read_Byte+0x4b0>
	else if (__tmp > 65535)
    22f2:	6b a1       	ldd	r22, Y+35	; 0x23
    22f4:	7c a1       	ldd	r23, Y+36	; 0x24
    22f6:	8d a1       	ldd	r24, Y+37	; 0x25
    22f8:	9e a1       	ldd	r25, Y+38	; 0x26
    22fa:	20 e0       	ldi	r18, 0x00	; 0
    22fc:	3f ef       	ldi	r19, 0xFF	; 255
    22fe:	4f e7       	ldi	r20, 0x7F	; 127
    2300:	57 e4       	ldi	r21, 0x47	; 71
    2302:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2306:	18 16       	cp	r1, r24
    2308:	4c f5       	brge	.+82     	; 0x235c <LCD_Read_Byte+0x49c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    230a:	6f a1       	ldd	r22, Y+39	; 0x27
    230c:	78 a5       	ldd	r23, Y+40	; 0x28
    230e:	89 a5       	ldd	r24, Y+41	; 0x29
    2310:	9a a5       	ldd	r25, Y+42	; 0x2a
    2312:	20 e0       	ldi	r18, 0x00	; 0
    2314:	30 e0       	ldi	r19, 0x00	; 0
    2316:	40 e2       	ldi	r20, 0x20	; 32
    2318:	51 e4       	ldi	r21, 0x41	; 65
    231a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    231e:	dc 01       	movw	r26, r24
    2320:	cb 01       	movw	r24, r22
    2322:	bc 01       	movw	r22, r24
    2324:	cd 01       	movw	r24, r26
    2326:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    232a:	dc 01       	movw	r26, r24
    232c:	cb 01       	movw	r24, r22
    232e:	9a a3       	std	Y+34, r25	; 0x22
    2330:	89 a3       	std	Y+33, r24	; 0x21
    2332:	0f c0       	rjmp	.+30     	; 0x2352 <LCD_Read_Byte+0x492>
    2334:	88 ec       	ldi	r24, 0xC8	; 200
    2336:	90 e0       	ldi	r25, 0x00	; 0
    2338:	98 a3       	std	Y+32, r25	; 0x20
    233a:	8f 8f       	std	Y+31, r24	; 0x1f
    233c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    233e:	98 a1       	ldd	r25, Y+32	; 0x20
    2340:	01 97       	sbiw	r24, 0x01	; 1
    2342:	f1 f7       	brne	.-4      	; 0x2340 <LCD_Read_Byte+0x480>
    2344:	98 a3       	std	Y+32, r25	; 0x20
    2346:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2348:	89 a1       	ldd	r24, Y+33	; 0x21
    234a:	9a a1       	ldd	r25, Y+34	; 0x22
    234c:	01 97       	sbiw	r24, 0x01	; 1
    234e:	9a a3       	std	Y+34, r25	; 0x22
    2350:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2352:	89 a1       	ldd	r24, Y+33	; 0x21
    2354:	9a a1       	ldd	r25, Y+34	; 0x22
    2356:	00 97       	sbiw	r24, 0x00	; 0
    2358:	69 f7       	brne	.-38     	; 0x2334 <LCD_Read_Byte+0x474>
    235a:	14 c0       	rjmp	.+40     	; 0x2384 <LCD_Read_Byte+0x4c4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    235c:	6b a1       	ldd	r22, Y+35	; 0x23
    235e:	7c a1       	ldd	r23, Y+36	; 0x24
    2360:	8d a1       	ldd	r24, Y+37	; 0x25
    2362:	9e a1       	ldd	r25, Y+38	; 0x26
    2364:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2368:	dc 01       	movw	r26, r24
    236a:	cb 01       	movw	r24, r22
    236c:	9a a3       	std	Y+34, r25	; 0x22
    236e:	89 a3       	std	Y+33, r24	; 0x21
    2370:	89 a1       	ldd	r24, Y+33	; 0x21
    2372:	9a a1       	ldd	r25, Y+34	; 0x22
    2374:	9e 8f       	std	Y+30, r25	; 0x1e
    2376:	8d 8f       	std	Y+29, r24	; 0x1d
    2378:	8d 8d       	ldd	r24, Y+29	; 0x1d
    237a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    237c:	01 97       	sbiw	r24, 0x01	; 1
    237e:	f1 f7       	brne	.-4      	; 0x237c <LCD_Read_Byte+0x4bc>
    2380:	9e 8f       	std	Y+30, r25	; 0x1e
    2382:	8d 8f       	std	Y+29, r24	; 0x1d
     	  _delay_ms(1) ;
     	LCD_CTRL_PORT |= (1<<RS) ;
    2384:	ab e3       	ldi	r26, 0x3B	; 59
    2386:	b0 e0       	ldi	r27, 0x00	; 0
    2388:	eb e3       	ldi	r30, 0x3B	; 59
    238a:	f0 e0       	ldi	r31, 0x00	; 0
    238c:	80 81       	ld	r24, Z
    238e:	81 60       	ori	r24, 0x01	; 1
    2390:	8c 93       	st	X, r24
    2392:	80 e0       	ldi	r24, 0x00	; 0
    2394:	90 e0       	ldi	r25, 0x00	; 0
    2396:	a0 e8       	ldi	r26, 0x80	; 128
    2398:	bf e3       	ldi	r27, 0x3F	; 63
    239a:	89 8f       	std	Y+25, r24	; 0x19
    239c:	9a 8f       	std	Y+26, r25	; 0x1a
    239e:	ab 8f       	std	Y+27, r26	; 0x1b
    23a0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23a2:	69 8d       	ldd	r22, Y+25	; 0x19
    23a4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    23a6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    23a8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    23aa:	20 e0       	ldi	r18, 0x00	; 0
    23ac:	30 e0       	ldi	r19, 0x00	; 0
    23ae:	4a ef       	ldi	r20, 0xFA	; 250
    23b0:	54 e4       	ldi	r21, 0x44	; 68
    23b2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    23b6:	dc 01       	movw	r26, r24
    23b8:	cb 01       	movw	r24, r22
    23ba:	8d 8b       	std	Y+21, r24	; 0x15
    23bc:	9e 8b       	std	Y+22, r25	; 0x16
    23be:	af 8b       	std	Y+23, r26	; 0x17
    23c0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    23c2:	6d 89       	ldd	r22, Y+21	; 0x15
    23c4:	7e 89       	ldd	r23, Y+22	; 0x16
    23c6:	8f 89       	ldd	r24, Y+23	; 0x17
    23c8:	98 8d       	ldd	r25, Y+24	; 0x18
    23ca:	20 e0       	ldi	r18, 0x00	; 0
    23cc:	30 e0       	ldi	r19, 0x00	; 0
    23ce:	40 e8       	ldi	r20, 0x80	; 128
    23d0:	5f e3       	ldi	r21, 0x3F	; 63
    23d2:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    23d6:	88 23       	and	r24, r24
    23d8:	2c f4       	brge	.+10     	; 0x23e4 <LCD_Read_Byte+0x524>
		__ticks = 1;
    23da:	81 e0       	ldi	r24, 0x01	; 1
    23dc:	90 e0       	ldi	r25, 0x00	; 0
    23de:	9c 8b       	std	Y+20, r25	; 0x14
    23e0:	8b 8b       	std	Y+19, r24	; 0x13
    23e2:	3f c0       	rjmp	.+126    	; 0x2462 <LCD_Read_Byte+0x5a2>
	else if (__tmp > 65535)
    23e4:	6d 89       	ldd	r22, Y+21	; 0x15
    23e6:	7e 89       	ldd	r23, Y+22	; 0x16
    23e8:	8f 89       	ldd	r24, Y+23	; 0x17
    23ea:	98 8d       	ldd	r25, Y+24	; 0x18
    23ec:	20 e0       	ldi	r18, 0x00	; 0
    23ee:	3f ef       	ldi	r19, 0xFF	; 255
    23f0:	4f e7       	ldi	r20, 0x7F	; 127
    23f2:	57 e4       	ldi	r21, 0x47	; 71
    23f4:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    23f8:	18 16       	cp	r1, r24
    23fa:	4c f5       	brge	.+82     	; 0x244e <LCD_Read_Byte+0x58e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23fc:	69 8d       	ldd	r22, Y+25	; 0x19
    23fe:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2400:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2402:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2404:	20 e0       	ldi	r18, 0x00	; 0
    2406:	30 e0       	ldi	r19, 0x00	; 0
    2408:	40 e2       	ldi	r20, 0x20	; 32
    240a:	51 e4       	ldi	r21, 0x41	; 65
    240c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2410:	dc 01       	movw	r26, r24
    2412:	cb 01       	movw	r24, r22
    2414:	bc 01       	movw	r22, r24
    2416:	cd 01       	movw	r24, r26
    2418:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    241c:	dc 01       	movw	r26, r24
    241e:	cb 01       	movw	r24, r22
    2420:	9c 8b       	std	Y+20, r25	; 0x14
    2422:	8b 8b       	std	Y+19, r24	; 0x13
    2424:	0f c0       	rjmp	.+30     	; 0x2444 <LCD_Read_Byte+0x584>
    2426:	88 ec       	ldi	r24, 0xC8	; 200
    2428:	90 e0       	ldi	r25, 0x00	; 0
    242a:	9a 8b       	std	Y+18, r25	; 0x12
    242c:	89 8b       	std	Y+17, r24	; 0x11
    242e:	89 89       	ldd	r24, Y+17	; 0x11
    2430:	9a 89       	ldd	r25, Y+18	; 0x12
    2432:	01 97       	sbiw	r24, 0x01	; 1
    2434:	f1 f7       	brne	.-4      	; 0x2432 <LCD_Read_Byte+0x572>
    2436:	9a 8b       	std	Y+18, r25	; 0x12
    2438:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    243a:	8b 89       	ldd	r24, Y+19	; 0x13
    243c:	9c 89       	ldd	r25, Y+20	; 0x14
    243e:	01 97       	sbiw	r24, 0x01	; 1
    2440:	9c 8b       	std	Y+20, r25	; 0x14
    2442:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2444:	8b 89       	ldd	r24, Y+19	; 0x13
    2446:	9c 89       	ldd	r25, Y+20	; 0x14
    2448:	00 97       	sbiw	r24, 0x00	; 0
    244a:	69 f7       	brne	.-38     	; 0x2426 <LCD_Read_Byte+0x566>
    244c:	14 c0       	rjmp	.+40     	; 0x2476 <LCD_Read_Byte+0x5b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    244e:	6d 89       	ldd	r22, Y+21	; 0x15
    2450:	7e 89       	ldd	r23, Y+22	; 0x16
    2452:	8f 89       	ldd	r24, Y+23	; 0x17
    2454:	98 8d       	ldd	r25, Y+24	; 0x18
    2456:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    245a:	dc 01       	movw	r26, r24
    245c:	cb 01       	movw	r24, r22
    245e:	9c 8b       	std	Y+20, r25	; 0x14
    2460:	8b 8b       	std	Y+19, r24	; 0x13
    2462:	8b 89       	ldd	r24, Y+19	; 0x13
    2464:	9c 89       	ldd	r25, Y+20	; 0x14
    2466:	98 8b       	std	Y+16, r25	; 0x10
    2468:	8f 87       	std	Y+15, r24	; 0x0f
    246a:	8f 85       	ldd	r24, Y+15	; 0x0f
    246c:	98 89       	ldd	r25, Y+16	; 0x10
    246e:	01 97       	sbiw	r24, 0x01	; 1
    2470:	f1 f7       	brne	.-4      	; 0x246e <LCD_Read_Byte+0x5ae>
    2472:	98 8b       	std	Y+16, r25	; 0x10
    2474:	8f 87       	std	Y+15, r24	; 0x0f
       _delay_ms(1) ;
       LCD_Send_Command(Address);
    2476:	fe 01       	movw	r30, r28
    2478:	ea 5a       	subi	r30, 0xAA	; 170
    247a:	ff 4f       	sbci	r31, 0xFF	; 255
    247c:	80 81       	ld	r24, Z
    247e:	0e 94 9b 05 	call	0xb36	; 0xb36 <LCD_Send_Command>
       LCD_CTRL_PORT |= (1<<E) ;
    2482:	ab e3       	ldi	r26, 0x3B	; 59
    2484:	b0 e0       	ldi	r27, 0x00	; 0
    2486:	eb e3       	ldi	r30, 0x3B	; 59
    2488:	f0 e0       	ldi	r31, 0x00	; 0
    248a:	80 81       	ld	r24, Z
    248c:	82 60       	ori	r24, 0x02	; 2
    248e:	8c 93       	st	X, r24
       RetByte |=  (4 << LCD_DATA_PIN) & 0xF0  ;
    2490:	e3 e3       	ldi	r30, 0x33	; 51
    2492:	f0 e0       	ldi	r31, 0x00	; 0
    2494:	80 81       	ld	r24, Z
    2496:	28 2f       	mov	r18, r24
    2498:	30 e0       	ldi	r19, 0x00	; 0
    249a:	84 e0       	ldi	r24, 0x04	; 4
    249c:	90 e0       	ldi	r25, 0x00	; 0
    249e:	02 c0       	rjmp	.+4      	; 0x24a4 <LCD_Read_Byte+0x5e4>
    24a0:	88 0f       	add	r24, r24
    24a2:	99 1f       	adc	r25, r25
    24a4:	2a 95       	dec	r18
    24a6:	e2 f7       	brpl	.-8      	; 0x24a0 <LCD_Read_Byte+0x5e0>
    24a8:	98 2f       	mov	r25, r24
    24aa:	90 7f       	andi	r25, 0xF0	; 240
    24ac:	fe 01       	movw	r30, r28
    24ae:	eb 5a       	subi	r30, 0xAB	; 171
    24b0:	ff 4f       	sbci	r31, 0xFF	; 255
    24b2:	80 81       	ld	r24, Z
    24b4:	89 2b       	or	r24, r25
    24b6:	fe 01       	movw	r30, r28
    24b8:	eb 5a       	subi	r30, 0xAB	; 171
    24ba:	ff 4f       	sbci	r31, 0xFF	; 255
    24bc:	80 83       	st	Z, r24
     	  LCD_CTRL_PORT &= ~(1<<E) ;
    24be:	ab e3       	ldi	r26, 0x3B	; 59
    24c0:	b0 e0       	ldi	r27, 0x00	; 0
    24c2:	eb e3       	ldi	r30, 0x3B	; 59
    24c4:	f0 e0       	ldi	r31, 0x00	; 0
    24c6:	80 81       	ld	r24, Z
    24c8:	8d 7f       	andi	r24, 0xFD	; 253
    24ca:	8c 93       	st	X, r24
    24cc:	80 e0       	ldi	r24, 0x00	; 0
    24ce:	90 e0       	ldi	r25, 0x00	; 0
    24d0:	a0 e8       	ldi	r26, 0x80	; 128
    24d2:	bf e3       	ldi	r27, 0x3F	; 63
    24d4:	8b 87       	std	Y+11, r24	; 0x0b
    24d6:	9c 87       	std	Y+12, r25	; 0x0c
    24d8:	ad 87       	std	Y+13, r26	; 0x0d
    24da:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24dc:	6b 85       	ldd	r22, Y+11	; 0x0b
    24de:	7c 85       	ldd	r23, Y+12	; 0x0c
    24e0:	8d 85       	ldd	r24, Y+13	; 0x0d
    24e2:	9e 85       	ldd	r25, Y+14	; 0x0e
    24e4:	20 e0       	ldi	r18, 0x00	; 0
    24e6:	30 e0       	ldi	r19, 0x00	; 0
    24e8:	4a ef       	ldi	r20, 0xFA	; 250
    24ea:	54 e4       	ldi	r21, 0x44	; 68
    24ec:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    24f0:	dc 01       	movw	r26, r24
    24f2:	cb 01       	movw	r24, r22
    24f4:	8f 83       	std	Y+7, r24	; 0x07
    24f6:	98 87       	std	Y+8, r25	; 0x08
    24f8:	a9 87       	std	Y+9, r26	; 0x09
    24fa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    24fc:	6f 81       	ldd	r22, Y+7	; 0x07
    24fe:	78 85       	ldd	r23, Y+8	; 0x08
    2500:	89 85       	ldd	r24, Y+9	; 0x09
    2502:	9a 85       	ldd	r25, Y+10	; 0x0a
    2504:	20 e0       	ldi	r18, 0x00	; 0
    2506:	30 e0       	ldi	r19, 0x00	; 0
    2508:	40 e8       	ldi	r20, 0x80	; 128
    250a:	5f e3       	ldi	r21, 0x3F	; 63
    250c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2510:	88 23       	and	r24, r24
    2512:	2c f4       	brge	.+10     	; 0x251e <LCD_Read_Byte+0x65e>
		__ticks = 1;
    2514:	81 e0       	ldi	r24, 0x01	; 1
    2516:	90 e0       	ldi	r25, 0x00	; 0
    2518:	9e 83       	std	Y+6, r25	; 0x06
    251a:	8d 83       	std	Y+5, r24	; 0x05
    251c:	3f c0       	rjmp	.+126    	; 0x259c <LCD_Read_Byte+0x6dc>
	else if (__tmp > 65535)
    251e:	6f 81       	ldd	r22, Y+7	; 0x07
    2520:	78 85       	ldd	r23, Y+8	; 0x08
    2522:	89 85       	ldd	r24, Y+9	; 0x09
    2524:	9a 85       	ldd	r25, Y+10	; 0x0a
    2526:	20 e0       	ldi	r18, 0x00	; 0
    2528:	3f ef       	ldi	r19, 0xFF	; 255
    252a:	4f e7       	ldi	r20, 0x7F	; 127
    252c:	57 e4       	ldi	r21, 0x47	; 71
    252e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2532:	18 16       	cp	r1, r24
    2534:	4c f5       	brge	.+82     	; 0x2588 <LCD_Read_Byte+0x6c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2536:	6b 85       	ldd	r22, Y+11	; 0x0b
    2538:	7c 85       	ldd	r23, Y+12	; 0x0c
    253a:	8d 85       	ldd	r24, Y+13	; 0x0d
    253c:	9e 85       	ldd	r25, Y+14	; 0x0e
    253e:	20 e0       	ldi	r18, 0x00	; 0
    2540:	30 e0       	ldi	r19, 0x00	; 0
    2542:	40 e2       	ldi	r20, 0x20	; 32
    2544:	51 e4       	ldi	r21, 0x41	; 65
    2546:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    254a:	dc 01       	movw	r26, r24
    254c:	cb 01       	movw	r24, r22
    254e:	bc 01       	movw	r22, r24
    2550:	cd 01       	movw	r24, r26
    2552:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2556:	dc 01       	movw	r26, r24
    2558:	cb 01       	movw	r24, r22
    255a:	9e 83       	std	Y+6, r25	; 0x06
    255c:	8d 83       	std	Y+5, r24	; 0x05
    255e:	0f c0       	rjmp	.+30     	; 0x257e <LCD_Read_Byte+0x6be>
    2560:	88 ec       	ldi	r24, 0xC8	; 200
    2562:	90 e0       	ldi	r25, 0x00	; 0
    2564:	9c 83       	std	Y+4, r25	; 0x04
    2566:	8b 83       	std	Y+3, r24	; 0x03
    2568:	8b 81       	ldd	r24, Y+3	; 0x03
    256a:	9c 81       	ldd	r25, Y+4	; 0x04
    256c:	01 97       	sbiw	r24, 0x01	; 1
    256e:	f1 f7       	brne	.-4      	; 0x256c <LCD_Read_Byte+0x6ac>
    2570:	9c 83       	std	Y+4, r25	; 0x04
    2572:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2574:	8d 81       	ldd	r24, Y+5	; 0x05
    2576:	9e 81       	ldd	r25, Y+6	; 0x06
    2578:	01 97       	sbiw	r24, 0x01	; 1
    257a:	9e 83       	std	Y+6, r25	; 0x06
    257c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    257e:	8d 81       	ldd	r24, Y+5	; 0x05
    2580:	9e 81       	ldd	r25, Y+6	; 0x06
    2582:	00 97       	sbiw	r24, 0x00	; 0
    2584:	69 f7       	brne	.-38     	; 0x2560 <LCD_Read_Byte+0x6a0>
    2586:	14 c0       	rjmp	.+40     	; 0x25b0 <LCD_Read_Byte+0x6f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2588:	6f 81       	ldd	r22, Y+7	; 0x07
    258a:	78 85       	ldd	r23, Y+8	; 0x08
    258c:	89 85       	ldd	r24, Y+9	; 0x09
    258e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2590:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2594:	dc 01       	movw	r26, r24
    2596:	cb 01       	movw	r24, r22
    2598:	9e 83       	std	Y+6, r25	; 0x06
    259a:	8d 83       	std	Y+5, r24	; 0x05
    259c:	8d 81       	ldd	r24, Y+5	; 0x05
    259e:	9e 81       	ldd	r25, Y+6	; 0x06
    25a0:	9a 83       	std	Y+2, r25	; 0x02
    25a2:	89 83       	std	Y+1, r24	; 0x01
    25a4:	89 81       	ldd	r24, Y+1	; 0x01
    25a6:	9a 81       	ldd	r25, Y+2	; 0x02
    25a8:	01 97       	sbiw	r24, 0x01	; 1
    25aa:	f1 f7       	brne	.-4      	; 0x25a8 <LCD_Read_Byte+0x6e8>
    25ac:	9a 83       	std	Y+2, r25	; 0x02
    25ae:	89 83       	std	Y+1, r24	; 0x01
           _delay_ms(1) ;
#endif

return (RetByte) ;
    25b0:	fe 01       	movw	r30, r28
    25b2:	eb 5a       	subi	r30, 0xAB	; 171
    25b4:	ff 4f       	sbci	r31, 0xFF	; 255
    25b6:	80 81       	ld	r24, Z
}
    25b8:	ca 5a       	subi	r28, 0xAA	; 170
    25ba:	df 4f       	sbci	r29, 0xFF	; 255
    25bc:	0f b6       	in	r0, 0x3f	; 63
    25be:	f8 94       	cli
    25c0:	de bf       	out	0x3e, r29	; 62
    25c2:	0f be       	out	0x3f, r0	; 63
    25c4:	cd bf       	out	0x3d, r28	; 61
    25c6:	cf 91       	pop	r28
    25c8:	df 91       	pop	r29
    25ca:	1f 91       	pop	r17
    25cc:	0f 91       	pop	r16
    25ce:	08 95       	ret

000025d0 <main>:
#include "LCD.h"



int main (void)
{
    25d0:	0f 93       	push	r16
    25d2:	1f 93       	push	r17
    25d4:	df 93       	push	r29
    25d6:	cf 93       	push	r28
    25d8:	cd b7       	in	r28, 0x3d	; 61
    25da:	de b7       	in	r29, 0x3e	; 62
    25dc:	cf 57       	subi	r28, 0x7F	; 127
    25de:	d0 40       	sbci	r29, 0x00	; 0
    25e0:	0f b6       	in	r0, 0x3f	; 63
    25e2:	f8 94       	cli
    25e4:	de bf       	out	0x3e, r29	; 62
    25e6:	0f be       	out	0x3f, r0	; 63
    25e8:	cd bf       	out	0x3d, r28	; 61


	 u8 i = 0 ;
    25ea:	fe 01       	movw	r30, r28
    25ec:	e1 58       	subi	r30, 0x81	; 129
    25ee:	ff 4f       	sbci	r31, 0xFF	; 255
    25f0:	10 82       	st	Z, r1
	/*LCD Initialization */
	  LCD_Init() ;
    25f2:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <LCD_Init>


	while(1)
	{
		LCD_Send_Text(1,1,"Aya") ;
    25f6:	20 e6       	ldi	r18, 0x60	; 96
    25f8:	30 e0       	ldi	r19, 0x00	; 0
    25fa:	81 e0       	ldi	r24, 0x01	; 1
    25fc:	61 e0       	ldi	r22, 0x01	; 1
    25fe:	a9 01       	movw	r20, r18
    2600:	0e 94 ae 0e 	call	0x1d5c	; 0x1d5c <LCD_Send_Text>
    2604:	fe 01       	movw	r30, r28
    2606:	e5 58       	subi	r30, 0x85	; 133
    2608:	ff 4f       	sbci	r31, 0xFF	; 255
    260a:	80 e0       	ldi	r24, 0x00	; 0
    260c:	90 e0       	ldi	r25, 0x00	; 0
    260e:	a8 e4       	ldi	r26, 0x48	; 72
    2610:	b3 e4       	ldi	r27, 0x43	; 67
    2612:	80 83       	st	Z, r24
    2614:	91 83       	std	Z+1, r25	; 0x01
    2616:	a2 83       	std	Z+2, r26	; 0x02
    2618:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    261a:	8e 01       	movw	r16, r28
    261c:	09 58       	subi	r16, 0x89	; 137
    261e:	1f 4f       	sbci	r17, 0xFF	; 255
    2620:	fe 01       	movw	r30, r28
    2622:	e5 58       	subi	r30, 0x85	; 133
    2624:	ff 4f       	sbci	r31, 0xFF	; 255
    2626:	60 81       	ld	r22, Z
    2628:	71 81       	ldd	r23, Z+1	; 0x01
    262a:	82 81       	ldd	r24, Z+2	; 0x02
    262c:	93 81       	ldd	r25, Z+3	; 0x03
    262e:	20 e0       	ldi	r18, 0x00	; 0
    2630:	30 e0       	ldi	r19, 0x00	; 0
    2632:	4a ef       	ldi	r20, 0xFA	; 250
    2634:	54 e4       	ldi	r21, 0x44	; 68
    2636:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    263a:	dc 01       	movw	r26, r24
    263c:	cb 01       	movw	r24, r22
    263e:	f8 01       	movw	r30, r16
    2640:	80 83       	st	Z, r24
    2642:	91 83       	std	Z+1, r25	; 0x01
    2644:	a2 83       	std	Z+2, r26	; 0x02
    2646:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2648:	fe 01       	movw	r30, r28
    264a:	e9 58       	subi	r30, 0x89	; 137
    264c:	ff 4f       	sbci	r31, 0xFF	; 255
    264e:	60 81       	ld	r22, Z
    2650:	71 81       	ldd	r23, Z+1	; 0x01
    2652:	82 81       	ldd	r24, Z+2	; 0x02
    2654:	93 81       	ldd	r25, Z+3	; 0x03
    2656:	20 e0       	ldi	r18, 0x00	; 0
    2658:	30 e0       	ldi	r19, 0x00	; 0
    265a:	40 e8       	ldi	r20, 0x80	; 128
    265c:	5f e3       	ldi	r21, 0x3F	; 63
    265e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2662:	88 23       	and	r24, r24
    2664:	44 f4       	brge	.+16     	; 0x2676 <main+0xa6>
		__ticks = 1;
    2666:	fe 01       	movw	r30, r28
    2668:	eb 58       	subi	r30, 0x8B	; 139
    266a:	ff 4f       	sbci	r31, 0xFF	; 255
    266c:	81 e0       	ldi	r24, 0x01	; 1
    266e:	90 e0       	ldi	r25, 0x00	; 0
    2670:	91 83       	std	Z+1, r25	; 0x01
    2672:	80 83       	st	Z, r24
    2674:	64 c0       	rjmp	.+200    	; 0x273e <main+0x16e>
	else if (__tmp > 65535)
    2676:	fe 01       	movw	r30, r28
    2678:	e9 58       	subi	r30, 0x89	; 137
    267a:	ff 4f       	sbci	r31, 0xFF	; 255
    267c:	60 81       	ld	r22, Z
    267e:	71 81       	ldd	r23, Z+1	; 0x01
    2680:	82 81       	ldd	r24, Z+2	; 0x02
    2682:	93 81       	ldd	r25, Z+3	; 0x03
    2684:	20 e0       	ldi	r18, 0x00	; 0
    2686:	3f ef       	ldi	r19, 0xFF	; 255
    2688:	4f e7       	ldi	r20, 0x7F	; 127
    268a:	57 e4       	ldi	r21, 0x47	; 71
    268c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2690:	18 16       	cp	r1, r24
    2692:	0c f0       	brlt	.+2      	; 0x2696 <main+0xc6>
    2694:	43 c0       	rjmp	.+134    	; 0x271c <main+0x14c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2696:	fe 01       	movw	r30, r28
    2698:	e5 58       	subi	r30, 0x85	; 133
    269a:	ff 4f       	sbci	r31, 0xFF	; 255
    269c:	60 81       	ld	r22, Z
    269e:	71 81       	ldd	r23, Z+1	; 0x01
    26a0:	82 81       	ldd	r24, Z+2	; 0x02
    26a2:	93 81       	ldd	r25, Z+3	; 0x03
    26a4:	20 e0       	ldi	r18, 0x00	; 0
    26a6:	30 e0       	ldi	r19, 0x00	; 0
    26a8:	40 e2       	ldi	r20, 0x20	; 32
    26aa:	51 e4       	ldi	r21, 0x41	; 65
    26ac:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    26b0:	dc 01       	movw	r26, r24
    26b2:	cb 01       	movw	r24, r22
    26b4:	8e 01       	movw	r16, r28
    26b6:	0b 58       	subi	r16, 0x8B	; 139
    26b8:	1f 4f       	sbci	r17, 0xFF	; 255
    26ba:	bc 01       	movw	r22, r24
    26bc:	cd 01       	movw	r24, r26
    26be:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    26c2:	dc 01       	movw	r26, r24
    26c4:	cb 01       	movw	r24, r22
    26c6:	f8 01       	movw	r30, r16
    26c8:	91 83       	std	Z+1, r25	; 0x01
    26ca:	80 83       	st	Z, r24
    26cc:	1f c0       	rjmp	.+62     	; 0x270c <main+0x13c>
    26ce:	fe 01       	movw	r30, r28
    26d0:	ed 58       	subi	r30, 0x8D	; 141
    26d2:	ff 4f       	sbci	r31, 0xFF	; 255
    26d4:	88 ec       	ldi	r24, 0xC8	; 200
    26d6:	90 e0       	ldi	r25, 0x00	; 0
    26d8:	91 83       	std	Z+1, r25	; 0x01
    26da:	80 83       	st	Z, r24
    26dc:	fe 01       	movw	r30, r28
    26de:	ed 58       	subi	r30, 0x8D	; 141
    26e0:	ff 4f       	sbci	r31, 0xFF	; 255
    26e2:	80 81       	ld	r24, Z
    26e4:	91 81       	ldd	r25, Z+1	; 0x01
    26e6:	01 97       	sbiw	r24, 0x01	; 1
    26e8:	f1 f7       	brne	.-4      	; 0x26e6 <main+0x116>
    26ea:	fe 01       	movw	r30, r28
    26ec:	ed 58       	subi	r30, 0x8D	; 141
    26ee:	ff 4f       	sbci	r31, 0xFF	; 255
    26f0:	91 83       	std	Z+1, r25	; 0x01
    26f2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26f4:	de 01       	movw	r26, r28
    26f6:	ab 58       	subi	r26, 0x8B	; 139
    26f8:	bf 4f       	sbci	r27, 0xFF	; 255
    26fa:	fe 01       	movw	r30, r28
    26fc:	eb 58       	subi	r30, 0x8B	; 139
    26fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2700:	80 81       	ld	r24, Z
    2702:	91 81       	ldd	r25, Z+1	; 0x01
    2704:	01 97       	sbiw	r24, 0x01	; 1
    2706:	11 96       	adiw	r26, 0x01	; 1
    2708:	9c 93       	st	X, r25
    270a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    270c:	fe 01       	movw	r30, r28
    270e:	eb 58       	subi	r30, 0x8B	; 139
    2710:	ff 4f       	sbci	r31, 0xFF	; 255
    2712:	80 81       	ld	r24, Z
    2714:	91 81       	ldd	r25, Z+1	; 0x01
    2716:	00 97       	sbiw	r24, 0x00	; 0
    2718:	d1 f6       	brne	.-76     	; 0x26ce <main+0xfe>
    271a:	28 c0       	rjmp	.+80     	; 0x276c <main+0x19c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    271c:	8e 01       	movw	r16, r28
    271e:	0b 58       	subi	r16, 0x8B	; 139
    2720:	1f 4f       	sbci	r17, 0xFF	; 255
    2722:	fe 01       	movw	r30, r28
    2724:	e9 58       	subi	r30, 0x89	; 137
    2726:	ff 4f       	sbci	r31, 0xFF	; 255
    2728:	60 81       	ld	r22, Z
    272a:	71 81       	ldd	r23, Z+1	; 0x01
    272c:	82 81       	ldd	r24, Z+2	; 0x02
    272e:	93 81       	ldd	r25, Z+3	; 0x03
    2730:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2734:	dc 01       	movw	r26, r24
    2736:	cb 01       	movw	r24, r22
    2738:	f8 01       	movw	r30, r16
    273a:	91 83       	std	Z+1, r25	; 0x01
    273c:	80 83       	st	Z, r24
    273e:	de 01       	movw	r26, r28
    2740:	af 58       	subi	r26, 0x8F	; 143
    2742:	bf 4f       	sbci	r27, 0xFF	; 255
    2744:	fe 01       	movw	r30, r28
    2746:	eb 58       	subi	r30, 0x8B	; 139
    2748:	ff 4f       	sbci	r31, 0xFF	; 255
    274a:	80 81       	ld	r24, Z
    274c:	91 81       	ldd	r25, Z+1	; 0x01
    274e:	11 96       	adiw	r26, 0x01	; 1
    2750:	9c 93       	st	X, r25
    2752:	8e 93       	st	-X, r24
    2754:	fe 01       	movw	r30, r28
    2756:	ef 58       	subi	r30, 0x8F	; 143
    2758:	ff 4f       	sbci	r31, 0xFF	; 255
    275a:	80 81       	ld	r24, Z
    275c:	91 81       	ldd	r25, Z+1	; 0x01
    275e:	01 97       	sbiw	r24, 0x01	; 1
    2760:	f1 f7       	brne	.-4      	; 0x275e <main+0x18e>
    2762:	fe 01       	movw	r30, r28
    2764:	ef 58       	subi	r30, 0x8F	; 143
    2766:	ff 4f       	sbci	r31, 0xFF	; 255
    2768:	91 83       	std	Z+1, r25	; 0x01
    276a:	80 83       	st	Z, r24
		    _delay_ms(200) ;
		for(i=0 ; i<16 ;i++)
    276c:	fe 01       	movw	r30, r28
    276e:	e1 58       	subi	r30, 0x81	; 129
    2770:	ff 4f       	sbci	r31, 0xFF	; 255
    2772:	10 82       	st	Z, r1
    2774:	2b c2       	rjmp	.+1110   	; 0x2bcc <main+0x5fc>
		{

		  LCD_Send_Command(LCD_SHIFT_ENTIRE_DISPLAY_RIGHT) ;
    2776:	8c e1       	ldi	r24, 0x1C	; 28
    2778:	0e 94 9b 05 	call	0xb36	; 0xb36 <LCD_Send_Command>
    277c:	fe 01       	movw	r30, r28
    277e:	e3 59       	subi	r30, 0x93	; 147
    2780:	ff 4f       	sbci	r31, 0xFF	; 255
    2782:	80 e0       	ldi	r24, 0x00	; 0
    2784:	90 e0       	ldi	r25, 0x00	; 0
    2786:	a8 e4       	ldi	r26, 0x48	; 72
    2788:	b3 e4       	ldi	r27, 0x43	; 67
    278a:	80 83       	st	Z, r24
    278c:	91 83       	std	Z+1, r25	; 0x01
    278e:	a2 83       	std	Z+2, r26	; 0x02
    2790:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2792:	8e 01       	movw	r16, r28
    2794:	07 59       	subi	r16, 0x97	; 151
    2796:	1f 4f       	sbci	r17, 0xFF	; 255
    2798:	fe 01       	movw	r30, r28
    279a:	e3 59       	subi	r30, 0x93	; 147
    279c:	ff 4f       	sbci	r31, 0xFF	; 255
    279e:	60 81       	ld	r22, Z
    27a0:	71 81       	ldd	r23, Z+1	; 0x01
    27a2:	82 81       	ldd	r24, Z+2	; 0x02
    27a4:	93 81       	ldd	r25, Z+3	; 0x03
    27a6:	20 e0       	ldi	r18, 0x00	; 0
    27a8:	30 e0       	ldi	r19, 0x00	; 0
    27aa:	4a ef       	ldi	r20, 0xFA	; 250
    27ac:	54 e4       	ldi	r21, 0x44	; 68
    27ae:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    27b2:	dc 01       	movw	r26, r24
    27b4:	cb 01       	movw	r24, r22
    27b6:	f8 01       	movw	r30, r16
    27b8:	80 83       	st	Z, r24
    27ba:	91 83       	std	Z+1, r25	; 0x01
    27bc:	a2 83       	std	Z+2, r26	; 0x02
    27be:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    27c0:	fe 01       	movw	r30, r28
    27c2:	e7 59       	subi	r30, 0x97	; 151
    27c4:	ff 4f       	sbci	r31, 0xFF	; 255
    27c6:	60 81       	ld	r22, Z
    27c8:	71 81       	ldd	r23, Z+1	; 0x01
    27ca:	82 81       	ldd	r24, Z+2	; 0x02
    27cc:	93 81       	ldd	r25, Z+3	; 0x03
    27ce:	20 e0       	ldi	r18, 0x00	; 0
    27d0:	30 e0       	ldi	r19, 0x00	; 0
    27d2:	40 e8       	ldi	r20, 0x80	; 128
    27d4:	5f e3       	ldi	r21, 0x3F	; 63
    27d6:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    27da:	88 23       	and	r24, r24
    27dc:	44 f4       	brge	.+16     	; 0x27ee <main+0x21e>
		__ticks = 1;
    27de:	fe 01       	movw	r30, r28
    27e0:	e9 59       	subi	r30, 0x99	; 153
    27e2:	ff 4f       	sbci	r31, 0xFF	; 255
    27e4:	81 e0       	ldi	r24, 0x01	; 1
    27e6:	90 e0       	ldi	r25, 0x00	; 0
    27e8:	91 83       	std	Z+1, r25	; 0x01
    27ea:	80 83       	st	Z, r24
    27ec:	64 c0       	rjmp	.+200    	; 0x28b6 <main+0x2e6>
	else if (__tmp > 65535)
    27ee:	fe 01       	movw	r30, r28
    27f0:	e7 59       	subi	r30, 0x97	; 151
    27f2:	ff 4f       	sbci	r31, 0xFF	; 255
    27f4:	60 81       	ld	r22, Z
    27f6:	71 81       	ldd	r23, Z+1	; 0x01
    27f8:	82 81       	ldd	r24, Z+2	; 0x02
    27fa:	93 81       	ldd	r25, Z+3	; 0x03
    27fc:	20 e0       	ldi	r18, 0x00	; 0
    27fe:	3f ef       	ldi	r19, 0xFF	; 255
    2800:	4f e7       	ldi	r20, 0x7F	; 127
    2802:	57 e4       	ldi	r21, 0x47	; 71
    2804:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2808:	18 16       	cp	r1, r24
    280a:	0c f0       	brlt	.+2      	; 0x280e <main+0x23e>
    280c:	43 c0       	rjmp	.+134    	; 0x2894 <main+0x2c4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    280e:	fe 01       	movw	r30, r28
    2810:	e3 59       	subi	r30, 0x93	; 147
    2812:	ff 4f       	sbci	r31, 0xFF	; 255
    2814:	60 81       	ld	r22, Z
    2816:	71 81       	ldd	r23, Z+1	; 0x01
    2818:	82 81       	ldd	r24, Z+2	; 0x02
    281a:	93 81       	ldd	r25, Z+3	; 0x03
    281c:	20 e0       	ldi	r18, 0x00	; 0
    281e:	30 e0       	ldi	r19, 0x00	; 0
    2820:	40 e2       	ldi	r20, 0x20	; 32
    2822:	51 e4       	ldi	r21, 0x41	; 65
    2824:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2828:	dc 01       	movw	r26, r24
    282a:	cb 01       	movw	r24, r22
    282c:	8e 01       	movw	r16, r28
    282e:	09 59       	subi	r16, 0x99	; 153
    2830:	1f 4f       	sbci	r17, 0xFF	; 255
    2832:	bc 01       	movw	r22, r24
    2834:	cd 01       	movw	r24, r26
    2836:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    283a:	dc 01       	movw	r26, r24
    283c:	cb 01       	movw	r24, r22
    283e:	f8 01       	movw	r30, r16
    2840:	91 83       	std	Z+1, r25	; 0x01
    2842:	80 83       	st	Z, r24
    2844:	1f c0       	rjmp	.+62     	; 0x2884 <main+0x2b4>
    2846:	fe 01       	movw	r30, r28
    2848:	eb 59       	subi	r30, 0x9B	; 155
    284a:	ff 4f       	sbci	r31, 0xFF	; 255
    284c:	88 ec       	ldi	r24, 0xC8	; 200
    284e:	90 e0       	ldi	r25, 0x00	; 0
    2850:	91 83       	std	Z+1, r25	; 0x01
    2852:	80 83       	st	Z, r24
    2854:	fe 01       	movw	r30, r28
    2856:	eb 59       	subi	r30, 0x9B	; 155
    2858:	ff 4f       	sbci	r31, 0xFF	; 255
    285a:	80 81       	ld	r24, Z
    285c:	91 81       	ldd	r25, Z+1	; 0x01
    285e:	01 97       	sbiw	r24, 0x01	; 1
    2860:	f1 f7       	brne	.-4      	; 0x285e <main+0x28e>
    2862:	fe 01       	movw	r30, r28
    2864:	eb 59       	subi	r30, 0x9B	; 155
    2866:	ff 4f       	sbci	r31, 0xFF	; 255
    2868:	91 83       	std	Z+1, r25	; 0x01
    286a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    286c:	de 01       	movw	r26, r28
    286e:	a9 59       	subi	r26, 0x99	; 153
    2870:	bf 4f       	sbci	r27, 0xFF	; 255
    2872:	fe 01       	movw	r30, r28
    2874:	e9 59       	subi	r30, 0x99	; 153
    2876:	ff 4f       	sbci	r31, 0xFF	; 255
    2878:	80 81       	ld	r24, Z
    287a:	91 81       	ldd	r25, Z+1	; 0x01
    287c:	01 97       	sbiw	r24, 0x01	; 1
    287e:	11 96       	adiw	r26, 0x01	; 1
    2880:	9c 93       	st	X, r25
    2882:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2884:	fe 01       	movw	r30, r28
    2886:	e9 59       	subi	r30, 0x99	; 153
    2888:	ff 4f       	sbci	r31, 0xFF	; 255
    288a:	80 81       	ld	r24, Z
    288c:	91 81       	ldd	r25, Z+1	; 0x01
    288e:	00 97       	sbiw	r24, 0x00	; 0
    2890:	d1 f6       	brne	.-76     	; 0x2846 <main+0x276>
    2892:	27 c0       	rjmp	.+78     	; 0x28e2 <main+0x312>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2894:	8e 01       	movw	r16, r28
    2896:	09 59       	subi	r16, 0x99	; 153
    2898:	1f 4f       	sbci	r17, 0xFF	; 255
    289a:	fe 01       	movw	r30, r28
    289c:	e7 59       	subi	r30, 0x97	; 151
    289e:	ff 4f       	sbci	r31, 0xFF	; 255
    28a0:	60 81       	ld	r22, Z
    28a2:	71 81       	ldd	r23, Z+1	; 0x01
    28a4:	82 81       	ldd	r24, Z+2	; 0x02
    28a6:	93 81       	ldd	r25, Z+3	; 0x03
    28a8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    28ac:	dc 01       	movw	r26, r24
    28ae:	cb 01       	movw	r24, r22
    28b0:	f8 01       	movw	r30, r16
    28b2:	91 83       	std	Z+1, r25	; 0x01
    28b4:	80 83       	st	Z, r24
    28b6:	de 01       	movw	r26, r28
    28b8:	ad 59       	subi	r26, 0x9D	; 157
    28ba:	bf 4f       	sbci	r27, 0xFF	; 255
    28bc:	fe 01       	movw	r30, r28
    28be:	e9 59       	subi	r30, 0x99	; 153
    28c0:	ff 4f       	sbci	r31, 0xFF	; 255
    28c2:	80 81       	ld	r24, Z
    28c4:	91 81       	ldd	r25, Z+1	; 0x01
    28c6:	8d 93       	st	X+, r24
    28c8:	9c 93       	st	X, r25
    28ca:	fe 01       	movw	r30, r28
    28cc:	ed 59       	subi	r30, 0x9D	; 157
    28ce:	ff 4f       	sbci	r31, 0xFF	; 255
    28d0:	80 81       	ld	r24, Z
    28d2:	91 81       	ldd	r25, Z+1	; 0x01
    28d4:	01 97       	sbiw	r24, 0x01	; 1
    28d6:	f1 f7       	brne	.-4      	; 0x28d4 <main+0x304>
    28d8:	fe 01       	movw	r30, r28
    28da:	ed 59       	subi	r30, 0x9D	; 157
    28dc:	ff 4f       	sbci	r31, 0xFF	; 255
    28de:	91 83       	std	Z+1, r25	; 0x01
    28e0:	80 83       	st	Z, r24
		  _delay_ms(200) ;
		  LCD_Send_Command(LCD_FONT_LARGE_4BIT) ;
    28e2:	8c e2       	ldi	r24, 0x2C	; 44
    28e4:	0e 94 9b 05 	call	0xb36	; 0xb36 <LCD_Send_Command>
    28e8:	fe 01       	movw	r30, r28
    28ea:	e1 5a       	subi	r30, 0xA1	; 161
    28ec:	ff 4f       	sbci	r31, 0xFF	; 255
    28ee:	80 e0       	ldi	r24, 0x00	; 0
    28f0:	90 e0       	ldi	r25, 0x00	; 0
    28f2:	a8 e4       	ldi	r26, 0x48	; 72
    28f4:	b3 e4       	ldi	r27, 0x43	; 67
    28f6:	80 83       	st	Z, r24
    28f8:	91 83       	std	Z+1, r25	; 0x01
    28fa:	a2 83       	std	Z+2, r26	; 0x02
    28fc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28fe:	8e 01       	movw	r16, r28
    2900:	05 5a       	subi	r16, 0xA5	; 165
    2902:	1f 4f       	sbci	r17, 0xFF	; 255
    2904:	fe 01       	movw	r30, r28
    2906:	e1 5a       	subi	r30, 0xA1	; 161
    2908:	ff 4f       	sbci	r31, 0xFF	; 255
    290a:	60 81       	ld	r22, Z
    290c:	71 81       	ldd	r23, Z+1	; 0x01
    290e:	82 81       	ldd	r24, Z+2	; 0x02
    2910:	93 81       	ldd	r25, Z+3	; 0x03
    2912:	20 e0       	ldi	r18, 0x00	; 0
    2914:	30 e0       	ldi	r19, 0x00	; 0
    2916:	4a ef       	ldi	r20, 0xFA	; 250
    2918:	54 e4       	ldi	r21, 0x44	; 68
    291a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    291e:	dc 01       	movw	r26, r24
    2920:	cb 01       	movw	r24, r22
    2922:	f8 01       	movw	r30, r16
    2924:	80 83       	st	Z, r24
    2926:	91 83       	std	Z+1, r25	; 0x01
    2928:	a2 83       	std	Z+2, r26	; 0x02
    292a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    292c:	fe 01       	movw	r30, r28
    292e:	e5 5a       	subi	r30, 0xA5	; 165
    2930:	ff 4f       	sbci	r31, 0xFF	; 255
    2932:	60 81       	ld	r22, Z
    2934:	71 81       	ldd	r23, Z+1	; 0x01
    2936:	82 81       	ldd	r24, Z+2	; 0x02
    2938:	93 81       	ldd	r25, Z+3	; 0x03
    293a:	20 e0       	ldi	r18, 0x00	; 0
    293c:	30 e0       	ldi	r19, 0x00	; 0
    293e:	40 e8       	ldi	r20, 0x80	; 128
    2940:	5f e3       	ldi	r21, 0x3F	; 63
    2942:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2946:	88 23       	and	r24, r24
    2948:	44 f4       	brge	.+16     	; 0x295a <main+0x38a>
		__ticks = 1;
    294a:	fe 01       	movw	r30, r28
    294c:	e7 5a       	subi	r30, 0xA7	; 167
    294e:	ff 4f       	sbci	r31, 0xFF	; 255
    2950:	81 e0       	ldi	r24, 0x01	; 1
    2952:	90 e0       	ldi	r25, 0x00	; 0
    2954:	91 83       	std	Z+1, r25	; 0x01
    2956:	80 83       	st	Z, r24
    2958:	64 c0       	rjmp	.+200    	; 0x2a22 <main+0x452>
	else if (__tmp > 65535)
    295a:	fe 01       	movw	r30, r28
    295c:	e5 5a       	subi	r30, 0xA5	; 165
    295e:	ff 4f       	sbci	r31, 0xFF	; 255
    2960:	60 81       	ld	r22, Z
    2962:	71 81       	ldd	r23, Z+1	; 0x01
    2964:	82 81       	ldd	r24, Z+2	; 0x02
    2966:	93 81       	ldd	r25, Z+3	; 0x03
    2968:	20 e0       	ldi	r18, 0x00	; 0
    296a:	3f ef       	ldi	r19, 0xFF	; 255
    296c:	4f e7       	ldi	r20, 0x7F	; 127
    296e:	57 e4       	ldi	r21, 0x47	; 71
    2970:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2974:	18 16       	cp	r1, r24
    2976:	0c f0       	brlt	.+2      	; 0x297a <main+0x3aa>
    2978:	43 c0       	rjmp	.+134    	; 0x2a00 <main+0x430>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    297a:	fe 01       	movw	r30, r28
    297c:	e1 5a       	subi	r30, 0xA1	; 161
    297e:	ff 4f       	sbci	r31, 0xFF	; 255
    2980:	60 81       	ld	r22, Z
    2982:	71 81       	ldd	r23, Z+1	; 0x01
    2984:	82 81       	ldd	r24, Z+2	; 0x02
    2986:	93 81       	ldd	r25, Z+3	; 0x03
    2988:	20 e0       	ldi	r18, 0x00	; 0
    298a:	30 e0       	ldi	r19, 0x00	; 0
    298c:	40 e2       	ldi	r20, 0x20	; 32
    298e:	51 e4       	ldi	r21, 0x41	; 65
    2990:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2994:	dc 01       	movw	r26, r24
    2996:	cb 01       	movw	r24, r22
    2998:	8e 01       	movw	r16, r28
    299a:	07 5a       	subi	r16, 0xA7	; 167
    299c:	1f 4f       	sbci	r17, 0xFF	; 255
    299e:	bc 01       	movw	r22, r24
    29a0:	cd 01       	movw	r24, r26
    29a2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    29a6:	dc 01       	movw	r26, r24
    29a8:	cb 01       	movw	r24, r22
    29aa:	f8 01       	movw	r30, r16
    29ac:	91 83       	std	Z+1, r25	; 0x01
    29ae:	80 83       	st	Z, r24
    29b0:	1f c0       	rjmp	.+62     	; 0x29f0 <main+0x420>
    29b2:	fe 01       	movw	r30, r28
    29b4:	e9 5a       	subi	r30, 0xA9	; 169
    29b6:	ff 4f       	sbci	r31, 0xFF	; 255
    29b8:	88 ec       	ldi	r24, 0xC8	; 200
    29ba:	90 e0       	ldi	r25, 0x00	; 0
    29bc:	91 83       	std	Z+1, r25	; 0x01
    29be:	80 83       	st	Z, r24
    29c0:	fe 01       	movw	r30, r28
    29c2:	e9 5a       	subi	r30, 0xA9	; 169
    29c4:	ff 4f       	sbci	r31, 0xFF	; 255
    29c6:	80 81       	ld	r24, Z
    29c8:	91 81       	ldd	r25, Z+1	; 0x01
    29ca:	01 97       	sbiw	r24, 0x01	; 1
    29cc:	f1 f7       	brne	.-4      	; 0x29ca <main+0x3fa>
    29ce:	fe 01       	movw	r30, r28
    29d0:	e9 5a       	subi	r30, 0xA9	; 169
    29d2:	ff 4f       	sbci	r31, 0xFF	; 255
    29d4:	91 83       	std	Z+1, r25	; 0x01
    29d6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29d8:	de 01       	movw	r26, r28
    29da:	a7 5a       	subi	r26, 0xA7	; 167
    29dc:	bf 4f       	sbci	r27, 0xFF	; 255
    29de:	fe 01       	movw	r30, r28
    29e0:	e7 5a       	subi	r30, 0xA7	; 167
    29e2:	ff 4f       	sbci	r31, 0xFF	; 255
    29e4:	80 81       	ld	r24, Z
    29e6:	91 81       	ldd	r25, Z+1	; 0x01
    29e8:	01 97       	sbiw	r24, 0x01	; 1
    29ea:	11 96       	adiw	r26, 0x01	; 1
    29ec:	9c 93       	st	X, r25
    29ee:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29f0:	fe 01       	movw	r30, r28
    29f2:	e7 5a       	subi	r30, 0xA7	; 167
    29f4:	ff 4f       	sbci	r31, 0xFF	; 255
    29f6:	80 81       	ld	r24, Z
    29f8:	91 81       	ldd	r25, Z+1	; 0x01
    29fa:	00 97       	sbiw	r24, 0x00	; 0
    29fc:	d1 f6       	brne	.-76     	; 0x29b2 <main+0x3e2>
    29fe:	27 c0       	rjmp	.+78     	; 0x2a4e <main+0x47e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a00:	8e 01       	movw	r16, r28
    2a02:	07 5a       	subi	r16, 0xA7	; 167
    2a04:	1f 4f       	sbci	r17, 0xFF	; 255
    2a06:	fe 01       	movw	r30, r28
    2a08:	e5 5a       	subi	r30, 0xA5	; 165
    2a0a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a0c:	60 81       	ld	r22, Z
    2a0e:	71 81       	ldd	r23, Z+1	; 0x01
    2a10:	82 81       	ldd	r24, Z+2	; 0x02
    2a12:	93 81       	ldd	r25, Z+3	; 0x03
    2a14:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2a18:	dc 01       	movw	r26, r24
    2a1a:	cb 01       	movw	r24, r22
    2a1c:	f8 01       	movw	r30, r16
    2a1e:	91 83       	std	Z+1, r25	; 0x01
    2a20:	80 83       	st	Z, r24
    2a22:	de 01       	movw	r26, r28
    2a24:	ab 5a       	subi	r26, 0xAB	; 171
    2a26:	bf 4f       	sbci	r27, 0xFF	; 255
    2a28:	fe 01       	movw	r30, r28
    2a2a:	e7 5a       	subi	r30, 0xA7	; 167
    2a2c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a2e:	80 81       	ld	r24, Z
    2a30:	91 81       	ldd	r25, Z+1	; 0x01
    2a32:	8d 93       	st	X+, r24
    2a34:	9c 93       	st	X, r25
    2a36:	fe 01       	movw	r30, r28
    2a38:	eb 5a       	subi	r30, 0xAB	; 171
    2a3a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a3c:	80 81       	ld	r24, Z
    2a3e:	91 81       	ldd	r25, Z+1	; 0x01
    2a40:	01 97       	sbiw	r24, 0x01	; 1
    2a42:	f1 f7       	brne	.-4      	; 0x2a40 <main+0x470>
    2a44:	fe 01       	movw	r30, r28
    2a46:	eb 5a       	subi	r30, 0xAB	; 171
    2a48:	ff 4f       	sbci	r31, 0xFF	; 255
    2a4a:	91 83       	std	Z+1, r25	; 0x01
    2a4c:	80 83       	st	Z, r24
		  _delay_ms(200) ;
		  LCD_Send_Command(LCD_FONT_SMALL_4BIT) ;
    2a4e:	88 e2       	ldi	r24, 0x28	; 40
    2a50:	0e 94 9b 05 	call	0xb36	; 0xb36 <LCD_Send_Command>
    2a54:	fe 01       	movw	r30, r28
    2a56:	ef 5a       	subi	r30, 0xAF	; 175
    2a58:	ff 4f       	sbci	r31, 0xFF	; 255
    2a5a:	80 e0       	ldi	r24, 0x00	; 0
    2a5c:	90 e0       	ldi	r25, 0x00	; 0
    2a5e:	a8 e4       	ldi	r26, 0x48	; 72
    2a60:	b3 e4       	ldi	r27, 0x43	; 67
    2a62:	80 83       	st	Z, r24
    2a64:	91 83       	std	Z+1, r25	; 0x01
    2a66:	a2 83       	std	Z+2, r26	; 0x02
    2a68:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a6a:	8e 01       	movw	r16, r28
    2a6c:	03 5b       	subi	r16, 0xB3	; 179
    2a6e:	1f 4f       	sbci	r17, 0xFF	; 255
    2a70:	fe 01       	movw	r30, r28
    2a72:	ef 5a       	subi	r30, 0xAF	; 175
    2a74:	ff 4f       	sbci	r31, 0xFF	; 255
    2a76:	60 81       	ld	r22, Z
    2a78:	71 81       	ldd	r23, Z+1	; 0x01
    2a7a:	82 81       	ldd	r24, Z+2	; 0x02
    2a7c:	93 81       	ldd	r25, Z+3	; 0x03
    2a7e:	20 e0       	ldi	r18, 0x00	; 0
    2a80:	30 e0       	ldi	r19, 0x00	; 0
    2a82:	4a ef       	ldi	r20, 0xFA	; 250
    2a84:	54 e4       	ldi	r21, 0x44	; 68
    2a86:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2a8a:	dc 01       	movw	r26, r24
    2a8c:	cb 01       	movw	r24, r22
    2a8e:	f8 01       	movw	r30, r16
    2a90:	80 83       	st	Z, r24
    2a92:	91 83       	std	Z+1, r25	; 0x01
    2a94:	a2 83       	std	Z+2, r26	; 0x02
    2a96:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2a98:	fe 01       	movw	r30, r28
    2a9a:	e3 5b       	subi	r30, 0xB3	; 179
    2a9c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a9e:	60 81       	ld	r22, Z
    2aa0:	71 81       	ldd	r23, Z+1	; 0x01
    2aa2:	82 81       	ldd	r24, Z+2	; 0x02
    2aa4:	93 81       	ldd	r25, Z+3	; 0x03
    2aa6:	20 e0       	ldi	r18, 0x00	; 0
    2aa8:	30 e0       	ldi	r19, 0x00	; 0
    2aaa:	40 e8       	ldi	r20, 0x80	; 128
    2aac:	5f e3       	ldi	r21, 0x3F	; 63
    2aae:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2ab2:	88 23       	and	r24, r24
    2ab4:	44 f4       	brge	.+16     	; 0x2ac6 <main+0x4f6>
		__ticks = 1;
    2ab6:	fe 01       	movw	r30, r28
    2ab8:	e5 5b       	subi	r30, 0xB5	; 181
    2aba:	ff 4f       	sbci	r31, 0xFF	; 255
    2abc:	81 e0       	ldi	r24, 0x01	; 1
    2abe:	90 e0       	ldi	r25, 0x00	; 0
    2ac0:	91 83       	std	Z+1, r25	; 0x01
    2ac2:	80 83       	st	Z, r24
    2ac4:	64 c0       	rjmp	.+200    	; 0x2b8e <main+0x5be>
	else if (__tmp > 65535)
    2ac6:	fe 01       	movw	r30, r28
    2ac8:	e3 5b       	subi	r30, 0xB3	; 179
    2aca:	ff 4f       	sbci	r31, 0xFF	; 255
    2acc:	60 81       	ld	r22, Z
    2ace:	71 81       	ldd	r23, Z+1	; 0x01
    2ad0:	82 81       	ldd	r24, Z+2	; 0x02
    2ad2:	93 81       	ldd	r25, Z+3	; 0x03
    2ad4:	20 e0       	ldi	r18, 0x00	; 0
    2ad6:	3f ef       	ldi	r19, 0xFF	; 255
    2ad8:	4f e7       	ldi	r20, 0x7F	; 127
    2ada:	57 e4       	ldi	r21, 0x47	; 71
    2adc:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2ae0:	18 16       	cp	r1, r24
    2ae2:	0c f0       	brlt	.+2      	; 0x2ae6 <main+0x516>
    2ae4:	43 c0       	rjmp	.+134    	; 0x2b6c <main+0x59c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ae6:	fe 01       	movw	r30, r28
    2ae8:	ef 5a       	subi	r30, 0xAF	; 175
    2aea:	ff 4f       	sbci	r31, 0xFF	; 255
    2aec:	60 81       	ld	r22, Z
    2aee:	71 81       	ldd	r23, Z+1	; 0x01
    2af0:	82 81       	ldd	r24, Z+2	; 0x02
    2af2:	93 81       	ldd	r25, Z+3	; 0x03
    2af4:	20 e0       	ldi	r18, 0x00	; 0
    2af6:	30 e0       	ldi	r19, 0x00	; 0
    2af8:	40 e2       	ldi	r20, 0x20	; 32
    2afa:	51 e4       	ldi	r21, 0x41	; 65
    2afc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2b00:	dc 01       	movw	r26, r24
    2b02:	cb 01       	movw	r24, r22
    2b04:	8e 01       	movw	r16, r28
    2b06:	05 5b       	subi	r16, 0xB5	; 181
    2b08:	1f 4f       	sbci	r17, 0xFF	; 255
    2b0a:	bc 01       	movw	r22, r24
    2b0c:	cd 01       	movw	r24, r26
    2b0e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2b12:	dc 01       	movw	r26, r24
    2b14:	cb 01       	movw	r24, r22
    2b16:	f8 01       	movw	r30, r16
    2b18:	91 83       	std	Z+1, r25	; 0x01
    2b1a:	80 83       	st	Z, r24
    2b1c:	1f c0       	rjmp	.+62     	; 0x2b5c <main+0x58c>
    2b1e:	fe 01       	movw	r30, r28
    2b20:	e7 5b       	subi	r30, 0xB7	; 183
    2b22:	ff 4f       	sbci	r31, 0xFF	; 255
    2b24:	88 ec       	ldi	r24, 0xC8	; 200
    2b26:	90 e0       	ldi	r25, 0x00	; 0
    2b28:	91 83       	std	Z+1, r25	; 0x01
    2b2a:	80 83       	st	Z, r24
    2b2c:	fe 01       	movw	r30, r28
    2b2e:	e7 5b       	subi	r30, 0xB7	; 183
    2b30:	ff 4f       	sbci	r31, 0xFF	; 255
    2b32:	80 81       	ld	r24, Z
    2b34:	91 81       	ldd	r25, Z+1	; 0x01
    2b36:	01 97       	sbiw	r24, 0x01	; 1
    2b38:	f1 f7       	brne	.-4      	; 0x2b36 <main+0x566>
    2b3a:	fe 01       	movw	r30, r28
    2b3c:	e7 5b       	subi	r30, 0xB7	; 183
    2b3e:	ff 4f       	sbci	r31, 0xFF	; 255
    2b40:	91 83       	std	Z+1, r25	; 0x01
    2b42:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b44:	de 01       	movw	r26, r28
    2b46:	a5 5b       	subi	r26, 0xB5	; 181
    2b48:	bf 4f       	sbci	r27, 0xFF	; 255
    2b4a:	fe 01       	movw	r30, r28
    2b4c:	e5 5b       	subi	r30, 0xB5	; 181
    2b4e:	ff 4f       	sbci	r31, 0xFF	; 255
    2b50:	80 81       	ld	r24, Z
    2b52:	91 81       	ldd	r25, Z+1	; 0x01
    2b54:	01 97       	sbiw	r24, 0x01	; 1
    2b56:	11 96       	adiw	r26, 0x01	; 1
    2b58:	9c 93       	st	X, r25
    2b5a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b5c:	fe 01       	movw	r30, r28
    2b5e:	e5 5b       	subi	r30, 0xB5	; 181
    2b60:	ff 4f       	sbci	r31, 0xFF	; 255
    2b62:	80 81       	ld	r24, Z
    2b64:	91 81       	ldd	r25, Z+1	; 0x01
    2b66:	00 97       	sbiw	r24, 0x00	; 0
    2b68:	d1 f6       	brne	.-76     	; 0x2b1e <main+0x54e>
    2b6a:	27 c0       	rjmp	.+78     	; 0x2bba <main+0x5ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b6c:	8e 01       	movw	r16, r28
    2b6e:	05 5b       	subi	r16, 0xB5	; 181
    2b70:	1f 4f       	sbci	r17, 0xFF	; 255
    2b72:	fe 01       	movw	r30, r28
    2b74:	e3 5b       	subi	r30, 0xB3	; 179
    2b76:	ff 4f       	sbci	r31, 0xFF	; 255
    2b78:	60 81       	ld	r22, Z
    2b7a:	71 81       	ldd	r23, Z+1	; 0x01
    2b7c:	82 81       	ldd	r24, Z+2	; 0x02
    2b7e:	93 81       	ldd	r25, Z+3	; 0x03
    2b80:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2b84:	dc 01       	movw	r26, r24
    2b86:	cb 01       	movw	r24, r22
    2b88:	f8 01       	movw	r30, r16
    2b8a:	91 83       	std	Z+1, r25	; 0x01
    2b8c:	80 83       	st	Z, r24
    2b8e:	de 01       	movw	r26, r28
    2b90:	a9 5b       	subi	r26, 0xB9	; 185
    2b92:	bf 4f       	sbci	r27, 0xFF	; 255
    2b94:	fe 01       	movw	r30, r28
    2b96:	e5 5b       	subi	r30, 0xB5	; 181
    2b98:	ff 4f       	sbci	r31, 0xFF	; 255
    2b9a:	80 81       	ld	r24, Z
    2b9c:	91 81       	ldd	r25, Z+1	; 0x01
    2b9e:	8d 93       	st	X+, r24
    2ba0:	9c 93       	st	X, r25
    2ba2:	fe 01       	movw	r30, r28
    2ba4:	e9 5b       	subi	r30, 0xB9	; 185
    2ba6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ba8:	80 81       	ld	r24, Z
    2baa:	91 81       	ldd	r25, Z+1	; 0x01
    2bac:	01 97       	sbiw	r24, 0x01	; 1
    2bae:	f1 f7       	brne	.-4      	; 0x2bac <main+0x5dc>
    2bb0:	fe 01       	movw	r30, r28
    2bb2:	e9 5b       	subi	r30, 0xB9	; 185
    2bb4:	ff 4f       	sbci	r31, 0xFF	; 255
    2bb6:	91 83       	std	Z+1, r25	; 0x01
    2bb8:	80 83       	st	Z, r24

	while(1)
	{
		LCD_Send_Text(1,1,"Aya") ;
		    _delay_ms(200) ;
		for(i=0 ; i<16 ;i++)
    2bba:	de 01       	movw	r26, r28
    2bbc:	a1 58       	subi	r26, 0x81	; 129
    2bbe:	bf 4f       	sbci	r27, 0xFF	; 255
    2bc0:	fe 01       	movw	r30, r28
    2bc2:	e1 58       	subi	r30, 0x81	; 129
    2bc4:	ff 4f       	sbci	r31, 0xFF	; 255
    2bc6:	80 81       	ld	r24, Z
    2bc8:	8f 5f       	subi	r24, 0xFF	; 255
    2bca:	8c 93       	st	X, r24
    2bcc:	fe 01       	movw	r30, r28
    2bce:	e1 58       	subi	r30, 0x81	; 129
    2bd0:	ff 4f       	sbci	r31, 0xFF	; 255
    2bd2:	80 81       	ld	r24, Z
    2bd4:	80 31       	cpi	r24, 0x10	; 16
    2bd6:	08 f4       	brcc	.+2      	; 0x2bda <main+0x60a>
    2bd8:	ce cd       	rjmp	.-1124   	; 0x2776 <main+0x1a6>
		  _delay_ms(200) ;
		  LCD_Send_Command(LCD_FONT_SMALL_4BIT) ;
		  _delay_ms((200)) ;

		}
		LCD_Clear() ;
    2bda:	0e 94 c7 0e 	call	0x1d8e	; 0x1d8e <LCD_Clear>
		LCD_Send_Text(2,14,"Aya") ;
    2bde:	20 e6       	ldi	r18, 0x60	; 96
    2be0:	30 e0       	ldi	r19, 0x00	; 0
    2be2:	82 e0       	ldi	r24, 0x02	; 2
    2be4:	6e e0       	ldi	r22, 0x0E	; 14
    2be6:	a9 01       	movw	r20, r18
    2be8:	0e 94 ae 0e 	call	0x1d5c	; 0x1d5c <LCD_Send_Text>
    2bec:	fe 01       	movw	r30, r28
    2bee:	ed 5b       	subi	r30, 0xBD	; 189
    2bf0:	ff 4f       	sbci	r31, 0xFF	; 255
    2bf2:	80 e0       	ldi	r24, 0x00	; 0
    2bf4:	90 e0       	ldi	r25, 0x00	; 0
    2bf6:	a8 e4       	ldi	r26, 0x48	; 72
    2bf8:	b2 e4       	ldi	r27, 0x42	; 66
    2bfa:	80 83       	st	Z, r24
    2bfc:	91 83       	std	Z+1, r25	; 0x01
    2bfe:	a2 83       	std	Z+2, r26	; 0x02
    2c00:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c02:	8e 01       	movw	r16, r28
    2c04:	01 5c       	subi	r16, 0xC1	; 193
    2c06:	1f 4f       	sbci	r17, 0xFF	; 255
    2c08:	fe 01       	movw	r30, r28
    2c0a:	ed 5b       	subi	r30, 0xBD	; 189
    2c0c:	ff 4f       	sbci	r31, 0xFF	; 255
    2c0e:	60 81       	ld	r22, Z
    2c10:	71 81       	ldd	r23, Z+1	; 0x01
    2c12:	82 81       	ldd	r24, Z+2	; 0x02
    2c14:	93 81       	ldd	r25, Z+3	; 0x03
    2c16:	20 e0       	ldi	r18, 0x00	; 0
    2c18:	30 e0       	ldi	r19, 0x00	; 0
    2c1a:	4a ef       	ldi	r20, 0xFA	; 250
    2c1c:	54 e4       	ldi	r21, 0x44	; 68
    2c1e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2c22:	dc 01       	movw	r26, r24
    2c24:	cb 01       	movw	r24, r22
    2c26:	f8 01       	movw	r30, r16
    2c28:	80 83       	st	Z, r24
    2c2a:	91 83       	std	Z+1, r25	; 0x01
    2c2c:	a2 83       	std	Z+2, r26	; 0x02
    2c2e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2c30:	fe 01       	movw	r30, r28
    2c32:	ff 96       	adiw	r30, 0x3f	; 63
    2c34:	60 81       	ld	r22, Z
    2c36:	71 81       	ldd	r23, Z+1	; 0x01
    2c38:	82 81       	ldd	r24, Z+2	; 0x02
    2c3a:	93 81       	ldd	r25, Z+3	; 0x03
    2c3c:	20 e0       	ldi	r18, 0x00	; 0
    2c3e:	30 e0       	ldi	r19, 0x00	; 0
    2c40:	40 e8       	ldi	r20, 0x80	; 128
    2c42:	5f e3       	ldi	r21, 0x3F	; 63
    2c44:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2c48:	88 23       	and	r24, r24
    2c4a:	2c f4       	brge	.+10     	; 0x2c56 <main+0x686>
		__ticks = 1;
    2c4c:	81 e0       	ldi	r24, 0x01	; 1
    2c4e:	90 e0       	ldi	r25, 0x00	; 0
    2c50:	9e af       	std	Y+62, r25	; 0x3e
    2c52:	8d af       	std	Y+61, r24	; 0x3d
    2c54:	46 c0       	rjmp	.+140    	; 0x2ce2 <main+0x712>
	else if (__tmp > 65535)
    2c56:	fe 01       	movw	r30, r28
    2c58:	ff 96       	adiw	r30, 0x3f	; 63
    2c5a:	60 81       	ld	r22, Z
    2c5c:	71 81       	ldd	r23, Z+1	; 0x01
    2c5e:	82 81       	ldd	r24, Z+2	; 0x02
    2c60:	93 81       	ldd	r25, Z+3	; 0x03
    2c62:	20 e0       	ldi	r18, 0x00	; 0
    2c64:	3f ef       	ldi	r19, 0xFF	; 255
    2c66:	4f e7       	ldi	r20, 0x7F	; 127
    2c68:	57 e4       	ldi	r21, 0x47	; 71
    2c6a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2c6e:	18 16       	cp	r1, r24
    2c70:	64 f5       	brge	.+88     	; 0x2cca <main+0x6fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c72:	fe 01       	movw	r30, r28
    2c74:	ed 5b       	subi	r30, 0xBD	; 189
    2c76:	ff 4f       	sbci	r31, 0xFF	; 255
    2c78:	60 81       	ld	r22, Z
    2c7a:	71 81       	ldd	r23, Z+1	; 0x01
    2c7c:	82 81       	ldd	r24, Z+2	; 0x02
    2c7e:	93 81       	ldd	r25, Z+3	; 0x03
    2c80:	20 e0       	ldi	r18, 0x00	; 0
    2c82:	30 e0       	ldi	r19, 0x00	; 0
    2c84:	40 e2       	ldi	r20, 0x20	; 32
    2c86:	51 e4       	ldi	r21, 0x41	; 65
    2c88:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2c8c:	dc 01       	movw	r26, r24
    2c8e:	cb 01       	movw	r24, r22
    2c90:	bc 01       	movw	r22, r24
    2c92:	cd 01       	movw	r24, r26
    2c94:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2c98:	dc 01       	movw	r26, r24
    2c9a:	cb 01       	movw	r24, r22
    2c9c:	9e af       	std	Y+62, r25	; 0x3e
    2c9e:	8d af       	std	Y+61, r24	; 0x3d
    2ca0:	0f c0       	rjmp	.+30     	; 0x2cc0 <main+0x6f0>
    2ca2:	88 ec       	ldi	r24, 0xC8	; 200
    2ca4:	90 e0       	ldi	r25, 0x00	; 0
    2ca6:	9c af       	std	Y+60, r25	; 0x3c
    2ca8:	8b af       	std	Y+59, r24	; 0x3b
    2caa:	8b ad       	ldd	r24, Y+59	; 0x3b
    2cac:	9c ad       	ldd	r25, Y+60	; 0x3c
    2cae:	01 97       	sbiw	r24, 0x01	; 1
    2cb0:	f1 f7       	brne	.-4      	; 0x2cae <main+0x6de>
    2cb2:	9c af       	std	Y+60, r25	; 0x3c
    2cb4:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cb6:	8d ad       	ldd	r24, Y+61	; 0x3d
    2cb8:	9e ad       	ldd	r25, Y+62	; 0x3e
    2cba:	01 97       	sbiw	r24, 0x01	; 1
    2cbc:	9e af       	std	Y+62, r25	; 0x3e
    2cbe:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cc0:	8d ad       	ldd	r24, Y+61	; 0x3d
    2cc2:	9e ad       	ldd	r25, Y+62	; 0x3e
    2cc4:	00 97       	sbiw	r24, 0x00	; 0
    2cc6:	69 f7       	brne	.-38     	; 0x2ca2 <main+0x6d2>
    2cc8:	16 c0       	rjmp	.+44     	; 0x2cf6 <main+0x726>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cca:	fe 01       	movw	r30, r28
    2ccc:	ff 96       	adiw	r30, 0x3f	; 63
    2cce:	60 81       	ld	r22, Z
    2cd0:	71 81       	ldd	r23, Z+1	; 0x01
    2cd2:	82 81       	ldd	r24, Z+2	; 0x02
    2cd4:	93 81       	ldd	r25, Z+3	; 0x03
    2cd6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2cda:	dc 01       	movw	r26, r24
    2cdc:	cb 01       	movw	r24, r22
    2cde:	9e af       	std	Y+62, r25	; 0x3e
    2ce0:	8d af       	std	Y+61, r24	; 0x3d
    2ce2:	8d ad       	ldd	r24, Y+61	; 0x3d
    2ce4:	9e ad       	ldd	r25, Y+62	; 0x3e
    2ce6:	9a af       	std	Y+58, r25	; 0x3a
    2ce8:	89 af       	std	Y+57, r24	; 0x39
    2cea:	89 ad       	ldd	r24, Y+57	; 0x39
    2cec:	9a ad       	ldd	r25, Y+58	; 0x3a
    2cee:	01 97       	sbiw	r24, 0x01	; 1
    2cf0:	f1 f7       	brne	.-4      	; 0x2cee <main+0x71e>
    2cf2:	9a af       	std	Y+58, r25	; 0x3a
    2cf4:	89 af       	std	Y+57, r24	; 0x39
		_delay_ms(50) ;

		for(i=0 ; i<16 ;i++)
    2cf6:	fe 01       	movw	r30, r28
    2cf8:	e1 58       	subi	r30, 0x81	; 129
    2cfa:	ff 4f       	sbci	r31, 0xFF	; 255
    2cfc:	10 82       	st	Z, r1
    2cfe:	68 c1       	rjmp	.+720    	; 0x2fd0 <main+0xa00>
		{

			LCD_Send_Command(LCD_SHIFT_ENTIRE_DISPLAY_LEFT) ;
    2d00:	88 e1       	ldi	r24, 0x18	; 24
    2d02:	0e 94 9b 05 	call	0xb36	; 0xb36 <LCD_Send_Command>
    2d06:	80 e0       	ldi	r24, 0x00	; 0
    2d08:	90 e0       	ldi	r25, 0x00	; 0
    2d0a:	a8 e4       	ldi	r26, 0x48	; 72
    2d0c:	b3 e4       	ldi	r27, 0x43	; 67
    2d0e:	8d ab       	std	Y+53, r24	; 0x35
    2d10:	9e ab       	std	Y+54, r25	; 0x36
    2d12:	af ab       	std	Y+55, r26	; 0x37
    2d14:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d16:	6d a9       	ldd	r22, Y+53	; 0x35
    2d18:	7e a9       	ldd	r23, Y+54	; 0x36
    2d1a:	8f a9       	ldd	r24, Y+55	; 0x37
    2d1c:	98 ad       	ldd	r25, Y+56	; 0x38
    2d1e:	20 e0       	ldi	r18, 0x00	; 0
    2d20:	30 e0       	ldi	r19, 0x00	; 0
    2d22:	4a ef       	ldi	r20, 0xFA	; 250
    2d24:	54 e4       	ldi	r21, 0x44	; 68
    2d26:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2d2a:	dc 01       	movw	r26, r24
    2d2c:	cb 01       	movw	r24, r22
    2d2e:	89 ab       	std	Y+49, r24	; 0x31
    2d30:	9a ab       	std	Y+50, r25	; 0x32
    2d32:	ab ab       	std	Y+51, r26	; 0x33
    2d34:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2d36:	69 a9       	ldd	r22, Y+49	; 0x31
    2d38:	7a a9       	ldd	r23, Y+50	; 0x32
    2d3a:	8b a9       	ldd	r24, Y+51	; 0x33
    2d3c:	9c a9       	ldd	r25, Y+52	; 0x34
    2d3e:	20 e0       	ldi	r18, 0x00	; 0
    2d40:	30 e0       	ldi	r19, 0x00	; 0
    2d42:	40 e8       	ldi	r20, 0x80	; 128
    2d44:	5f e3       	ldi	r21, 0x3F	; 63
    2d46:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2d4a:	88 23       	and	r24, r24
    2d4c:	2c f4       	brge	.+10     	; 0x2d58 <main+0x788>
		__ticks = 1;
    2d4e:	81 e0       	ldi	r24, 0x01	; 1
    2d50:	90 e0       	ldi	r25, 0x00	; 0
    2d52:	98 ab       	std	Y+48, r25	; 0x30
    2d54:	8f a7       	std	Y+47, r24	; 0x2f
    2d56:	3f c0       	rjmp	.+126    	; 0x2dd6 <main+0x806>
	else if (__tmp > 65535)
    2d58:	69 a9       	ldd	r22, Y+49	; 0x31
    2d5a:	7a a9       	ldd	r23, Y+50	; 0x32
    2d5c:	8b a9       	ldd	r24, Y+51	; 0x33
    2d5e:	9c a9       	ldd	r25, Y+52	; 0x34
    2d60:	20 e0       	ldi	r18, 0x00	; 0
    2d62:	3f ef       	ldi	r19, 0xFF	; 255
    2d64:	4f e7       	ldi	r20, 0x7F	; 127
    2d66:	57 e4       	ldi	r21, 0x47	; 71
    2d68:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2d6c:	18 16       	cp	r1, r24
    2d6e:	4c f5       	brge	.+82     	; 0x2dc2 <main+0x7f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d70:	6d a9       	ldd	r22, Y+53	; 0x35
    2d72:	7e a9       	ldd	r23, Y+54	; 0x36
    2d74:	8f a9       	ldd	r24, Y+55	; 0x37
    2d76:	98 ad       	ldd	r25, Y+56	; 0x38
    2d78:	20 e0       	ldi	r18, 0x00	; 0
    2d7a:	30 e0       	ldi	r19, 0x00	; 0
    2d7c:	40 e2       	ldi	r20, 0x20	; 32
    2d7e:	51 e4       	ldi	r21, 0x41	; 65
    2d80:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2d84:	dc 01       	movw	r26, r24
    2d86:	cb 01       	movw	r24, r22
    2d88:	bc 01       	movw	r22, r24
    2d8a:	cd 01       	movw	r24, r26
    2d8c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2d90:	dc 01       	movw	r26, r24
    2d92:	cb 01       	movw	r24, r22
    2d94:	98 ab       	std	Y+48, r25	; 0x30
    2d96:	8f a7       	std	Y+47, r24	; 0x2f
    2d98:	0f c0       	rjmp	.+30     	; 0x2db8 <main+0x7e8>
    2d9a:	88 ec       	ldi	r24, 0xC8	; 200
    2d9c:	90 e0       	ldi	r25, 0x00	; 0
    2d9e:	9e a7       	std	Y+46, r25	; 0x2e
    2da0:	8d a7       	std	Y+45, r24	; 0x2d
    2da2:	8d a5       	ldd	r24, Y+45	; 0x2d
    2da4:	9e a5       	ldd	r25, Y+46	; 0x2e
    2da6:	01 97       	sbiw	r24, 0x01	; 1
    2da8:	f1 f7       	brne	.-4      	; 0x2da6 <main+0x7d6>
    2daa:	9e a7       	std	Y+46, r25	; 0x2e
    2dac:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2dae:	8f a5       	ldd	r24, Y+47	; 0x2f
    2db0:	98 a9       	ldd	r25, Y+48	; 0x30
    2db2:	01 97       	sbiw	r24, 0x01	; 1
    2db4:	98 ab       	std	Y+48, r25	; 0x30
    2db6:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2db8:	8f a5       	ldd	r24, Y+47	; 0x2f
    2dba:	98 a9       	ldd	r25, Y+48	; 0x30
    2dbc:	00 97       	sbiw	r24, 0x00	; 0
    2dbe:	69 f7       	brne	.-38     	; 0x2d9a <main+0x7ca>
    2dc0:	14 c0       	rjmp	.+40     	; 0x2dea <main+0x81a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2dc2:	69 a9       	ldd	r22, Y+49	; 0x31
    2dc4:	7a a9       	ldd	r23, Y+50	; 0x32
    2dc6:	8b a9       	ldd	r24, Y+51	; 0x33
    2dc8:	9c a9       	ldd	r25, Y+52	; 0x34
    2dca:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2dce:	dc 01       	movw	r26, r24
    2dd0:	cb 01       	movw	r24, r22
    2dd2:	98 ab       	std	Y+48, r25	; 0x30
    2dd4:	8f a7       	std	Y+47, r24	; 0x2f
    2dd6:	8f a5       	ldd	r24, Y+47	; 0x2f
    2dd8:	98 a9       	ldd	r25, Y+48	; 0x30
    2dda:	9c a7       	std	Y+44, r25	; 0x2c
    2ddc:	8b a7       	std	Y+43, r24	; 0x2b
    2dde:	8b a5       	ldd	r24, Y+43	; 0x2b
    2de0:	9c a5       	ldd	r25, Y+44	; 0x2c
    2de2:	01 97       	sbiw	r24, 0x01	; 1
    2de4:	f1 f7       	brne	.-4      	; 0x2de2 <main+0x812>
    2de6:	9c a7       	std	Y+44, r25	; 0x2c
    2de8:	8b a7       	std	Y+43, r24	; 0x2b
		    _delay_ms(200) ;
		    LCD_Send_Command(LCD_FONT_LARGE_4BIT) ;
    2dea:	8c e2       	ldi	r24, 0x2C	; 44
    2dec:	0e 94 9b 05 	call	0xb36	; 0xb36 <LCD_Send_Command>
    2df0:	80 e0       	ldi	r24, 0x00	; 0
    2df2:	90 e0       	ldi	r25, 0x00	; 0
    2df4:	a8 e4       	ldi	r26, 0x48	; 72
    2df6:	b3 e4       	ldi	r27, 0x43	; 67
    2df8:	8f a3       	std	Y+39, r24	; 0x27
    2dfa:	98 a7       	std	Y+40, r25	; 0x28
    2dfc:	a9 a7       	std	Y+41, r26	; 0x29
    2dfe:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e00:	6f a1       	ldd	r22, Y+39	; 0x27
    2e02:	78 a5       	ldd	r23, Y+40	; 0x28
    2e04:	89 a5       	ldd	r24, Y+41	; 0x29
    2e06:	9a a5       	ldd	r25, Y+42	; 0x2a
    2e08:	20 e0       	ldi	r18, 0x00	; 0
    2e0a:	30 e0       	ldi	r19, 0x00	; 0
    2e0c:	4a ef       	ldi	r20, 0xFA	; 250
    2e0e:	54 e4       	ldi	r21, 0x44	; 68
    2e10:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2e14:	dc 01       	movw	r26, r24
    2e16:	cb 01       	movw	r24, r22
    2e18:	8b a3       	std	Y+35, r24	; 0x23
    2e1a:	9c a3       	std	Y+36, r25	; 0x24
    2e1c:	ad a3       	std	Y+37, r26	; 0x25
    2e1e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2e20:	6b a1       	ldd	r22, Y+35	; 0x23
    2e22:	7c a1       	ldd	r23, Y+36	; 0x24
    2e24:	8d a1       	ldd	r24, Y+37	; 0x25
    2e26:	9e a1       	ldd	r25, Y+38	; 0x26
    2e28:	20 e0       	ldi	r18, 0x00	; 0
    2e2a:	30 e0       	ldi	r19, 0x00	; 0
    2e2c:	40 e8       	ldi	r20, 0x80	; 128
    2e2e:	5f e3       	ldi	r21, 0x3F	; 63
    2e30:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2e34:	88 23       	and	r24, r24
    2e36:	2c f4       	brge	.+10     	; 0x2e42 <main+0x872>
		__ticks = 1;
    2e38:	81 e0       	ldi	r24, 0x01	; 1
    2e3a:	90 e0       	ldi	r25, 0x00	; 0
    2e3c:	9a a3       	std	Y+34, r25	; 0x22
    2e3e:	89 a3       	std	Y+33, r24	; 0x21
    2e40:	3f c0       	rjmp	.+126    	; 0x2ec0 <main+0x8f0>
	else if (__tmp > 65535)
    2e42:	6b a1       	ldd	r22, Y+35	; 0x23
    2e44:	7c a1       	ldd	r23, Y+36	; 0x24
    2e46:	8d a1       	ldd	r24, Y+37	; 0x25
    2e48:	9e a1       	ldd	r25, Y+38	; 0x26
    2e4a:	20 e0       	ldi	r18, 0x00	; 0
    2e4c:	3f ef       	ldi	r19, 0xFF	; 255
    2e4e:	4f e7       	ldi	r20, 0x7F	; 127
    2e50:	57 e4       	ldi	r21, 0x47	; 71
    2e52:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2e56:	18 16       	cp	r1, r24
    2e58:	4c f5       	brge	.+82     	; 0x2eac <main+0x8dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e5a:	6f a1       	ldd	r22, Y+39	; 0x27
    2e5c:	78 a5       	ldd	r23, Y+40	; 0x28
    2e5e:	89 a5       	ldd	r24, Y+41	; 0x29
    2e60:	9a a5       	ldd	r25, Y+42	; 0x2a
    2e62:	20 e0       	ldi	r18, 0x00	; 0
    2e64:	30 e0       	ldi	r19, 0x00	; 0
    2e66:	40 e2       	ldi	r20, 0x20	; 32
    2e68:	51 e4       	ldi	r21, 0x41	; 65
    2e6a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2e6e:	dc 01       	movw	r26, r24
    2e70:	cb 01       	movw	r24, r22
    2e72:	bc 01       	movw	r22, r24
    2e74:	cd 01       	movw	r24, r26
    2e76:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2e7a:	dc 01       	movw	r26, r24
    2e7c:	cb 01       	movw	r24, r22
    2e7e:	9a a3       	std	Y+34, r25	; 0x22
    2e80:	89 a3       	std	Y+33, r24	; 0x21
    2e82:	0f c0       	rjmp	.+30     	; 0x2ea2 <main+0x8d2>
    2e84:	88 ec       	ldi	r24, 0xC8	; 200
    2e86:	90 e0       	ldi	r25, 0x00	; 0
    2e88:	98 a3       	std	Y+32, r25	; 0x20
    2e8a:	8f 8f       	std	Y+31, r24	; 0x1f
    2e8c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2e8e:	98 a1       	ldd	r25, Y+32	; 0x20
    2e90:	01 97       	sbiw	r24, 0x01	; 1
    2e92:	f1 f7       	brne	.-4      	; 0x2e90 <main+0x8c0>
    2e94:	98 a3       	std	Y+32, r25	; 0x20
    2e96:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e98:	89 a1       	ldd	r24, Y+33	; 0x21
    2e9a:	9a a1       	ldd	r25, Y+34	; 0x22
    2e9c:	01 97       	sbiw	r24, 0x01	; 1
    2e9e:	9a a3       	std	Y+34, r25	; 0x22
    2ea0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ea2:	89 a1       	ldd	r24, Y+33	; 0x21
    2ea4:	9a a1       	ldd	r25, Y+34	; 0x22
    2ea6:	00 97       	sbiw	r24, 0x00	; 0
    2ea8:	69 f7       	brne	.-38     	; 0x2e84 <main+0x8b4>
    2eaa:	14 c0       	rjmp	.+40     	; 0x2ed4 <main+0x904>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2eac:	6b a1       	ldd	r22, Y+35	; 0x23
    2eae:	7c a1       	ldd	r23, Y+36	; 0x24
    2eb0:	8d a1       	ldd	r24, Y+37	; 0x25
    2eb2:	9e a1       	ldd	r25, Y+38	; 0x26
    2eb4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2eb8:	dc 01       	movw	r26, r24
    2eba:	cb 01       	movw	r24, r22
    2ebc:	9a a3       	std	Y+34, r25	; 0x22
    2ebe:	89 a3       	std	Y+33, r24	; 0x21
    2ec0:	89 a1       	ldd	r24, Y+33	; 0x21
    2ec2:	9a a1       	ldd	r25, Y+34	; 0x22
    2ec4:	9e 8f       	std	Y+30, r25	; 0x1e
    2ec6:	8d 8f       	std	Y+29, r24	; 0x1d
    2ec8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2eca:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2ecc:	01 97       	sbiw	r24, 0x01	; 1
    2ece:	f1 f7       	brne	.-4      	; 0x2ecc <main+0x8fc>
    2ed0:	9e 8f       	std	Y+30, r25	; 0x1e
    2ed2:	8d 8f       	std	Y+29, r24	; 0x1d
  		  _delay_ms(200) ;
     	 	  LCD_Send_Command(LCD_FONT_SMALL_4BIT) ;
    2ed4:	88 e2       	ldi	r24, 0x28	; 40
    2ed6:	0e 94 9b 05 	call	0xb36	; 0xb36 <LCD_Send_Command>
    2eda:	80 e0       	ldi	r24, 0x00	; 0
    2edc:	90 e0       	ldi	r25, 0x00	; 0
    2ede:	a8 e4       	ldi	r26, 0x48	; 72
    2ee0:	b3 e4       	ldi	r27, 0x43	; 67
    2ee2:	89 8f       	std	Y+25, r24	; 0x19
    2ee4:	9a 8f       	std	Y+26, r25	; 0x1a
    2ee6:	ab 8f       	std	Y+27, r26	; 0x1b
    2ee8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2eea:	69 8d       	ldd	r22, Y+25	; 0x19
    2eec:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2eee:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2ef0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2ef2:	20 e0       	ldi	r18, 0x00	; 0
    2ef4:	30 e0       	ldi	r19, 0x00	; 0
    2ef6:	4a ef       	ldi	r20, 0xFA	; 250
    2ef8:	54 e4       	ldi	r21, 0x44	; 68
    2efa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2efe:	dc 01       	movw	r26, r24
    2f00:	cb 01       	movw	r24, r22
    2f02:	8d 8b       	std	Y+21, r24	; 0x15
    2f04:	9e 8b       	std	Y+22, r25	; 0x16
    2f06:	af 8b       	std	Y+23, r26	; 0x17
    2f08:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2f0a:	6d 89       	ldd	r22, Y+21	; 0x15
    2f0c:	7e 89       	ldd	r23, Y+22	; 0x16
    2f0e:	8f 89       	ldd	r24, Y+23	; 0x17
    2f10:	98 8d       	ldd	r25, Y+24	; 0x18
    2f12:	20 e0       	ldi	r18, 0x00	; 0
    2f14:	30 e0       	ldi	r19, 0x00	; 0
    2f16:	40 e8       	ldi	r20, 0x80	; 128
    2f18:	5f e3       	ldi	r21, 0x3F	; 63
    2f1a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2f1e:	88 23       	and	r24, r24
    2f20:	2c f4       	brge	.+10     	; 0x2f2c <main+0x95c>
		__ticks = 1;
    2f22:	81 e0       	ldi	r24, 0x01	; 1
    2f24:	90 e0       	ldi	r25, 0x00	; 0
    2f26:	9c 8b       	std	Y+20, r25	; 0x14
    2f28:	8b 8b       	std	Y+19, r24	; 0x13
    2f2a:	3f c0       	rjmp	.+126    	; 0x2faa <main+0x9da>
	else if (__tmp > 65535)
    2f2c:	6d 89       	ldd	r22, Y+21	; 0x15
    2f2e:	7e 89       	ldd	r23, Y+22	; 0x16
    2f30:	8f 89       	ldd	r24, Y+23	; 0x17
    2f32:	98 8d       	ldd	r25, Y+24	; 0x18
    2f34:	20 e0       	ldi	r18, 0x00	; 0
    2f36:	3f ef       	ldi	r19, 0xFF	; 255
    2f38:	4f e7       	ldi	r20, 0x7F	; 127
    2f3a:	57 e4       	ldi	r21, 0x47	; 71
    2f3c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2f40:	18 16       	cp	r1, r24
    2f42:	4c f5       	brge	.+82     	; 0x2f96 <main+0x9c6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f44:	69 8d       	ldd	r22, Y+25	; 0x19
    2f46:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2f48:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2f4a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2f4c:	20 e0       	ldi	r18, 0x00	; 0
    2f4e:	30 e0       	ldi	r19, 0x00	; 0
    2f50:	40 e2       	ldi	r20, 0x20	; 32
    2f52:	51 e4       	ldi	r21, 0x41	; 65
    2f54:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2f58:	dc 01       	movw	r26, r24
    2f5a:	cb 01       	movw	r24, r22
    2f5c:	bc 01       	movw	r22, r24
    2f5e:	cd 01       	movw	r24, r26
    2f60:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2f64:	dc 01       	movw	r26, r24
    2f66:	cb 01       	movw	r24, r22
    2f68:	9c 8b       	std	Y+20, r25	; 0x14
    2f6a:	8b 8b       	std	Y+19, r24	; 0x13
    2f6c:	0f c0       	rjmp	.+30     	; 0x2f8c <main+0x9bc>
    2f6e:	88 ec       	ldi	r24, 0xC8	; 200
    2f70:	90 e0       	ldi	r25, 0x00	; 0
    2f72:	9a 8b       	std	Y+18, r25	; 0x12
    2f74:	89 8b       	std	Y+17, r24	; 0x11
    2f76:	89 89       	ldd	r24, Y+17	; 0x11
    2f78:	9a 89       	ldd	r25, Y+18	; 0x12
    2f7a:	01 97       	sbiw	r24, 0x01	; 1
    2f7c:	f1 f7       	brne	.-4      	; 0x2f7a <main+0x9aa>
    2f7e:	9a 8b       	std	Y+18, r25	; 0x12
    2f80:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f82:	8b 89       	ldd	r24, Y+19	; 0x13
    2f84:	9c 89       	ldd	r25, Y+20	; 0x14
    2f86:	01 97       	sbiw	r24, 0x01	; 1
    2f88:	9c 8b       	std	Y+20, r25	; 0x14
    2f8a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f8c:	8b 89       	ldd	r24, Y+19	; 0x13
    2f8e:	9c 89       	ldd	r25, Y+20	; 0x14
    2f90:	00 97       	sbiw	r24, 0x00	; 0
    2f92:	69 f7       	brne	.-38     	; 0x2f6e <main+0x99e>
    2f94:	14 c0       	rjmp	.+40     	; 0x2fbe <main+0x9ee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f96:	6d 89       	ldd	r22, Y+21	; 0x15
    2f98:	7e 89       	ldd	r23, Y+22	; 0x16
    2f9a:	8f 89       	ldd	r24, Y+23	; 0x17
    2f9c:	98 8d       	ldd	r25, Y+24	; 0x18
    2f9e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2fa2:	dc 01       	movw	r26, r24
    2fa4:	cb 01       	movw	r24, r22
    2fa6:	9c 8b       	std	Y+20, r25	; 0x14
    2fa8:	8b 8b       	std	Y+19, r24	; 0x13
    2faa:	8b 89       	ldd	r24, Y+19	; 0x13
    2fac:	9c 89       	ldd	r25, Y+20	; 0x14
    2fae:	98 8b       	std	Y+16, r25	; 0x10
    2fb0:	8f 87       	std	Y+15, r24	; 0x0f
    2fb2:	8f 85       	ldd	r24, Y+15	; 0x0f
    2fb4:	98 89       	ldd	r25, Y+16	; 0x10
    2fb6:	01 97       	sbiw	r24, 0x01	; 1
    2fb8:	f1 f7       	brne	.-4      	; 0x2fb6 <main+0x9e6>
    2fba:	98 8b       	std	Y+16, r25	; 0x10
    2fbc:	8f 87       	std	Y+15, r24	; 0x0f
		}
		LCD_Clear() ;
		LCD_Send_Text(2,14,"Aya") ;
		_delay_ms(50) ;

		for(i=0 ; i<16 ;i++)
    2fbe:	de 01       	movw	r26, r28
    2fc0:	a1 58       	subi	r26, 0x81	; 129
    2fc2:	bf 4f       	sbci	r27, 0xFF	; 255
    2fc4:	fe 01       	movw	r30, r28
    2fc6:	e1 58       	subi	r30, 0x81	; 129
    2fc8:	ff 4f       	sbci	r31, 0xFF	; 255
    2fca:	80 81       	ld	r24, Z
    2fcc:	8f 5f       	subi	r24, 0xFF	; 255
    2fce:	8c 93       	st	X, r24
    2fd0:	fe 01       	movw	r30, r28
    2fd2:	e1 58       	subi	r30, 0x81	; 129
    2fd4:	ff 4f       	sbci	r31, 0xFF	; 255
    2fd6:	80 81       	ld	r24, Z
    2fd8:	80 31       	cpi	r24, 0x10	; 16
    2fda:	08 f4       	brcc	.+2      	; 0x2fde <main+0xa0e>
    2fdc:	91 ce       	rjmp	.-734    	; 0x2d00 <main+0x730>
  		  _delay_ms(200) ;
     	 	  LCD_Send_Command(LCD_FONT_SMALL_4BIT) ;
    		  _delay_ms((200)) ;

		}
		LCD_Clear() ;
    2fde:	0e 94 c7 0e 	call	0x1d8e	; 0x1d8e <LCD_Clear>
		LCD_Send_Command(LCD_RETURN_HOME) ;
    2fe2:	82 e0       	ldi	r24, 0x02	; 2
    2fe4:	0e 94 9b 05 	call	0xb36	; 0xb36 <LCD_Send_Command>
    2fe8:	80 e0       	ldi	r24, 0x00	; 0
    2fea:	90 e0       	ldi	r25, 0x00	; 0
    2fec:	a8 e4       	ldi	r26, 0x48	; 72
    2fee:	b3 e4       	ldi	r27, 0x43	; 67
    2ff0:	8b 87       	std	Y+11, r24	; 0x0b
    2ff2:	9c 87       	std	Y+12, r25	; 0x0c
    2ff4:	ad 87       	std	Y+13, r26	; 0x0d
    2ff6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ff8:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ffa:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ffc:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ffe:	9e 85       	ldd	r25, Y+14	; 0x0e
    3000:	20 e0       	ldi	r18, 0x00	; 0
    3002:	30 e0       	ldi	r19, 0x00	; 0
    3004:	4a ef       	ldi	r20, 0xFA	; 250
    3006:	54 e4       	ldi	r21, 0x44	; 68
    3008:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    300c:	dc 01       	movw	r26, r24
    300e:	cb 01       	movw	r24, r22
    3010:	8f 83       	std	Y+7, r24	; 0x07
    3012:	98 87       	std	Y+8, r25	; 0x08
    3014:	a9 87       	std	Y+9, r26	; 0x09
    3016:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3018:	6f 81       	ldd	r22, Y+7	; 0x07
    301a:	78 85       	ldd	r23, Y+8	; 0x08
    301c:	89 85       	ldd	r24, Y+9	; 0x09
    301e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3020:	20 e0       	ldi	r18, 0x00	; 0
    3022:	30 e0       	ldi	r19, 0x00	; 0
    3024:	40 e8       	ldi	r20, 0x80	; 128
    3026:	5f e3       	ldi	r21, 0x3F	; 63
    3028:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    302c:	88 23       	and	r24, r24
    302e:	2c f4       	brge	.+10     	; 0x303a <main+0xa6a>
		__ticks = 1;
    3030:	81 e0       	ldi	r24, 0x01	; 1
    3032:	90 e0       	ldi	r25, 0x00	; 0
    3034:	9e 83       	std	Y+6, r25	; 0x06
    3036:	8d 83       	std	Y+5, r24	; 0x05
    3038:	3f c0       	rjmp	.+126    	; 0x30b8 <main+0xae8>
	else if (__tmp > 65535)
    303a:	6f 81       	ldd	r22, Y+7	; 0x07
    303c:	78 85       	ldd	r23, Y+8	; 0x08
    303e:	89 85       	ldd	r24, Y+9	; 0x09
    3040:	9a 85       	ldd	r25, Y+10	; 0x0a
    3042:	20 e0       	ldi	r18, 0x00	; 0
    3044:	3f ef       	ldi	r19, 0xFF	; 255
    3046:	4f e7       	ldi	r20, 0x7F	; 127
    3048:	57 e4       	ldi	r21, 0x47	; 71
    304a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    304e:	18 16       	cp	r1, r24
    3050:	4c f5       	brge	.+82     	; 0x30a4 <main+0xad4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3052:	6b 85       	ldd	r22, Y+11	; 0x0b
    3054:	7c 85       	ldd	r23, Y+12	; 0x0c
    3056:	8d 85       	ldd	r24, Y+13	; 0x0d
    3058:	9e 85       	ldd	r25, Y+14	; 0x0e
    305a:	20 e0       	ldi	r18, 0x00	; 0
    305c:	30 e0       	ldi	r19, 0x00	; 0
    305e:	40 e2       	ldi	r20, 0x20	; 32
    3060:	51 e4       	ldi	r21, 0x41	; 65
    3062:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3066:	dc 01       	movw	r26, r24
    3068:	cb 01       	movw	r24, r22
    306a:	bc 01       	movw	r22, r24
    306c:	cd 01       	movw	r24, r26
    306e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3072:	dc 01       	movw	r26, r24
    3074:	cb 01       	movw	r24, r22
    3076:	9e 83       	std	Y+6, r25	; 0x06
    3078:	8d 83       	std	Y+5, r24	; 0x05
    307a:	0f c0       	rjmp	.+30     	; 0x309a <main+0xaca>
    307c:	88 ec       	ldi	r24, 0xC8	; 200
    307e:	90 e0       	ldi	r25, 0x00	; 0
    3080:	9c 83       	std	Y+4, r25	; 0x04
    3082:	8b 83       	std	Y+3, r24	; 0x03
    3084:	8b 81       	ldd	r24, Y+3	; 0x03
    3086:	9c 81       	ldd	r25, Y+4	; 0x04
    3088:	01 97       	sbiw	r24, 0x01	; 1
    308a:	f1 f7       	brne	.-4      	; 0x3088 <main+0xab8>
    308c:	9c 83       	std	Y+4, r25	; 0x04
    308e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3090:	8d 81       	ldd	r24, Y+5	; 0x05
    3092:	9e 81       	ldd	r25, Y+6	; 0x06
    3094:	01 97       	sbiw	r24, 0x01	; 1
    3096:	9e 83       	std	Y+6, r25	; 0x06
    3098:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    309a:	8d 81       	ldd	r24, Y+5	; 0x05
    309c:	9e 81       	ldd	r25, Y+6	; 0x06
    309e:	00 97       	sbiw	r24, 0x00	; 0
    30a0:	69 f7       	brne	.-38     	; 0x307c <main+0xaac>
    30a2:	a9 ca       	rjmp	.-2734   	; 0x25f6 <main+0x26>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30a4:	6f 81       	ldd	r22, Y+7	; 0x07
    30a6:	78 85       	ldd	r23, Y+8	; 0x08
    30a8:	89 85       	ldd	r24, Y+9	; 0x09
    30aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    30ac:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    30b0:	dc 01       	movw	r26, r24
    30b2:	cb 01       	movw	r24, r22
    30b4:	9e 83       	std	Y+6, r25	; 0x06
    30b6:	8d 83       	std	Y+5, r24	; 0x05
    30b8:	8d 81       	ldd	r24, Y+5	; 0x05
    30ba:	9e 81       	ldd	r25, Y+6	; 0x06
    30bc:	9a 83       	std	Y+2, r25	; 0x02
    30be:	89 83       	std	Y+1, r24	; 0x01
    30c0:	89 81       	ldd	r24, Y+1	; 0x01
    30c2:	9a 81       	ldd	r25, Y+2	; 0x02
    30c4:	01 97       	sbiw	r24, 0x01	; 1
    30c6:	f1 f7       	brne	.-4      	; 0x30c4 <main+0xaf4>
    30c8:	9a 83       	std	Y+2, r25	; 0x02
    30ca:	89 83       	std	Y+1, r24	; 0x01
    30cc:	94 ca       	rjmp	.-2776   	; 0x25f6 <main+0x26>

000030ce <__prologue_saves__>:
    30ce:	2f 92       	push	r2
    30d0:	3f 92       	push	r3
    30d2:	4f 92       	push	r4
    30d4:	5f 92       	push	r5
    30d6:	6f 92       	push	r6
    30d8:	7f 92       	push	r7
    30da:	8f 92       	push	r8
    30dc:	9f 92       	push	r9
    30de:	af 92       	push	r10
    30e0:	bf 92       	push	r11
    30e2:	cf 92       	push	r12
    30e4:	df 92       	push	r13
    30e6:	ef 92       	push	r14
    30e8:	ff 92       	push	r15
    30ea:	0f 93       	push	r16
    30ec:	1f 93       	push	r17
    30ee:	cf 93       	push	r28
    30f0:	df 93       	push	r29
    30f2:	cd b7       	in	r28, 0x3d	; 61
    30f4:	de b7       	in	r29, 0x3e	; 62
    30f6:	ca 1b       	sub	r28, r26
    30f8:	db 0b       	sbc	r29, r27
    30fa:	0f b6       	in	r0, 0x3f	; 63
    30fc:	f8 94       	cli
    30fe:	de bf       	out	0x3e, r29	; 62
    3100:	0f be       	out	0x3f, r0	; 63
    3102:	cd bf       	out	0x3d, r28	; 61
    3104:	09 94       	ijmp

00003106 <__epilogue_restores__>:
    3106:	2a 88       	ldd	r2, Y+18	; 0x12
    3108:	39 88       	ldd	r3, Y+17	; 0x11
    310a:	48 88       	ldd	r4, Y+16	; 0x10
    310c:	5f 84       	ldd	r5, Y+15	; 0x0f
    310e:	6e 84       	ldd	r6, Y+14	; 0x0e
    3110:	7d 84       	ldd	r7, Y+13	; 0x0d
    3112:	8c 84       	ldd	r8, Y+12	; 0x0c
    3114:	9b 84       	ldd	r9, Y+11	; 0x0b
    3116:	aa 84       	ldd	r10, Y+10	; 0x0a
    3118:	b9 84       	ldd	r11, Y+9	; 0x09
    311a:	c8 84       	ldd	r12, Y+8	; 0x08
    311c:	df 80       	ldd	r13, Y+7	; 0x07
    311e:	ee 80       	ldd	r14, Y+6	; 0x06
    3120:	fd 80       	ldd	r15, Y+5	; 0x05
    3122:	0c 81       	ldd	r16, Y+4	; 0x04
    3124:	1b 81       	ldd	r17, Y+3	; 0x03
    3126:	aa 81       	ldd	r26, Y+2	; 0x02
    3128:	b9 81       	ldd	r27, Y+1	; 0x01
    312a:	ce 0f       	add	r28, r30
    312c:	d1 1d       	adc	r29, r1
    312e:	0f b6       	in	r0, 0x3f	; 63
    3130:	f8 94       	cli
    3132:	de bf       	out	0x3e, r29	; 62
    3134:	0f be       	out	0x3f, r0	; 63
    3136:	cd bf       	out	0x3d, r28	; 61
    3138:	ed 01       	movw	r28, r26
    313a:	08 95       	ret

0000313c <_exit>:
    313c:	f8 94       	cli

0000313e <__stop_program>:
    313e:	ff cf       	rjmp	.-2      	; 0x313e <__stop_program>
